# SOME DESCRIPTIVE TITLE.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# 
# Translators:
# Aris Chow <arischow@gmail.com>, 2018
# Arthur Wu <dandelionstill@gmail.com>, 2018
# b1c58ea15303be9e49500f6966759e5d, 2018
# HuanCheng Bai <xiqingongzi@gmail.com>, 2018-2019
# BAKEZQ <zhongquan789@126.com>, 2018
# belitex, 2018
# belitex, 2018
# Blg Mengde <kid.blg@gmail.com>, 2019
# BobDu <i@bobdu.cc>, 2018
# Brian Wang <singeeking@gmail.com>, 2018
# charloai <charlo@charlo.xin>, 2018
# charloai <charlo@charlo.xin>, 2018
# Cy <ll_faw@hotmail.com>, 2018
# Danfi Tao <tdanfi@gmail.com>, 2018
# Danfi Tao <tdanfi@gmail.com>, 2018
# flypopo <flypopo.reg@qq.com>, 2018
# fuxiuyin <woshifuxiuyin@gmail.com>, 2019
# fuxiuyin <woshifuxiuyin@gmail.com>, 2019
# Hongjie Tian <tianhongjie07@gmail.com>, 2017
# ausaki <www.ljm969087551@qq.com>, 2018
# JINGMING DAI <d664216@gmail.com>, 2018
# jinwen wu <toono@qq.com>, 2018
# Junkai Shao <skaifun.dev@gmail.com>, 2018
# Kai Song <songkaiape@gmail.com>, 2017
# Kevin Sze <leiarix@gmail.com>, 2014
# Kevin Sze <leiarix@gmail.com>, 2014
# Liping Wang <lynn.config@gmail.com>, 2016
# marcus ma <freebird0221@gmail.com>, 2018
# paisins Ji <1355871637@qq.com>, 2018
# qiang wu <wuqiangroy@live.com>, 2018
# Ronald White <tkliuxing@me.com>, 2019
# Rui Deng <vipdengrui@vip.qq.com>, 2018
# sanker <mr.songxr@gmail.com>, 2018
# Shellbye bai <shellbye.com@gmail.com>, 2018
# shouheng lei <zz5432@qq.com>, 2018
# 思源曹 <seeran@outlook.com>, 2018
# Vincent <Intelligent.vincent@gmail.com>, 2018
# Liping Wang <lynn.config@gmail.com>, 2016
# Wang XinHe <wang__xin_he@163.com>, 2018
# WayneCher <aaazwg@msn.cn>, 2019
# zwwhdls <zwwhdls@hotmail.com>, 2018
# XingFive <haoxingwu@hotmail.com>, 2018
# XingFive <haoxingwu@hotmail.com>, 2018
# dykai <yingkaidang@gmail.com>, 2019
# yhliyr <lokidri@outlook.com>, 2018
# Zhengyang Wang <sufforest@gmail.com>, 2018
# BAKEZQ <zhongquan789@126.com>, 2018
# zwwhdls <zwwhdls@hotmail.com>, 2018
# 吴彬 <xiake21x@qq.com>, 2016
# 小明 王 <qing_chun_dou@126.com>, 2018
# 开宇 冯 <loveress01@outlook.com>, 2019
# 得鑫 李 <lidexin911@126.com>, 2018
# 思源曹 <seeran@outlook.com>, 2018
# BobDu <i@bobdu.cc>, 2018
# 文隆 胡 <xcluas@gmail.com>, 2018
# 景隆 王 <Arsenal591@126.com>, 2018
# 阿西 <davidxu5945@qq.com>, 2018
# b1c58ea15303be9e49500f6966759e5d, 2018
msgid ""
msgstr ""
"Project-Id-Version: django-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-21 11:30-0500\n"
"PO-Revision-Date: 2019-03-29 21:26+0000\n"
"Last-Translator: Blg Mengde <kid.blg@gmail.com>\n"
"Language-Team: Chinese (China) (http://www.transifex.com/django/django-docs/"
"language/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "Customizing authentication in Django"
msgstr "Django 中的自定义验证"

msgid ""
"The authentication that comes with Django is good enough for most common "
"cases, but you may have needs not met by the out-of-the-box defaults. "
"Customizing authentication in your projects requires understanding what "
"points of the provided system are extensible or replaceable. This document "
"provides details about how the auth system can be customized."
msgstr ""
"Django自带的验证机制足以应对一般情况，但是你可能不满足于默认的可立即使用的配"
"置。在你的项目中自定义验证机制，需要了解在已有验证系统中哪些地方是可以扩展"
"的，哪些地方是可以代替的。这个文档提供了如何自定义验证系统的一些细节。"

msgid ""
":ref:`Authentication backends <authentication-backends>` provide an "
"extensible system for when a username and password stored with the user "
"model need to be authenticated against a different service than Django's "
"default."
msgstr ""
"<authentication-backends>当用户模型中存储的用户名和密码需要不同于Django默认服"
"务的验证时，提供了一个可扩展系统。"

msgid ""
"You can give your models :ref:`custom permissions <custom-permissions>` that "
"can be checked through Django's authorization system."
msgstr ""
"你可以给你的模型 :ref:`定制权限 <custom-permissions>` 并且可以被Django的授权"
"系统通过检查。"

msgid ""
"You can :ref:`extend <extending-user>` the default ``User`` model, or :ref:"
"`substitute <auth-custom-user>` a completely customized model."
msgstr ""
"你可以 :ref:` 扩展 <extending-user> ` 默认的 ``User`` 模型，或者完全自定义一"
"个模型进行 :ref:` 替换 <auth-custom-user>` "

msgid "Other authentication sources"
msgstr "其它认证资源"

msgid ""
"There may be times you have the need to hook into another authentication "
"source -- that is, another source of usernames and passwords or "
"authentication methods."
msgstr "有时候你需要连接到其他认证源——一个包含用户名及密码的源或者认证方法。"

msgid ""
"For example, your company may already have an LDAP setup that stores a "
"username and password for every employee. It'd be a hassle for both the "
"network administrator and the users themselves if users had separate "
"accounts in LDAP and the Django-based applications."
msgstr ""
"例如，你的公司可能已经存在一套存储所有员工用户名及密码的 LDAP 配置。如果用户"
"在LDAP和基于Django的应用程序中都有独立账号，那对用户自己或者网络管理员都会造"
"成麻烦。"

msgid ""
"So, to handle situations like this, the Django authentication system lets "
"you plug in other authentication sources. You can override Django's default "
"database-based scheme, or you can use the default system in tandem with "
"other systems."
msgstr ""
"所以，为了处理这样的情况，Django认证系统可以让你插入其他认证源。您可以重写"
"Django的默认基于数据库的方案，或者可以与其他系统一起使用默认系统。"

msgid ""
"See the :ref:`authentication backend reference <authentication-backends-"
"reference>` for information on the authentication backends included with "
"Django."
msgstr ""
"请参阅<authentication-backends-reference>身份验证后端引用，有关Django中包含的"
"身份验证后端的信息。"

msgid "Specifying authentication backends"
msgstr "指定授权后端"

msgid ""
"Behind the scenes, Django maintains a list of \"authentication backends\" "
"that it checks for authentication. When somebody calls :func:`django.contrib."
"auth.authenticate()` -- as described in :ref:`How to log a user in <how-to-"
"log-a-user-in>` -- Django tries authenticating across all of its "
"authentication backends. If the first authentication method fails, Django "
"tries the second one, and so on, until all backends have been attempted."
msgstr ""
"在幕后，Django维护一个“身份验证后端”列表，用于检查身份验证。当有人调用:func:"
"`django.contrib.auth.authenticate()` - 如下所示:ref:`如何在`用户登录<how-to-"
"log-a-user-in>` - Django尝试所有身份验证后端进行身份验证。如果第一个验证方法"
"失败，Django会尝试第二个验证方法，依此类推，直到所有后端都被尝试。"

msgid ""
"The list of authentication backends to use is specified in the :setting:"
"`AUTHENTICATION_BACKENDS` setting. This should be a list of Python path "
"names that point to Python classes that know how to authenticate. These "
"classes can be anywhere on your Python path."
msgstr ""
"在设置：`AUTHENTICATION_BACKENDS`设置中指定要使用的身份验证后端列表。这应该是"
"一个Python路径名列表，指向知道如何进行身份验证的Python类。这些类可以在你的"
"Python路径上的任何地方。"

msgid "By default, :setting:`AUTHENTICATION_BACKENDS` is set to::"
msgstr "默认， :setting:`AUTHENTICATION_BACKENDS`设定为::"

msgid ""
"That's the basic authentication backend that checks the Django users "
"database and queries the built-in permissions. It does not provide "
"protection against brute force attacks via any rate limiting mechanism. You "
"may either implement your own rate limiting mechanism in a custom auth "
"backend, or use the mechanisms provided by most Web servers."
msgstr ""
"Django 的默认后台只检查其数据库和内置权限，并不提供任何登录限制机制来防止暴力"
"登录攻击。如果需要抵制暴力登录攻击，需要自己在后台实现登录限制机制，或者使用 "
"Web 服务器提供的保护机制。"

msgid ""
"The order of :setting:`AUTHENTICATION_BACKENDS` matters, so if the same "
"username and password is valid in multiple backends, Django will stop "
"processing at the first positive match."
msgstr ""
":setting:`AUTHENTICATION_BACKENDS`是有序的，如果相同的用户名和密码对于多个后"
"端都是合法的，那么 Django 会优先使用其中的第一个后端，而不会再处理后面的后"
"端。"

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception, authentication will immediately fail. Django won't check the "
"backends that follow."
msgstr ""
"如果一个后端抛出 :class:`~django.core.exceptions.PermissionDenied` 异常，则验"
"证流程立马终止，Django 不会继续检查其后的后端。"

msgid ""
"Once a user has authenticated, Django stores which backend was used to "
"authenticate the user in the user's session, and re-uses the same backend "
"for the duration of that session whenever access to the currently "
"authenticated user is needed. This effectively means that authentication "
"sources are cached on a per-session basis, so if you change :setting:"
"`AUTHENTICATION_BACKENDS`, you'll need to clear out session data if you need "
"to force users to re-authenticate using different methods. A simple way to "
"do that is simply to execute ``Session.objects.all().delete()``."
msgstr ""
"一旦用户通过验证，Django 会将之前用于验证该用户的后端保存在用户的 session "
"中，以便在将来（session 有效期内）需要访问当前已验证的用户时可以重用该后端。"
"这个优化意味着在 session 中缓存了验证后端的源代码，因此，如果你修改了 :"
"setting:`AUTHENTICATION_BACKENDS` 同时希望使用另外的方法重新验证用户，那么需"
"要清除 session 数据。清除 session 数据的一个简单方法是执行 ``Session.objects."
"all().delete()``。"

msgid "Writing an authentication backend"
msgstr "编写一个验证后端"

msgid ""
"An authentication backend is a class that implements two required methods: "
"``get_user(user_id)`` and ``authenticate(request, **credentials)``, as well "
"as a set of optional permission related :ref:`authorization methods "
"<authorization_methods>`."
msgstr ""
"一个验证后端其实就是一个 class，它实现了两个必要的方法："
"``get_user(user_id)`` 和 ``authenticate(request, **credentials)``，以及其它一"
"系列可选的权限相关的方法:ref:`authorization methods<authorization_methods> `."

msgid ""
"The ``get_user`` method takes a ``user_id`` -- which could be a username, "
"database ID or whatever, but has to be the primary key of your user object "
"-- and returns a user object or ``None``."
msgstr ""
"\"get_user\"方法的参数是\"user_id\"，并返回一个user对象或None。参数user_id也"
"可能是username、数据库id，或者其他值，但这个参数必须你的user对象的主键。"

msgid ""
"The ``authenticate`` method takes a ``request`` argument and credentials as "
"keyword arguments. Most of the time, it'll just look like this::"
msgstr ""
"``authenticate``方法接受 ``request`` 参数和 credentials 关键字参数，大多数情"
"况下，该方法类似于下面的代码::"

msgid "But it could also authenticate a token, like so::"
msgstr "但它也可能验证一个Token，就像这样::"

msgid ""
"Either way, ``authenticate()`` should check the credentials it gets and "
"return a user object that matches those credentials if the credentials are "
"valid. If they're not valid, it should return ``None``."
msgstr ""
"无论是哪一种方式，``authenticate()``都应该检查所获得的凭证，并当凭证有效时返"
"回一个用户对象。当凭证无效时，应该返回``None``。"

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` and may be ``None`` if "
"it wasn't provided to :func:`~django.contrib.auth.authenticate` (which "
"passes it on to the backend)."
msgstr ""
"``request`` 是 :class:`~django.http.HttpRequest` ，默认为 ``None`` 如果没有被"
"提供给 :func:`~django.contrib.auth.authenticate` (它把request传给后端)."

msgid ""
"The Django admin is tightly coupled to the Django :ref:`User object <user-"
"objects>`. The best way to deal with this is to create a Django ``User`` "
"object for each user that exists for your backend (e.g., in your LDAP "
"directory, your external SQL database, etc.) You can either write a script "
"to do this in advance, or your ``authenticate`` method can do it the first "
"time a user logs in."
msgstr ""
"Django admin 和 Django :ref:`User object <user-objects>`. 紧密结合。最好的处"
"理方式是为你后端的每一个用户都创建一个 Django ``User`` 。(例如, 你的 LDAP 目"
"录、你的外部 SQL 数据库等等。) 你能写一个脚本来提前做这件事情，或者让你的 "
"``authenticate`` 方法在一个用户第一次登录时做这件事。"

msgid ""
"Here's an example backend that authenticates against a username and password "
"variable defined in your ``settings.py`` file and creates a Django ``User`` "
"object the first time a user authenticates::"
msgstr ""
"下面是一段验证后端的示例代码，它通过在 ``settings.py``文件中定义的用户名和密"
"码变量进行身份验证，并且当用户第一次验证时，创建一个Django的``User``对象。"

msgid "Handling authorization in custom backends"
msgstr "在自定义的后端处理授权"

msgid "Custom auth backends can provide their own permissions."
msgstr "自定义的认证后端可以提供他们自己的权限。"

msgid ""
"The user model will delegate permission lookup functions (:meth:`~django."
"contrib.auth.models.User.get_group_permissions()`, :meth:`~django.contrib."
"auth.models.User.get_all_permissions()`, :meth:`~django.contrib.auth.models."
"User.has_perm()`, and :meth:`~django.contrib.auth.models.User."
"has_module_perms()`) to any authentication backend that implements these "
"functions."
msgstr ""
"用户模型会把权限查找函数(:meth:`~django.contrib.auth.models.User."
"get_group_permissions()`, :meth:`~django.contrib.auth.models.User."
"get_all_permissions()`, :meth:`~django.contrib.auth.models.User.has_perm()`, "
"and :meth:`~django.contrib.auth.models.User.has_module_perms()`)委托给任何实"
"现了这些函数的验证后端。"

msgid ""
"The permissions given to the user will be the superset of all permissions "
"returned by all backends. That is, Django grants a permission to a user that "
"any one backend grants."
msgstr ""
"用户所拥有的权限将是所有验证后端返回的所有权限的一个超集。也就是说，如果任何"
"后端之一将一个权限赋予了用户，那么Django最终也将该权限赋予这个用户。"

msgid ""
"If a backend raises a :class:`~django.core.exceptions.PermissionDenied` "
"exception in :meth:`~django.contrib.auth.models.User.has_perm()` or :meth:"
"`~django.contrib.auth.models.User.has_module_perms()`, the authorization "
"will immediately fail and Django won't check the backends that follow."
msgstr ""
"如果一个后端在:meth:`~django.contrib.auth.models.User.has_perm()` 或 :meth:"
"`~django.contrib.auth.models.User.has_module_perms()`方法中抛出了:class:"
"`~django.core.exceptions.PermissionDenied` 异常，则鉴权过程将立刻失败退出，并"
"且Django将不再检查随后的后端。"

msgid ""
"The simple backend above could implement permissions for the magic admin "
"fairly simply::"
msgstr "上面的简单后端可以相当容易的实现管理员权限::"

msgid ""
"This gives full permissions to the user granted access in the above example. "
"Notice that in addition to the same arguments given to the associated :class:"
"`django.contrib.auth.models.User` functions, the backend auth functions all "
"take the user object, which may be an anonymous user, as an argument."
msgstr ""
"这将给予上例中被授权访问的用户以完全权限。注意，除了与对应的类 ``django."
"contrib.auth.models.User`` 函数相同的参数之外，后端的auth函数还接收user对象作"
"为一个参数，这个user对象有可能是匿名user。"

msgid ""
"A full authorization implementation can be found in the ``ModelBackend`` "
"class in `django/contrib/auth/backends.py`_, which is the default backend "
"and queries the ``auth_permission`` table most of the time. If you wish to "
"provide custom behavior for only part of the backend API, you can take "
"advantage of Python inheritance and subclass ``ModelBackend`` instead of "
"implementing the complete API in a custom backend."
msgstr ""
"`django/contrib/auth/backend.py`_ 中的 ``ModelBackend`` 类给出了鉴权机制的全"
"部实现，这个类是默认的后端并且在大多时候都需要 ``auth_permission`` 表。若需要"
"对部分后端API的行为进行自定义，可以利用Python的继承，定义 ``ModelBackend`` 的"
"子类，而不是在自定义后端中对所有API重新实现一遍。"

msgid "Authorization for anonymous users"
msgstr "匿名用户的授权"

msgid ""
"An anonymous user is one that is not authenticated i.e. they have provided "
"no valid authentication details. However, that does not necessarily mean "
"they are not authorized to do anything. At the most basic level, most "
"websites authorize anonymous users to browse most of the site, and many "
"allow anonymous posting of comments etc."
msgstr ""
"匿名用户是指那些没有验证过的用户，也就是说，他们没有提供任何有效的验证信息。"
"然而，这并不一定意味着他们就无权做任何事。在最基本的层面上，大多数站点允许匿"
"名用户浏览大部分页面，而且很多站点也允许匿名评论。"

msgid ""
"Django's permission framework does not have a place to store permissions for "
"anonymous users. However, the user object passed to an authentication "
"backend may be an :class:`django.contrib.auth.models.AnonymousUser` object, "
"allowing the backend to specify custom authorization behavior for anonymous "
"users. This is especially useful for the authors of re-usable apps, who can "
"delegate all questions of authorization to the auth backend, rather than "
"needing settings, for example, to control anonymous access."
msgstr ""
"Django的权限框架并没有存储匿名用户的权限。然而，传给验证后端的用户对象可能是"
"一个:class:`django.contrib.auth.models.AnonymousUser`对象，使得后端可以自定义"
"对匿名用户的验证。这对于那些编写可复用应用的作者来讲格外有用，因为他们可以将"
"验证完全委托给验证后端，而不是通过设置。比如，当控制匿名访问的时候。"

msgid "Authorization for inactive users"
msgstr "未激活用户的授权"

msgid ""
"An inactive user is one that has its :attr:`~django.contrib.auth.models.User."
"is_active` field set to ``False``. The :class:`~django.contrib.auth.backends."
"ModelBackend` and :class:`~django.contrib.auth.backends.RemoteUserBackend` "
"authentication backends prohibits these users from authenticating. If a "
"custom user model doesn't have an :attr:`~django.contrib.auth.models."
"CustomUser.is_active` field, all users will be allowed to authenticate."
msgstr ""
"非活跃用户就是:attr:`~django.contrib.auth.models.User.is_active`字段设置为"
"``False``的用户。:class:`~django.contrib.auth.backends.ModelBackend` 和:"
"class:`~django.contrib.auth.backends.RemoteUserBackend`验证后台禁止这些用户进"
"行验证。如果用户有:attr:`~django.contrib.auth.models.CustomUser.is_active`字"
"段，则所有的用户都允许进行验证。"

msgid ""
"You can use :class:`~django.contrib.auth.backends.AllowAllUsersModelBackend` "
"or :class:`~django.contrib.auth.backends.AllowAllUsersRemoteUserBackend` if "
"you want to allow inactive users to authenticate."
msgstr ""
"如果你想用非活跃用户来验证，你可以使用：class: `~django.contrib.auth."
"backends.AllowAllUsersModelBackend` 和：class: `~django.contrib.auth."
"backends.AllowAllUsersRemoteUserBackend` "

msgid ""
"The support for anonymous users in the permission system allows for a "
"scenario where anonymous users have permissions to do something while "
"inactive authenticated users do not."
msgstr ""
"权限系统支持匿名用户有权执行某些操作，而经过已验证的不活动用户则不能这样做。"

msgid ""
"Do not forget to test for the ``is_active`` attribute of the user in your "
"own backend permission methods."
msgstr "在你的后端permission方法中，不要忘记测试user的``is_active``属性。"

msgid "Handling object permissions"
msgstr "处理对象权限"

msgid ""
"Django's permission framework has a foundation for object permissions, "
"though there is no implementation for it in the core. That means that "
"checking for object permissions will always return ``False`` or an empty "
"list (depending on the check performed). An authentication backend will "
"receive the keyword parameters ``obj`` and ``user_obj`` for each object "
"related authorization method and can return the object level permission as "
"appropriate."
msgstr ""
"Django的权限框架为对象权限提供了基础，尽管在内核中没有实现它。这意味着检查对"
"象权限将始终返回``False``或空列表（取决于所执行的检查）。身份验证后端将为每个"
"对象相关的授权方法接收关键字参数``obj``和``user_obj``，并可以适当地返回对象级"
"权限。"

msgid "Custom permissions"
msgstr "自定义权限"

msgid ""
"To create custom permissions for a given model object, use the "
"``permissions`` :ref:`model Meta attribute <meta-options>`."
msgstr ""
"为给定的模型对象创建自定权限，使用 `permission` ， 参考： `model Meta "
"attribute<meta-options>`"

msgid ""
"This example ``Task`` model creates two custom permissions, i.e., actions "
"users can or cannot do with ``Task`` instances, specific to your "
"application::"
msgstr ""
"这个示例中的 Task 模型创建了两个用户自定权限，即：用户能不能使用 Task 实例执"
"行操作，这取决于你的应用要求。"

msgid ""
"The only thing this does is create those extra permissions when you run :"
"djadmin:`manage.py migrate <migrate>` (the function that creates permissions "
"is connected to the :data:`~django.db.models.signals.post_migrate` signal). "
"Your code is in charge of checking the value of these permissions when a "
"user is trying to access the functionality provided by the application "
"(changing the status of tasks or closing tasks.) Continuing the above "
"example, the following checks if a user may close tasks::"
msgstr ""
"当你运行:djadmin:`manage.py migrate <migrate>` 时，它只创建那些额外的权限。"
"（创建权限的函数连接到:data:`~django.db.models.signals.post_migrate` 信"
"号）。 你的代码负责在用户试图访问由应用程序提供的功能（查看任务（task），改变"
"任务状态，关闭任务）时检查这些权限的值。继续上面的例子， 下面的语句检查是否一"
"个用户能查看任务::"

msgid "Extending the existing ``User`` model"
msgstr "扩展现有的用户（``User``）模型"

msgid ""
"There are two ways to extend the default :class:`~django.contrib.auth.models."
"User` model without substituting your own model. If the changes you need are "
"purely behavioral, and don't require any change to what is stored in the "
"database, you can create a :ref:`proxy model <proxy-models>` based on :class:"
"`~django.contrib.auth.models.User`. This allows for any of the features "
"offered by proxy models including default ordering, custom managers, or "
"custom model methods."
msgstr ""
"有两种方法可以扩展默认的User模型，而不需要用你的模型来替换它。如果你需要改变"
"的只是行为，并且不需要改变数据库存储的内容，那么你可以建立一个基于User模型的"
"代理模型。它允许代理模型提供很多功能，包括默认排序，自定义的管理器和自定义的"
"模型方法等。"

msgid ""
"If you wish to store information related to ``User``, you can use a :class:"
"`~django.db.models.OneToOneField` to a model containing the fields for "
"additional information. This one-to-one model is often called a profile "
"model, as it might store non-auth related information about a site user. For "
"example you might create an Employee model::"
msgstr ""
"如果你想存储与User模型关联的信息，可以使用OneToOneField到包含其他信息字段的模"
"型。这种one-to-one模型经常被称作Profile模型，因为它可能存储站点用户的非身份验"
"证的相关信息。比如你可以建立一个Employee模型："

msgid ""
"Assuming an existing Employee Fred Smith who has both a User and Employee "
"model, you can access the related information using Django's standard "
"related model conventions::"
msgstr ""
"假设一个既有用户又有雇员模型的现有雇员Fred Smith，您可以使用Django的标准相关"
"模型约定访问相关信息："

msgid ""
"To add a profile model's fields to the user page in the admin, define an :"
"class:`~django.contrib.admin.InlineModelAdmin` (for this example, we'll use "
"a :class:`~django.contrib.admin.StackedInline`) in your app's ``admin.py`` "
"and add it to a ``UserAdmin`` class which is registered with the :class:"
"`~django.contrib.auth.models.User` class::"
msgstr ""
"添加资料(Profile)模型到管理后台的用户页面，需要定义一个:class:`~django."
"contrib.admin.InlineModelAdmin`  (这个例子中，我们使用:class:`~django."
"contrib.admin.StackedInline` ) 到你的app里的``admin.py``中，并把它添加到"
"``UserAdmin``后，向:class:`~django.contrib.auth.models.User` 类注册:"

msgid ""
"These profile models are not special in any way - they are just Django "
"models that happen to have a one-to-one link with a user model. As such, "
"they aren't auto created when a user is created, but a :attr:`django.db."
"models.signals.post_save` could be used to create or update related models "
"as appropriate."
msgstr ""
"这些资料模型并不特殊，它们只是Django模型，用来一对一链接用户模型。因此，它们"
"并不会在一个用户创立的时候自动生成，但可以使用 :attr:`django.db.models."
"signals.post_save` 来适当地创建或者更新相关模型。"

msgid ""
"Using related models results in additional queries or joins to retrieve the "
"related data. Depending on your needs, a custom user model that includes the "
"related fields may be your better option, however, existing relations to the "
"default user model within your project's apps may justify the extra database "
"load."
msgstr ""
"使用相关模型会产生额外的查询或连接来检索相关数据。根据你的需求，一个自定义的"
"用户模型包含相关联的字段可能是更好的选择，然而，与项目应用里的默认用户模型存"
"在关联性可能会增加额外的数据库负载。"

msgid "Substituting a custom ``User`` model"
msgstr "取代了一个用户 ``User`` 模型。"

msgid ""
"Some kinds of projects may have authentication requirements for which "
"Django's built-in :class:`~django.contrib.auth.models.User` model is not "
"always appropriate. For instance, on some sites it makes more sense to use "
"an email address as your identification token instead of a username."
msgstr ""
"Django内置的 :类:`~django.contrib.auth.models.User` 模型 可能并不适合一些项目"
"的身份验证需求。例如，在一些网站上使用邮件地址代替用户名来作为你的标识令牌更"
"有意义。"

msgid ""
"Django allows you to override the default user model by providing a value "
"for the :setting:`AUTH_USER_MODEL` setting that references a custom model::"
msgstr ""
"Django 允许你为引用了自定模型的：setting: `AUTH_USER_MODEL` 设置一个值来重写"
"默认的用户表。"

msgid ""
"This dotted pair describes the name of the Django app (which must be in "
"your :setting:`INSTALLED_APPS`), and the name of the Django model that you "
"wish to use as your user model."
msgstr ""
"这个引号中描述的是Django应用的名称 ( 必须在你的配置`INSTALLED_APPS`里 )，和你"
"希望当做用户模型的Django模型名称。"

msgid "Using a custom user model when starting a project"
msgstr "启动一个项目的时候使用一个自定的用户模型"

msgid ""
"If you're starting a new project, it's highly recommended to set up a custom "
"user model, even if the default :class:`~django.contrib.auth.models.User` "
"model is sufficient for you. This model behaves identically to the default "
"user model, but you'll be able to customize it in the future if the need "
"arises::"
msgstr ""
"如果你准备启动一个新的项目，强烈推荐你设置一个自定义的用户模型，即使默认的用"
"户模型对你来说已经足够了。这个模型的行为与默认用户模型相通，但是你能在未来需"
"要的时候自定义它："

msgid ""
"Don't forget to point :setting:`AUTH_USER_MODEL` to it. Do this before "
"creating any migrations or running ``manage.py migrate`` for the first time."
msgstr ""
"不要忘记将 :setting:`AUTH_USER_MODEL` 指向它。在创建任何迁移或者首次运行 "
"``manage.py migrate`` 之前执行这个操作。"

msgid "Also, register the model in the app's ``admin.py``::"
msgstr "同样的，在 app 中的 ``admin.py`` 中注册模型。"

msgid "Changing to a custom user model mid-project"
msgstr "在项目中更改为自定义用户模型。"

msgid ""
"Changing :setting:`AUTH_USER_MODEL` after you've created database tables is "
"significantly more difficult since it affects foreign keys and many-to-many "
"relationships, for example."
msgstr ""
"在你已经建立数据库表之后再去修改 :setting:`AUTH_USER_MODEL` 要困难的多，因为"
"它会影响外键和多对多关系。"

msgid ""
"This change can't be done automatically and requires manually fixing your "
"schema, moving your data from the old user table, and possibly manually "
"reapplying some migrations. See :ticket:`25313` for an outline of the steps."
msgstr ""
"这个改动并不能自动完成，需要手动修复你的架构，将数据从旧的用户表移出，并有可"
"能需要手动执行一些迁移操作。查看步骤概述，请查看  :ticket:`25313` 。"

msgid ""
"Due to limitations of Django's dynamic dependency feature for swappable "
"models, the model referenced by :setting:`AUTH_USER_MODEL` must be created "
"in the first migration of its app (usually called ``0001_initial``); "
"otherwise, you'll have dependency issues."
msgstr ""
"由于Django针对可交换模型的动态依赖特性的限制，被 :setting:`AUTH_USER_MODEL` "
"引用的模型必须在第一次迁移的时候创建（通常被称作``0001_initial``）；否则，你"
"将会遇到依赖问题。"

msgid ""
"In addition, you may run into a ``CircularDependencyError`` when running "
"your migrations as Django won't be able to automatically break the "
"dependency loop due to the dynamic dependency. If you see this error, you "
"should break the loop by moving the models depended on by your user model "
"into a second migration. (You can try making two normal models that have a "
"``ForeignKey`` to each other and seeing how ``makemigrations`` resolves that "
"circular dependency if you want to see how it's usually done.)"
msgstr ""
"此外，在运行迁移时可能会遇到 ``CircularDependencyError`` ，因为Django由于动态"
"依赖性而无法自动中断依赖循环。如果你遇到这个错误，则应通过移除依赖用户模型的"
"其他模型，并进行二次迁移。（如果你想了解它通常是如何运行的，可以尝试建立两个"
"相互指向彼此的外键的普通模型，并查看 ``makemigrations`` 如何解决该循环依赖关"
"系。）"

msgid "Reusable apps and ``AUTH_USER_MODEL``"
msgstr "应用复用和 ``AUTH_USER_MODEL``"

msgid ""
"Reusable apps shouldn't implement a custom user model. A project may use "
"many apps, and two reusable apps that implemented a custom user model "
"couldn't be used together. If you need to store per user information in your "
"app, use a :class:`~django.db.models.ForeignKey` or :class:`~django.db."
"models.OneToOneField` to ``settings.AUTH_USER_MODEL`` as described below."
msgstr ""
"可复用的app不能实现实现一个自定义模型。一个项目可能有很多app，如果有两个可复"
"用的app实现了自定义用户模型，他们就不能同时使用。如果你需要在你的app里保存每"
"一个用户信息，可以像下面这样使用 :class:`~django.db.models.ForeignKey` 或者 :"
"class:`~django.db.models.OneToOneField` 指向 ``settings.AUTH_USER_MODEL``  。"

msgid "Referencing the ``User`` model"
msgstr "引用 ``User`` 模型"

msgid ""
"If you reference :class:`~django.contrib.auth.models.User` directly (for "
"example, by referring to it in a foreign key), your code will not work in "
"projects where the :setting:`AUTH_USER_MODEL` setting has been changed to a "
"different user model."
msgstr ""
"当你的 :setting:`AUTH_USER_MODEL` 已经指向了另一个用户模型后，如果你直接指"
"向 :class:`~django.contrib.auth.models.User` （例如，使用外键指向它），代码将"
"不能起作用。"

msgid ""
"Instead of referring to :class:`~django.contrib.auth.models.User` directly, "
"you should reference the user model using ``django.contrib.auth."
"get_user_model()``. This method will return the currently active user model "
"-- the custom user model if one is specified, or :class:`~django.contrib."
"auth.models.User` otherwise."
msgstr ""
"你应该通过 ``django.contrib.auth.get_user_model()`` 来引用用户模型，而不是直"
"接引用 :class:`~django.contrib.auth.models.User` 。这个方法将返回当前可用的用"
"户模型——如果指定了自定义用户模型，则返回自定义的模型，否则返回 :class:"
"`~django.contrib.auth.models.User` 。"

msgid ""
"When you define a foreign key or many-to-many relations to the user model, "
"you should specify the custom model using the :setting:`AUTH_USER_MODEL` "
"setting. For example::"
msgstr ""
"当你定义一个外键或多对多关系指向用户模型时，你应该指定自定义模型使用 :"
"setting:`AUTH_USER_MODEL` setting 。举例来说："

msgid ""
"When connecting to signals sent by the user model, you should specify the "
"custom model using the :setting:`AUTH_USER_MODEL` setting. For example::"
msgstr ""
"当连接到用户模型发送的信号时，你应该使用 :setting:`AUTH_USER_MODEL` 设置指定"
"自定义模型，例如："

msgid ""
"Generally speaking, it's easiest to refer to the user model with the :"
"setting:`AUTH_USER_MODEL` setting in code that's executed at import time, "
"however, it's also possible to call ``get_user_model()`` while Django is "
"importing models, so you could use ``models."
"ForeignKey(get_user_model(), ...)``."
msgstr ""
"一般来说，最简单的指向用户模型的方法是在导入的时候设置 :setting:"
"`AUTH_USER_MODEL` ，但是也可以调用 ``get_user_model()`` ，因此你可以使用 "
"``models.ForeignKey(get_user_model(), ...)`` 。"

msgid ""
"If your app is tested with multiple user models, using "
"``@override_settings(AUTH_USER_MODEL=...)`` for example, and you cache the "
"result of ``get_user_model()`` in a module-level variable, you may need to "
"listen to the  :data:`~django.test.signals.setting_changed` signal to clear "
"the cache. For example::"
msgstr ""
"如果你的app使用多个用户模型进行测试，例如使用 "
"``@override_settings(AUTH_USER_MODEL=...)`` ，并将get_user_model()的结果缓存"
"在模块级变量中，则可能需要监听 :data:`~django.test.signals.setting_changed` "
"信号以清除缓存。举例："

msgid "Specifying a custom user model"
msgstr "指定自定义用户模型"

msgid "Model design considerations"
msgstr "Model 设计注意事项"

msgid ""
"Think carefully before handling information not directly related to "
"authentication in your custom user model."
msgstr "在处理与您的自定义用户模型中不直接与身份验证相关的信息之前要仔细考虑。"

msgid ""
"It may be better to store app-specific user information in a model that has "
"a relation with the user model. That allows each app to specify its own user "
"data requirements without risking conflicts with other apps. On the other "
"hand, queries to retrieve this related information will involve a database "
"join, which may have an effect on performance."
msgstr ""
"在与用户模型有关系的模型中存储特定于应用程序的用户信息可能更好。这允许每个应"
"用程序指定自己的用户数据需求，而不冒与其他应用程序发生冲突的风险。另一方面，"
"检索此相关信息的查询将涉及数据库连接，这可能对性能产生影响。"

msgid ""
"Django expects your custom user model to meet some minimum requirements."
msgstr "Django 希望你自定义的用户模型能够满足一些最低需求。"

msgid ""
"If you use the default authentication backend, then your model must have a "
"single unique field that can be used for identification purposes. This can "
"be a username, an email address, or any other unique attribute. A non-unique "
"username field is allowed if you use a custom authentication backend that "
"can support it."
msgstr ""
"如果使用默认身份验证后端，那么您的模型必须具有用于标识目的的唯一字段。这可以"
"是用户名、电子邮件地址或任何其他唯一属性。如果使用可以支持它的自定义身份验证"
"后端，则允许使用非唯一用户名字段。"

msgid ""
"The easiest way to construct a compliant custom user model is to inherit "
"from :class:`~django.contrib.auth.models.AbstractBaseUser`. :class:`~django."
"contrib.auth.models.AbstractBaseUser` provides the core implementation of a "
"user model, including hashed passwords and tokenized password resets. You "
"must then provide some key implementation details:"
msgstr ""
"构造一个兼容的自定义用户模型的最简单方法是继承:class:`~django.contrib.auth."
"models.AbstractBaseUser`。:class:`~django.contrib.auth.models."
"AbstractBaseUser`提供用户模型的核心实现，包括散列密码和标记化的密码重置。然后"
"必须提供一些关键实现细节："

msgid ""
"A string describing the name of the field on the user model that is used as "
"the unique identifier. This will usually be a username of some kind, but it "
"can also be an email address, or any other unique identifier. The field "
"*must* be unique (i.e., have ``unique=True`` set in its definition), unless "
"you use a custom authentication backend that can support non-unique "
"usernames."
msgstr ""
"作为唯一标识符的描述用户模型字段名的字符串，通常是一个用户名，但也可以是一个"
"电子邮件地址，或任何其他唯一标识符。该字段*必须*是唯一的（即定义了 "
"``unique=True`` ），除非你使用自定义身份验证后端，可以支持非唯一的用户名。"

msgid ""
"In the following example, the field ``identifier`` is used as the "
"identifying field::"
msgstr "接下来的样例中，``identifier`` 字段将被用作识别字段。"

msgid ""
"A string describing the name of the email field on the ``User`` model. This "
"value is returned by :meth:`~models.AbstractBaseUser.get_email_field_name`."
msgstr ""
"用来描述用户模型中的邮件字段，该值通过 :meth:`~models.AbstractBaseUser."
"get_email_field_name` 返回。"

msgid ""
"A list of the field names that will be prompted for when creating a user via "
"the :djadmin:`createsuperuser` management command. The user will be prompted "
"to supply a value for each of these fields. It must include any field for "
"which :attr:`~django.db.models.Field.blank` is ``False`` or undefined and "
"may include additional fields you want prompted for when a user is created "
"interactively. ``REQUIRED_FIELDS`` has no effect in other parts of Django, "
"like creating a user in the admin."
msgstr ""
"当通过命令行 :djadmin:`createsuperuser` 来创建用户时提示的必填字段列表。这个"
"列表里的字段必须是非空或者未定义字段，也可以包含一些你想在创建用户时进行提示"
"的附加字段。 ``REQUIRED_FIELDS`` 对Django的其他部分无效，比如在admin页面中创"
"建用户。"

msgid ""
"For example, here is the partial definition for a user model that defines "
"two required fields - a date of birth and height::"
msgstr "比如说，这里是一个局部的用户模型，定义了两个必须的字段——生日和身高。"

msgid ""
"``REQUIRED_FIELDS`` must contain all required fields on your user model, but "
"should *not* contain the ``USERNAME_FIELD`` or ``password`` as these fields "
"will always be prompted for."
msgstr ""
"``REQUIRED_FIELDS`` 必须包含你的用户模型中所有的必填字段，但不用包含"
"``USERNAME_FIELD`` 或 ``password`` ，因为这些字段一直都会被提示。"

msgid ""
"A boolean attribute that indicates whether the user is considered \"active"
"\".  This attribute is provided as an attribute on ``AbstractBaseUser`` "
"defaulting to ``True``. How you choose to implement it will depend on the "
"details of your chosen auth backends. See the documentation of the :attr:"
"`is_active attribute on the built-in user model <django.contrib.auth.models."
"User.is_active>` for details."
msgstr ""
"一个布尔属性，指明用户是否被“激活”。这个属性作为 ``AbstractBaseUser`` 的属性"
"提供，默认是 ``True`` 。如何去实现该属性的功能取决于你所选择的认证后端。查"
"看 :attr:`is_active attribute on the built-in user model <django.contrib."
"auth.models.User.is_active>`  了解详情。"

msgid ""
"Optional. A longer formal identifier for the user such as their full name. "
"If implemented, this appears alongside the username in an object's history "
"in :mod:`django.contrib.admin`."
msgstr ""
"可选项。用户的较长身份标识符，比如用户的全名。如果已经设置，则会与用户名一起"
"出现在 :mod:`django.contrib.admin` 中。"

msgid ""
"Optional. A short, informal identifier for the user such as their first "
"name. If implemented, this replaces the username in the greeting to the user "
"in the header of :mod:`django.contrib.admin`."
msgstr ""
"可选项。用户较短的身份标识符，比如用户的名。如果已经设置，它会在 :mod:"
"`django.contrib.admin` 页面头部的欢迎词中替换用户名。"

msgid ""
"In older versions, subclasses are required to implement ``get_short_name()`` "
"and ``get_full_name()`` as ``AbstractBaseUser`` has implementations that "
"raise ``NotImplementedError``."
msgstr ""
"在旧版本中，当``AbstractBaseUser`` 实现了 ``get_short_name()`` 和 "
"``get_full_name()`` ，则子类也必须实现，否则会抛 ``NotImplementedError`` 异"
"常。"

msgid "Importing ``AbstractBaseUser``"
msgstr "引入 ``AbstractBaseUser``"

msgid ""
"``AbstractBaseUser`` and ``BaseUserManager`` are importable from ``django."
"contrib.auth.base_user`` so that they can be imported without including "
"``django.contrib.auth`` in :setting:`INSTALLED_APPS`."
msgstr ""
"``AbstractBaseUser`` and ``BaseUserManager`` 可以从 ``django.contrib.auth."
"base_user`` 中导入，所以你无需在 :setting:`INSTALLED_APPS` 添加 ``django."
"contrib.auth`` 就能导入它们。"

msgid ""
"The following attributes and methods are available on any subclass of :class:"
"`~django.contrib.auth.models.AbstractBaseUser`:"
msgstr ""
":class:`~django.contrib.auth.models.AbstractBaseUser` 的任何子类都可以使用下"
"面的属性和方法："

msgid "Returns the value of the field nominated by ``USERNAME_FIELD``."
msgstr "返回 ``USERNAME_FIELD`` 指定的字段的值。"

msgid ""
"Normalizes the username by calling :meth:`normalize_username`. If you "
"override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
"通过调用 :meth:`normalize_username` 来规范化用户名。 如果重写此方法，必须调"
"用 ``super()`` 来保持规范化。"

msgid ""
"Returns the name of the email field specified by the :attr:`~models."
"CustomUser.EMAIL_FIELD` attribute. Defaults to ``'email'`` if "
"``EMAIL_FIELD`` isn't specified."
msgstr ""
"返回由 :attr:`~models.CustomUser.EMAIL_FIELD` 属性指定的电子邮件字段的名称。 "
"如果未指定 ``EMAIL_FIELD`` ，则默认为 ``'email'`` 。"

msgid ""
"Applies NFKC Unicode normalization to usernames so that visually identical "
"characters with different Unicode code points are considered identical."
msgstr ""
"应用NFKC Unicode 规范化用户名，使得不同Unicode码位视觉相同字符视为相同。"

msgid ""
"Read-only attribute which is always ``True`` (as opposed to ``AnonymousUser."
"is_authenticated`` which is always ``False``). This is a way to tell if the "
"user has been authenticated. This does not imply any permissions and doesn't "
"check if the user is active or has a valid session. Even though normally you "
"will check this attribute on ``request.user`` to find out whether it has "
"been populated by the :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` (representing the currently logged-in user), you "
"should know this attribute is ``True`` for any :class:`~models.User` "
"instance."
msgstr ""
"只读属性，始终返回 ``True`` （匿名用户 ``AnonymousUser.is_authenticated``  始"
"终返回 ``False`` ）。这是一种判断用户是否已通过身份验证的方法。这并不意味着任"
"何权限，也不会检查用户是否处于活动状态或是否具有有效会话。即使通常您会根据 "
"``request.user`` 检查这个属性，以确定它是否被 :class:`~django.contrib.auth."
"middleware.AuthenticationMiddleware` 填充（表示当前登录的用户），但是你应该知"
"道该属性对于任何 :class:`~models.User` 实例都返回True。"

msgid ""
"Read-only attribute which is always ``False``. This is a way of "
"differentiating :class:`~models.User` and :class:`~models.AnonymousUser` "
"objects. Generally, you should prefer using :attr:`~models.User."
"is_authenticated` to this attribute."
msgstr ""
"只读属性总是'False'。这个属性用于区分类:model.User和model.AnonymousUser对象。"
"通常情况下，属性:'model.User.is_authenticated'应该置于只读。"

msgid ""
"Sets the user's password to the given raw string, taking care of the "
"password hashing. Doesn't save the :class:`~django.contrib.auth.models."
"AbstractBaseUser` object."
msgstr ""
"设置用户密码，谨慎保存密码哈希。不可保存类'django.conrtib.auth.models."
"AbstractBaseUser’的对象。"

msgid ""
"When the raw_password is ``None``, the password will be set to an unusable "
"password, as if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` were used."
msgstr ""
"如果密码为空，密码应设置为不可用密码。例如可以使用方法:django.contrib.auth."
"mode.Is.AbstractBaseUser.set_unusable_password()。"

msgid ""
"Returns ``True`` if the given raw string is the correct password for the "
"user. (This takes care of the password hashing in making the comparison.)"
msgstr "如果密码正确则返回'True'。(密码哈希值用于比较)"

msgid ""
"Marks the user as having no password set.  This isn't the same as having a "
"blank string for a password. :meth:`~django.contrib.auth.models."
"AbstractBaseUser.check_password()` for this user will never return ``True``. "
"Doesn't save the :class:`~django.contrib.auth.models.AbstractBaseUser` "
"object."
msgstr ""
"将用户标记为没有设置密码。 这与密码使用空白字符串不同。 :meth:`~django."
"contrib.auth.models.AbstractBaseUser.check_password()` 此用户将永远不会返回"
"True。 不保存 :class:`~django.contrib.auth.models.AbstractBaseUser`  对象。"

msgid ""
"You may need this if authentication for your application takes place against "
"an existing external source such as an LDAP directory."
msgstr ""
"如果针对现有外部源（例如LDAP目录）进行应用程序的身份验证，则可能需要这样做。"

msgid ""
"Returns ``False`` if :meth:`~django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()` has been called for this user."
msgstr ""
"如果方法'django.contrib.auth.models.AbstractBaseUser."
"set_unusable_password()'被调用则返回'False'。"

msgid ""
"Returns an HMAC of the password field. Used for :ref:`session-invalidation-"
"on-password-change`."
msgstr "返回密码字段的HMAC。用于密码更改后会话失效。"

msgid ""
":class:`~models.AbstractUser` subclasses :class:`~models.AbstractBaseUser`:"
msgstr "类:'models.AbstractUser是类:‘models.AbstractBaseUser’的子类。"

msgid ""
"Normalizes the email by calling :meth:`.BaseUserManager.normalize_email`. If "
"you override this method, be sure to call ``super()`` to retain the "
"normalization."
msgstr ""
"调用方法:‘BaseUserManger.normalize_email’来标准化邮件。如果你要重写这个方法，"
"确保调用super()以保持标准化。"

msgid "Writing a manager for a custom user model"
msgstr "为自定义的用户模型编写一个管理器"

msgid ""
"You should also define a custom manager for your user model. If your user "
"model defines ``username``, ``email``, ``is_staff``, ``is_active``, "
"``is_superuser``, ``last_login``, and ``date_joined`` fields the same as "
"Django's default user, you can just install Django's :class:`~django.contrib."
"auth.models.UserManager`; however, if your user model defines different "
"fields, you'll need to define a custom manager that extends :class:`~django."
"contrib.auth.models.BaseUserManager` providing two additional methods:"
msgstr ""
"你应该为你的用户模型定义一个自定义管理器。如果你的用户模型定义了`username``, "
"``email``, ``is_staff``, ``is_active``, ``is_superuser``, ``last_login``, "
"and ``date_joined`等变量域，这些变量Django均内置了。你只需要安装类:'django."
"contrib.auth,models.UserManager'；但是，如果你的用户模型还定义了其他的变量，"
"那么你就需要扩展类:django.contrib.auth.models.BaseUserManager'，这个类提供了"
"额外的两个方法。"

msgid ""
"The prototype of ``create_user()`` should accept the username field, plus "
"all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_user`` should be defined as::"
msgstr ""
"``create_user()`` 的原型应该接受username字段，加上其他所有必须的字段作为参"
"数。举例，如果你的用户模型使用 ``email`` 作为用户名字段，``date_of_birth``  "
"字段作为必填字段，那么 ``create_user`` 应该如下定义："

msgid ""
"The prototype of ``create_superuser()`` should accept the username field, "
"plus all required fields as arguments. For example, if your user model uses "
"``email`` as the username field, and has ``date_of_birth`` as a required "
"field, then ``create_superuser`` should be defined as::"
msgstr ""
"``create_superuser()`` 的原型应该接受username字段，加上其他所有必须的字段作为"
"参数。举例，如果你的用户模型使用 ``email`` 作为用户名字段，``date_of_birth`` "
"字段作为必填字段，那么 ``create_superuser`` 应该如下定义："

msgid ""
"Unlike ``create_user()``, ``create_superuser()`` *must* require the caller "
"to provide a password."
msgstr ""
"和 ``create_user()`` 不同的是，``create_superuser()`` 要求调用者 *必须* 提供"
"一个密码。"

msgid ""
"For a :class:`~.ForeignKey` in :attr:`.USERNAME_FIELD` or :attr:`."
"REQUIRED_FIELDS`, these methods receive the value of the :attr:`~.ForeignKey."
"to_field` (the :attr:`~django.db.models.Field.primary_key` by default) of an "
"existing instance."
msgstr ""
"对于 :attr:`.USERNAME_FIELD` 或 :attr:`.REQUIRED_FIELDS` 中的 :class:`~."
"ForeignKey` ，这些方法接收现有实例的:attr:`~.ForeignKey.to_field`（默认为 :"
"attr:`~django.db.models.Field.primary_key` ）的值。"

msgid ""
":class:`~django.contrib.auth.models.BaseUserManager` provides the following "
"utility methods:"
msgstr ""
":class:`~django.contrib.auth.models.BaseUserManager` 提供以下实用方法："

msgid ""
"Normalizes email addresses by lowercasing the domain portion of the email "
"address."
msgstr "通过降低电子邮件地址的域部分来规范化电子邮件地址。"

msgid ""
"Retrieves a user instance using the contents of the field nominated by "
"``USERNAME_FIELD``."
msgstr "使用 ``USERNAME_FIELD`` 指定的字段的内容检索用户实例。"

msgid ""
"Returns a random password with the given length and given string of allowed "
"characters. Note that the default value of ``allowed_chars`` doesn't contain "
"letters that can cause user confusion, including:"
msgstr ""
"返回具有给定长度和给定字符串的随机密码。请注意， ``allowed_chars``  的默认值"
"不包含可能导致用户混淆的字母，包括："

msgid ""
"``i``, ``l``, ``I``, and ``1`` (lowercase letter i, lowercase letter L, "
"uppercase letter i, and the number one)"
msgstr "``i``, ``l``, ``I``, 和 ``1`` (小写i, 小写L, 大写i和数字1)"

msgid ""
"``o``, ``O``, and ``0`` (lowercase letter o, uppercase letter o, and zero)"
msgstr "``o``, ``O``, 和 ``0`` (小写 o, 大写 o, 和数字0 )"

msgid "Extending Django's default ``User``"
msgstr "扩展Django的默认用户模型"

msgid ""
"If you're entirely happy with Django's :class:`~django.contrib.auth.models."
"User` model and you just want to add some additional profile information, "
"you could simply subclass :class:`django.contrib.auth.models.AbstractUser` "
"and add your custom profile fields, although we'd recommend a separate model "
"as described in the \"Model design considerations\" note of :ref:`specifying-"
"custom-user-model`. ``AbstractUser`` provides the full implementation of the "
"default :class:`~django.contrib.auth.models.User` as an :ref:`abstract model "
"<abstract-base-classes>`."
msgstr ""
"如果你对Django自带的用户模型完全满意，而你只想添加一些其他信息，你可以简单地"
"继承 :class:`django.contrib.auth.models.AbstractUser`  并添加你的自定义字段，"
"尽管我们建议使用在“模型设计考虑因素”中描述 :ref:`specifying-custom-user-"
"model` 那样的单独的模型。  ``AbstractUser`` 提供默认 :class:`~django.contrib."
"auth.models.User` 的完整实现作为 :ref:`abstract model ` 。"

msgid "Custom users and the built-in auth forms"
msgstr "自定义用户和内建的auth表单"

msgid ""
"Django's built-in :ref:`forms <built-in-auth-forms>` and :ref:`views <built-"
"in-auth-views>` make certain assumptions about the user model that they are "
"working with."
msgstr ""
"Django的内置 :ref:`forms ` 和 :ref:`views ` 对他们正在使用的用户模型做了一些"
"假设。"

msgid ""
"The following forms are compatible with any subclass of :class:`~django."
"contrib.auth.models.AbstractBaseUser`:"
msgstr ""
"以下表单与 :class:`~django.contrib.auth.models.AbstractBaseUser` 的任何子类兼"
"容："

msgid ""
":class:`~django.contrib.auth.forms.AuthenticationForm`: Uses the username "
"field specified by :attr:`~models.CustomUser.USERNAME_FIELD`."
msgstr ""
":class:`~django.contrib.auth.forms.AuthenticationForm`:  使用 :attr:`~models."
"CustomUser.USERNAME_FIELD` 指定的username字段。"

msgid ":class:`~django.contrib.auth.forms.SetPasswordForm`"
msgstr ":class:`~django.contrib.auth.forms.SetPasswordForm`"

msgid ":class:`~django.contrib.auth.forms.PasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.PasswordChangeForm`"

msgid ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.AdminPasswordChangeForm`"

msgid ""
"The following forms make assumptions about the user model and can be used as-"
"is if those assumptions are met:"
msgstr "以下表单对用户模型进行了假设，如果满足这些假设，则可以按原样使用:"

msgid ""
":class:`~django.contrib.auth.forms.PasswordResetForm`: Assumes that the user "
"model has a field that stores the user's email address with the name "
"returned by :meth:`~models.AbstractBaseUser.get_email_field_name` (``email`` "
"by default) that can be used to identify the user and a boolean field named "
"``is_active`` to prevent password resets for inactive users."
msgstr ""
":class:`~django.contrib.auth.forms.PasswordResetForm` ：假设用户模型有一个字"
"段存储用户的电子邮件地址，其名称由 :meth:`~models.AbstractBaseUser."
"get_email_field_name` 返回（默认为电子邮件），这个方法用来标识用户，以及名为"
"``is_active``的布尔字段，防止非活动用户重置密码。"

msgid ""
"Finally, the following forms are tied to :class:`~django.contrib.auth.models."
"User` and need to be rewritten or extended to work with a custom user model:"
msgstr ""
"最后，下面的表单和 :class:`~django.contrib.auth.models.User` 绑定，如果需要和"
"自定义的用户模型一起使用，则需要重写或者扩展。"

msgid ":class:`~django.contrib.auth.forms.UserCreationForm`"
msgstr ":class:`~django.contrib.auth.forms.UserCreationForm`"

msgid ":class:`~django.contrib.auth.forms.UserChangeForm`"
msgstr ":class:`~django.contrib.auth.forms.UserChangeForm`"

msgid ""
"If your custom user model is a simple subclass of ``AbstractUser``, then you "
"can extend these forms in this manner::"
msgstr ""
"如果自定义的用户模型是 ``AbstractUser`` 的子类，则可以使用下面的方式来扩展表"
"单："

msgid "Custom users and :mod:`django.contrib.admin`"
msgstr "自定义用户和 :mod:`django.contrib.admin`"

msgid ""
"If you want your custom user model to also work with the admin, your user "
"model must define some additional attributes and methods. These methods "
"allow the admin to control access of the user to admin content:"
msgstr ""
"如果你希望自定义的用户模型也与管理后台一起使用，那么你的用户模型必须定义一些"
"额外的属性和方法。这些方法允许管理员控制用户对管理后台内容的访问："

msgid ""
"Returns ``True`` if the user is allowed to have access to the admin site."
msgstr "如果允许用户有访问 admin 页面就返回 ``True``。"

msgid "Returns ``True`` if the user account is currently active."
msgstr "返回``True``，如果该用户的账号当前是激活状态"

msgid ""
"Returns ``True`` if the user has the named permission. If ``obj`` is "
"provided, the permission needs to be checked against a specific object "
"instance."
msgstr ""
"如果用户有指定的权限，则返回 ``True`` 。如果提供了参数 ``obj``  ，则需要对指"
"定的对象实例进行权限检查。"

msgid ""
"Returns ``True`` if the user has permission to access models in the given "
"app."
msgstr "如果用户有权限访问指定 app 里的模型，那么返回 ``True`` 。"

msgid ""
"You will also need to register your custom user model with the admin. If "
"your custom user model extends ``django.contrib.auth.models.AbstractUser``, "
"you can use Django's existing ``django.contrib.auth.admin.UserAdmin`` class. "
"However, if your user model extends :class:`~django.contrib.auth.models."
"AbstractBaseUser`, you'll need to define a custom ``ModelAdmin`` class. It "
"may be possible to subclass the default ``django.contrib.auth.admin."
"UserAdmin``; however, you'll need to override any of the definitions that "
"refer to fields on ``django.contrib.auth.models.AbstractUser`` that aren't "
"on your custom user class."
msgstr ""
"你也需要在 admin 文件里注册自定义的用户模型。如果自定义的用户模型扩展了  "
"``django.contrib.auth.models.AbstractUser`` ，你可以直接使用Django已有的类 "
"``django.contrib.auth.admin.UserAdmin`` 。如果你的用户模型扩展了 :class:"
"`~django.contrib.auth.models.AbstractBaseUser` ，你将需要定义一个自定义的类 "
"``ModelAdmin`` 。不管怎样，你都将需要重写任何引用 ``django.contrib.auth."
"models.AbstractUser`` 上的字段的定义，这些字段不在你自定义的用户类中。"

msgid "Custom users and permissions"
msgstr "自定义用户和权限。"

msgid ""
"To make it easy to include Django's permission framework into your own user "
"class, Django provides :class:`~django.contrib.auth.models."
"PermissionsMixin`. This is an abstract model you can include in the class "
"hierarchy for your user model, giving you all the methods and database "
"fields necessary to support Django's permission model."
msgstr ""
"为了便于将Django的权限框架引入到你自己的用户类中，Django提供了 :class:"
"`~django.contrib.auth.models.PermissionsMixin` 。这是一个抽象模型，可以包含在"
"用户模型的类层次结构中，为你提供支持Django权限模型所需的所有方法和数据库字"
"段。"

msgid ""
":class:`~django.contrib.auth.models.PermissionsMixin` provides the following "
"methods and attributes:"
msgstr ""
":class:`~django.contrib.auth.models.PermissionsMixin` 提供下列方法和属性："

msgid ""
"Boolean. Designates that this user has all permissions without explicitly "
"assigning them."
msgstr "布尔值。指定该用户拥有所有权限，而不用一个个开启权限。"

msgid ""
"Returns a set of permission strings that the user has, through their groups."
msgstr "返回用户拥有权限的字符串集合，从用户所属组的权限中获取。"

msgid ""
"If ``obj`` is passed in, only returns the group permissions for this "
"specific object."
msgstr "如果传入 ``obj`` 参数，则只返回指定对象所属组的权限。"

msgid ""
"Returns a set of permission strings that the user has, both through group "
"and user permissions."
msgstr ""
"返回用户拥有权限的字符串集合，同时从用户所属组及用户本身的权限中获取。 "

msgid ""
"If ``obj`` is passed in, only returns the permissions for this specific "
"object."
msgstr "如果传入 ``obj``参数，则只返回指定对象和所属组的权限。"

msgid ""
"Returns ``True`` if the user has the specified permission, where ``perm`` is "
"in the format ``\"<app label>.<permission codename>\"`` (see :ref:"
"`permissions <topic-authorization>`). If :attr:`.User.is_active` and :attr:"
"`~.User.is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""
"如果用户具有指定的权限，则返回 ``True`` ，其中 ``perm`` 的格式为 ``\"<app "
"label>.<permission codename>\"`` (see :ref:`permissions <topic-"
"authorization>`)。如果 :attr:`.User.is_active` 和 :attr:`~.User."
"is_superuser` 都为 ``True``，则这个方法一直返回 ``True`` 。"

msgid ""
"If ``obj`` is passed in, this method won't check for a permission for the "
"model, but for this specific object."
msgstr ""
"如果传入 ``obj`` 参数，则这个方法不会检查该模型权限，而只会检查这个出传入对象"
"的权限。"

msgid ""
"Returns ``True`` if the user has each of the specified permissions, where "
"each perm is in the format ``\"<app label>.<permission codename>\"``. If :"
"attr:`.User.is_active` and :attr:`~.User.is_superuser` are both ``True``, "
"this method always returns ``True``."
msgstr ""
"如果用户具有指定权限列表里的每个权限，则返回 ``True`` ，其中perm的格式为 ``"
"\"<app label>.<permission codename>\"`` 。如果 :attr:`.User.is_active` 和 :"
"attr:`~.User.is_superuser` 都返回 ``True`` ，则这个方法一直返回 ``True`` 。"

msgid ""
"If ``obj`` is passed in, this method won't check for permissions for the "
"model, but for the specific object."
msgstr ""
"如果传入参数  ``obj``  ，则这个方法不会检查指定的权限列表，只检查指定对象的权"
"限。"

msgid ""
"Returns ``True`` if the user has any permissions in the given package (the "
"Django app label). If :attr:`.User.is_active` and :attr:`~.User."
"is_superuser` are both ``True``, this method always returns ``True``."
msgstr ""
"如果用户拥有所给的 Django app 标签 (the Django app label) 里的任何权限，则会"
"返回 ``True`` 。如果 :attr:`.User.is_active` 和 :attr:`~.User.is_superuser` "
"都为 ``True`` ，则该方法一直返回 ``True`` 。"

msgid "``PermissionsMixin`` and ``ModelBackend``"
msgstr "``PermissionsMixin``  和  ``ModelBackend``"

msgid ""
"If you don't include the :class:`~django.contrib.auth.models."
"PermissionsMixin`, you must ensure you don't invoke the permissions methods "
"on ``ModelBackend``. ``ModelBackend`` assumes that certain fields are "
"available on your user model. If your user model doesn't provide  those "
"fields, you'll receive database errors when you check permissions."
msgstr ""
"如果你没有引入 :class:`~django.contrib.auth.models.PermissionsMixin` ，必须确"
"保没有调用 ``ModelBackend`` 的权限方法。``ModelBackend`` 假定你的用户模型某些"
"字段可用。如果你的用户模型没有提供这些字段，则当你检查权限的时候，会收到数据"
"库错误提示。"

msgid "Custom users and proxy models"
msgstr "自定义用户和代理模型"

msgid ""
"One limitation of custom user models is that installing a custom user model "
"will break any proxy model extending :class:`~django.contrib.auth.models."
"User`. Proxy models must be based on a concrete base class; by defining a "
"custom user model, you remove the ability of Django to reliably identify the "
"base class."
msgstr ""
"自定义用户模型的一个限制是安装自定义用户模型将破坏任何扩展  :class:`~django."
"contrib.auth.models.User` 的代理模型。代理模型必须基于具体的基类；通过定义自"
"定义用户模型，你就移除了Django可靠地识别基类的功能。"

msgid ""
"If your project uses proxy models, you must either modify the proxy to "
"extend the user model that's in use in your project, or merge your proxy's "
"behavior into your :class:`~django.contrib.auth.models.User` subclass."
msgstr ""
"如果你的项目正在使用代理模型，你必须修改扩展用户模型的代理，或者把代理的行为"
"都合并到 :class:`~django.contrib.auth.models.User` 子类里去。"

msgid "A full example"
msgstr "一个完整的例子"

msgid ""
"Here is an example of an admin-compliant custom user app. This user model "
"uses an email address as the username, and has a required date of birth; it "
"provides no permission checking, beyond a simple ``admin`` flag on the user "
"account. This model would be compatible with all the built-in auth forms and "
"views, except for the user creation forms. This example illustrates how most "
"of the components work together, but is not intended to be copied directly "
"into projects for production use."
msgstr ""
"这里是一个兼容admin的自定义的用户app的例子。这个用户模型使用 email 地址作为"
"username，并且生日是必填字段；它本身不提供权限检查，只使用一个简单的 "
"``admin``  flag 来对用户账户进行权限检查。除了用户创建的表单外，此模型和所有"
"内置的身份验证表单和视图兼容。此例只是说明了大多数组件如何协同工作，不要直接"
"复制到生产环境里。"

msgid ""
"This code would all live in a ``models.py`` file for a custom authentication "
"app::"
msgstr "这段代码将一直存在于 ``models.py`` 文件中，用于自定义身份验证 app::"

msgid ""
"Then, to register this custom user model with Django's admin, the following "
"code would be required in the app's ``admin.py`` file::"
msgstr ""
"然后，在 Django 管理后台里注册这个用户模型，下面这些代码必须在 app 的 "
"``admin.py`` 文件里："

msgid ""
"Finally, specify the custom model as the default user model for your project "
"using the :setting:`AUTH_USER_MODEL` setting in your ``settings.py``::"
msgstr ""
"最后，在项目配置文件中的 :setting:`AUTH_USER_MODEL` 里指定自定义的用户模型为"
"默认的用户模型。"

msgid "Using the Django authentication system"
msgstr "使用 Django 的验证系统"

msgid ""
"This document explains the usage of Django's authentication system in its "
"default configuration. This configuration has evolved to serve the most "
"common project needs, handling a reasonably wide range of tasks, and has a "
"careful implementation of passwords and permissions. For projects where "
"authentication needs differ from the default, Django supports extensive :doc:"
"`extension and customization </topics/auth/customizing>` of authentication."
msgstr ""
"本文档介绍了 Django 验证系统在默认配置下的使用方法。默认配置满足最常见的项目"
"需求，可以处理相当多的任务，还有一个安全的密码和权限实现。对于验证需求与默认"
"配置不同的项目，Django 支持对身份验证进行扩展和定制。"

msgid ""
"Django authentication provides both authentication and authorization "
"together and is generally referred to as the authentication system, as these "
"features are somewhat coupled."
msgstr ""
"Django 验证同时提供身份验证和授权，通常称为身份验证系统，因为这些功能在某种程"
"度上是耦合的。"

msgid "``User`` objects"
msgstr "``User`` 对象"

msgid ""
":class:`~django.contrib.auth.models.User` objects are the core of the "
"authentication system. They typically represent the people interacting with "
"your site and are used to enable things like restricting access, registering "
"user profiles, associating content with creators etc. Only one class of user "
"exists in Django's authentication framework, i.e., :attr:`'superusers' "
"<django.contrib.auth.models.User.is_superuser>` or admin :attr:`'staff' "
"<django.contrib.auth.models.User.is_staff>` users are just user objects with "
"special attributes set, not different classes of user objects."
msgstr ""
"用户对象是认证系统的核心。它通常代表了与你的站点交互的人员，并用于允许诸如限"
"制访问、注册用户配置文件、将内容与创建者关联等功能。Django 的认证框架中用户只"
"有一个类，例如 “超级管理员”或“普通管理员”只是具有特殊属性集的用户对象，而不是"
"用户对象的不同类。"

msgid "The primary attributes of the default user are:"
msgstr "默认用户的主要属性是："

msgid ":attr:`~django.contrib.auth.models.User.username`"
msgstr ":attr:`~django.contrib.auth.models.User.username`"

msgid ":attr:`~django.contrib.auth.models.User.password`"
msgstr ":attr:`~django.contrib.auth.models.User.password`"

msgid ":attr:`~django.contrib.auth.models.User.email`"
msgstr ":attr:`~django.contrib.auth.models.User.email`"

msgid ":attr:`~django.contrib.auth.models.User.first_name`"
msgstr ":attr:`~django.contrib.auth.models.User.first_name`"

msgid ":attr:`~django.contrib.auth.models.User.last_name`"
msgstr ":attr:`~django.contrib.auth.models.User.last_name`"

msgid ""
"See the :class:`full API documentation <django.contrib.auth.models.User>` "
"for full reference, the documentation that follows is more task oriented."
msgstr ""
"请参阅完整的API文档 :class:`full API documentation <django.contrib.auth."
"models.User>` 以获得完整的参考，下面的文档主要以任务为导向。"

msgid "Creating users"
msgstr "创建用户"

msgid ""
"The most direct way to create users is to use the included :meth:`~django."
"contrib.auth.models.UserManager.create_user` helper function::"
msgstr ""
"创建用户最直接的方法是使用包含 :meth:`~django.contrib.auth.models."
"UserManager.create_user` 的函数："

msgid ""
"If you have the Django admin installed, you can also :ref:`create users "
"interactively <auth-admin>`."
msgstr ""
"如果你已经安装了 Django admin 管理后台，你也可以在 admin 管理后台交互式地创建"
"用户:ref:`create users interactively <auth-admin>` 。 "

msgid "Creating superusers"
msgstr "创建超级用户"

msgid "Create superusers using the :djadmin:`createsuperuser` command::"
msgstr "通过命令行 :djadmin:`createsuperuser` 创建超级管理员："

msgid ""
"You will be prompted for a password. After you enter one, the user will be "
"created immediately. If you leave off the :option:`--username "
"<createsuperuser --username>` or :option:`--email <createsuperuser --email>` "
"options, it will prompt you for those values."
msgstr ""
"你将会被提示输入密码，完成之后，超级管理员就被创建成功了。如果你没有填写参"
"数 :option:`--username <createsuperuser --username> ` or :option:`--email "
"<createsuperuser --email>` ，也将会被提示输入这些值。"

msgid "Changing passwords"
msgstr "更改密码"

msgid ""
"Django does not store raw (clear text) passwords on the user model, but only "
"a hash (see :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` for full details). Because of this, do not attempt to manipulate "
"the password attribute of the user directly. This is why a helper function "
"is used when creating a user."
msgstr ""
"Django 不会在用户模型里保存原始(明文)密码，而只会存储哈希值(请参阅文档 `如何"
"管理密码`  :doc:`documentation of how passwords are managed </topics/auth/"
"passwords>` ) 。因此，请不要试图直接操作用户的密码，这就是创建用户需要辅助函"
"数的原因。"

msgid "To change a user's password, you have several options:"
msgstr "更改一个用户的密码，你有几个选择："

msgid ""
":djadmin:`manage.py changepassword *username* <changepassword>` offers a "
"method of changing a user's password from the command line. It prompts you "
"to change the password of a given user which you must enter twice. If they "
"both match, the new password will be changed immediately. If you do not "
"supply a user, the command will attempt to change the password whose "
"username matches the current system user."
msgstr ""
":djadmin:`manage.py changepassword *username* <changepassword>` 提供了在命令"
"行修改用户密码的方法。它会提示你输入两次新密码，如果操作成功，新密码就立刻生"
"效。如果你没有提供参数 username ，那么将会尝试修改当前系统用户的密码。"

msgid ""
"You can also change a password programmatically, using :meth:`~django."
"contrib.auth.models.User.set_password()`:"
msgstr ""
"你也可以在代码里修改密码，使用 :meth:`~django.contrib.auth.models.User."
"set_password()`:"

msgid ""
"If you have the Django admin installed, you can also change user's passwords "
"on the :ref:`authentication system's admin pages <auth-admin>`."
msgstr ""
"如果你已经按照了 Django admin 管理后台，你也可以在管理后台页面修改密码（请参"
"阅 :ref:`authentication system's admin pages ` ）。"

msgid ""
"Django also provides :ref:`views <built-in-auth-views>` and :ref:`forms "
"<built-in-auth-forms>` that may be used to allow users to change their own "
"passwords."
msgstr ""
"Django 还提供了允许用户自行修改密码的 :ref:`views ` 和 :ref:`forms ` 。"

msgid ""
"Changing a user's password will log out all their sessions. See :ref:"
"`session-invalidation-on-password-change` for details."
msgstr ""
"修改密码将会注销用户的所有会话。查看详情请参阅 :ref:`session-invalidation-on-"
"password-change` 。"

msgid "Authenticating users"
msgstr "验证用户"

msgid ""
"Use :func:`~django.contrib.auth.authenticate()` to verify a set of "
"credentials. It takes credentials as keyword arguments, ``username`` and "
"``password`` for the default case, checks them against each :ref:"
"`authentication backend <authentication-backends>`, and returns a :class:"
"`~django.contrib.auth.models.User` object if the credentials are valid for a "
"backend. If the credentials aren't valid for any backend or if a backend "
"raises :class:`~django.core.exceptions.PermissionDenied`, it returns "
"``None``. For example::"
msgstr ""
"使用 :func:`~django.contrib.auth.authenticate()` 来验证用户。它使用 "
"``username`` 和 ``password`` 作为参数来验证，对每个身份验证后端( :ref:"
"`authentication backend ` )进行检查。如果后端验证有效，则返回一个 :class:"
"`~django.contrib.auth.models.User` 对象。如果后端引发 :class:`~django.core."
"exceptions.PermissionDenied` 错误，将返回 ``None``。举例："

msgid ""
"``request`` is an optional :class:`~django.http.HttpRequest` which is passed "
"on the ``authenticate()`` method of the authentication backends."
msgstr ""
"``request`` 是可选的 :class:`~django.http.HttpRequest` ，它在身份验证后端上"
"的 ``authenticate()`` 方法来传递。"

msgid ""
"This is a low level way to authenticate a set of credentials; for example, "
"it's used by the :class:`~django.contrib.auth.middleware."
"RemoteUserMiddleware`. Unless you are writing your own authentication "
"system, you probably won't use this. Rather if you're looking for a way to "
"login a user, use the :class:`~django.contrib.auth.views.LoginView`."
msgstr ""
"这个一个很底层的验证方法。比如，可以通过 :class:`~django.contrib.auth."
"middleware.RemoteUserMiddleware` 来验证。除非你在编写自己的身份验证系统，否则"
"你可能不会用到它。如果你正在寻找用户登录的方法，请参阅 :class:`~django."
"contrib.auth.views.LoginView` 。"

msgid "Permissions and Authorization"
msgstr "权限和认证"

msgid ""
"Django comes with a simple permissions system. It provides a way to assign "
"permissions to specific users and groups of users."
msgstr ""
"Django 带有一个简单的权限系统。它提供了为指定的用户和用户组分配权限的方法。"

msgid ""
"It's used by the Django admin site, but you're welcome to use it in your own "
"code."
msgstr "它在 Django 管理后台界面里使用，但你也可以在自己的代码中使用它。"

msgid "The Django admin site uses permissions as follows:"
msgstr "Django 的 admin 页面使用了如下权限："

msgid ""
"Access to view objects is limited to users with the \"view\" or \"change\" "
"permission for that type of object."
msgstr "访问查看的对象仅限于具有该类型对象的“查看”或“更改”权限的用户。"

msgid ""
"Access to view the \"add\" form and add an object is limited to users with "
"the \"add\" permission for that type of object."
msgstr "访问“添加”表单和添加对象仅限于具有该类型对象的“添加”权限的用户。"

msgid ""
"Access to view the change list, view the \"change\" form and change an "
"object is limited to users with the \"change\" permission for that type of "
"object."
msgstr ""
"访问修改列表、查看“修改”表单和修改对象仅限于对该类型对象的“修改”权限的用户。"

msgid ""
"Access to delete an object is limited to users with the \"delete\" "
"permission for that type of object."
msgstr "访问删除对象仅限于对该类型对象的“删除”权限的用户。"

msgid ""
"Permissions can be set not only per type of object, but also per specific "
"object instance. By using the :meth:`~django.contrib.admin.ModelAdmin."
"has_view_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` and :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` methods provided by the :class:`~django.contrib.admin."
"ModelAdmin` class, it is possible to customize permissions for different "
"object instances of the same type."
msgstr ""
"不仅可以为每个对象类型设置权限，还可以为每个指定对象实例设置权限。通过使用 :"
"class:`~django.contrib.admin.ModelAdmin` 类提供的 :meth:`~django.contrib."
"admin.ModelAdmin.has_view_permission`, :meth:`~django.contrib.admin."
"ModelAdmin.has_add_permission`, :meth:`~django.contrib.admin.ModelAdmin."
"has_change_permission` 和 :meth:`~django.contrib.admin.ModelAdmin."
"has_delete_permission` 方法，可以为同一类型的不同实例定制权限。"

msgid ""
":class:`~django.contrib.auth.models.User` objects have two many-to-many "
"fields: ``groups`` and ``user_permissions``. :class:`~django.contrib.auth."
"models.User` objects can access their related objects in the same way as any "
"other :doc:`Django model </topics/db/models>`::"
msgstr ""
":class:`~django.contrib.auth.models.User` 对象有两个多对多字段:``groups`` 和 "
"``user_permissions``。 :class:`~django.contrib.auth.models.User` 对象可以像访"
"问其他 :doc:`Django model `: 一样访问他们的相关对象。"

msgid "Default permissions"
msgstr "默认权限"

msgid ""
"When ``django.contrib.auth`` is listed in your :setting:`INSTALLED_APPS` "
"setting, it will ensure that four default permissions -- add, change, "
"delete, and view -- are created for each Django model defined in one of your "
"installed applications."
msgstr ""
"当 :setting:`INSTALLED_APPS` 设置了 ``django.contrib.auth`` 时，它将确保你的"
"每个 Django 模型被创建时有四个默认权限：添加、修改、删除和查看。"

msgid ""
"These permissions will be created when you run :djadmin:`manage.py migrate "
"<migrate>`; the first time you run ``migrate`` after adding ``django.contrib."
"auth`` to :setting:`INSTALLED_APPS`, the default permissions will be created "
"for all previously-installed models, as well as for any new models being "
"installed at that time. Afterward, it will create default permissions for "
"new models each time you run :djadmin:`manage.py migrate <migrate>` (the "
"function that creates permissions is connected to the :data:`~django.db."
"models.signals.post_migrate` signal)."
msgstr ""
"运行 :djadmin:`manage.py migrate <migrate>` 时将创建这些权限。当你添加 "
"``django.contrib.auth`` 到 :setting:`INSTALLED_APPS` 后第一次运行 ``迁移`` ，"
"将会为所有只去已经安装过的模型以及现在正在安装的模型创建这些默认的权限。之"
"后，每次你运行 :djadmin:`manage.py migrate <migrate>` 都会为新模型创建默认权"
"限 (创建权限的函数连接 :data:`~django.db.models.signals.post_migrate` 信号)。"

msgid ""
"Assuming you have an application with an :attr:`~django.db.models.Options."
"app_label` ``foo`` and a model named ``Bar``, to test for basic permissions "
"you should use:"
msgstr ""
"假设你有一个名为 ``foo`` 应用程序和一个名为 ``Bar`` 的模型，要测试基础权限，"
"你应该使用："

msgid "add: ``user.has_perm('foo.add_bar')``"
msgstr "添加：``user.has_perm('foo.add_bar')``"

msgid "change: ``user.has_perm('foo.change_bar')``"
msgstr "修改：``user.has_perm('foo.change_bar')``"

msgid "delete: ``user.has_perm('foo.delete_bar')``"
msgstr "删除：``user.has_perm('foo.delete_bar')``"

msgid "view: ``user.has_perm('foo.view_bar')``"
msgstr "查看：``user.has_perm('foo.view_bar')``"

msgid ""
"The :class:`~django.contrib.auth.models.Permission` model is rarely accessed "
"directly."
msgstr "权限模型很少会被直接访问。"

msgid "Groups"
msgstr "组"

msgid ""
":class:`django.contrib.auth.models.Group` models are a generic way of "
"categorizing users so you can apply permissions, or some other label, to "
"those users. A user can belong to any number of groups."
msgstr ""
":class:`django.contrib.auth.models.Group` 模型是对用户进行分类的通用方法，因"
"此您可以将权限或其他标签应用于这些用户。用户可以属于任意数量的组。"

msgid ""
"A user in a group automatically has the permissions granted to that group. "
"For example, if the group ``Site editors`` has the permission "
"``can_edit_home_page``, any user in that group will have that permission."
msgstr ""
"组里的用户会自动拥有该组的权限。举例，如果 ``Site editors`` 组有修改网站首页"
"的权限，那么该组的任何成员都有这个权限。"

msgid ""
"Beyond permissions, groups are a convenient way to categorize users to give "
"them some label, or extended functionality. For example, you could create a "
"group ``'Special users'``, and you could write code that could, say, give "
"them access to a members-only portion of your site, or send them members-"
"only email messages."
msgstr ""
"除权限外，组是一个方便的途径，可以给用户分类，为其提供一些标签或扩展功能。例"
"如，你可以创建一个组 ``'Special users'``，并在编写的代码里让该组成员访问网站"
"仅限会员部分的内容，或者对该组成员发送仅限会员查看的电子邮件。"

msgid "Programmatically creating permissions"
msgstr "以编程方式创建权限"

msgid ""
"While :ref:`custom permissions <custom-permissions>` can be defined within a "
"model's ``Meta`` class, you can also create permissions directly. For "
"example, you can create the ``can_publish`` permission for a ``BlogPost`` "
"model in ``myapp``::"
msgstr ""
"虽然可以在模型的  ``Meta`` 类中定义 :ref:`custom permissions <custom-"
"permissions>` ，你也可以直接创建权限。例如，你可以为 ``BlogPost`` 模型创建 "
"``can_publish`` 权限。"

msgid ""
"The permission can then be assigned to a :class:`~django.contrib.auth.models."
"User` via its ``user_permissions`` attribute or to a :class:`~django.contrib."
"auth.models.Group` via its ``permissions`` attribute."
msgstr ""
"然后，可以通过 ``user_permissions`` 属性将权限分配给 :class:`~django.contrib."
"auth.models.User` ，或通过 ``permissions`` 属性分配给 :class:`~django."
"contrib.auth.models.Group`  。"

msgid "Permission caching"
msgstr "权限缓存"

msgid ""
"The :class:`~django.contrib.auth.backends.ModelBackend` caches permissions "
"on the user object after the first time they need to be fetched for a "
"permissions check. This is typically fine for the request-response cycle "
"since permissions aren't typically checked immediately after they are added "
"(in the admin, for example). If you are adding permissions and checking them "
"immediately afterward, in a test or view for example, the easiest solution "
"is to re-fetch the user from the database. For example::"
msgstr ""
"在第一次需要获取用户对象的权限检查时， :class:`~django.contrib.auth.backends."
"ModelBackend` 才会缓存它们的权限。对于请求-响应周期来说，这通常是很好的，因为"
"权限通常不会在添加的时候立刻检查（例如，在 admin 中）。如果你打算在测试或视图"
"中添加权限，并随后检查他们，最简单的解决方案就是从数据库中重新获取用户。例"
"如："

msgid "Authentication in Web requests"
msgstr "Web 请求的认证"

msgid ""
"Django uses :doc:`sessions </topics/http/sessions>` and middleware to hook "
"the authentication system into :class:`request objects <django.http."
"HttpRequest>`."
msgstr ""
"Django 使用 :doc:`sessions </topics/http/sessions>` 和中间件将身份验证系统挂"
"接到请求对象中。"

msgid ""
"These provide a :attr:`request.user <django.http.HttpRequest.user>`  "
"attribute on every request which represents the current user. If the current "
"user has not logged in, this attribute will be set to an instance of :class:"
"`~django.contrib.auth.models.AnonymousUser`, otherwise it will be an "
"instance of :class:`~django.contrib.auth.models.User`."
msgstr ""
"它们在每次请求中都会提供 :attr:`request.user <django.http.HttpRequest.user>` "
"属性。如果当前没有用户登录，这个属性将会被设置为 :class:`~django.contrib."
"auth.models.AnonymousUser` ，否则将会被设置为 :class:`~django.contrib.auth."
"models.User` 实例。"

msgid ""
"You can tell them apart with :attr:`~django.contrib.auth.models.User."
"is_authenticated`, like so::"
msgstr ""
"你可以使用 :attr:`~django.contrib.auth.models.User.is_authenticated` 区分两"
"者，例如："

msgid "How to log a user in"
msgstr "用户如何登陆"

msgid ""
"If you have an authenticated user you want to attach to the current session "
"- this is done with a :func:`~django.contrib.auth.login` function."
msgstr ""
"如果有一个已验证的用户想附加到当前会话(session)中，将通过 :func:`~django."
"contrib.auth.login`  函数完成。"

msgid ""
"To log a user in, from a view, use :func:`~django.contrib.auth.login()`. It "
"takes an :class:`~django.http.HttpRequest` object and a :class:`~django."
"contrib.auth.models.User` object. :func:`~django.contrib.auth.login()` saves "
"the user's ID in the session, using Django's session framework."
msgstr ""
"要在视图中让用户登录，使用 :func:`~django.contrib.auth.login()`  。它需要 :"
"class:`~django.http.HttpRequest` 对象和 :class:`~django.contrib.auth.models."
"User` 对象。通过 Django 的 session 框架， :func:`~django.contrib.auth."
"login()` 会在 session 中保存用户的ID。"

msgid ""
"Note that any data set during the anonymous session is retained in the "
"session after a user logs in."
msgstr "注意，在匿名会话期间设置的任何数据都会在用户登录后保留在会话中。"

msgid ""
"This example shows how you might use both :func:`~django.contrib.auth."
"authenticate()` and :func:`~django.contrib.auth.login()`::"
msgstr ""
"这个例子展示了如何使用 :func:`~django.contrib.auth.authenticate()` 和 :func:"
"`~django.contrib.auth.login()`: ："

msgid "Selecting the authentication backend"
msgstr "选择验证后端"

msgid ""
"When a user logs in, the user's ID and the backend that was used for "
"authentication are saved in the user's session. This allows the same :ref:"
"`authentication backend <authentication-backends>` to fetch the user's "
"details on a future request. The authentication backend to save in the "
"session is selected as follows:"
msgstr ""
"当用户登录时，用户 ID 和用于身份验证的后端会被保存在用户会话中。允许相同的 :"
"ref:`authentication backend <authentication-backends>` 在未来的请求中获取用户"
"详情。选择要在会话中保存的验证后端如下："

msgid "Use the value of the optional ``backend`` argument, if provided."
msgstr "使用提供了的可选 ``backend`` 参数值。"

msgid ""
"Use the value of the ``user.backend`` attribute, if present. This allows "
"pairing :func:`~django.contrib.auth.authenticate()` and :func:`~django."
"contrib.auth.login()`: :func:`~django.contrib.auth.authenticate()` sets the "
"``user.backend`` attribute on the user object it returns."
msgstr ""
"使用 ``user.backend``  的值。允许配对 :func:`~django.contrib.auth."
"authenticate()`  和 :func:`~django.contrib.auth.login()` ：当返回用户对象时 :"
"func:`~django.contrib.auth.authenticate()`  设置 ``user.backend`` 属性。"

msgid ""
"Use the ``backend`` in :setting:`AUTHENTICATION_BACKENDS`, if there is only "
"one."
msgstr "使用 :setting:`AUTHENTICATION_BACKENDS` 存在的 ``backend`` 。"

msgid "Otherwise, raise an exception."
msgstr "否则，抛出一个异常。"

msgid ""
"In cases 1 and 2, the value of the ``backend`` argument or the ``user."
"backend`` attribute should be a dotted import path string (like that found "
"in :setting:`AUTHENTICATION_BACKENDS`), not the actual backend class."
msgstr ""
"在1和2中，``backend`` 参数和 ``user.backend`` 属性应该是完整的导入路径（像 :"
"setting:`AUTHENTICATION_BACKENDS` 里的路径一样），而不是真实的后端类。"

msgid "How to log a user out"
msgstr "用户如何登出"

msgid ""
"To log out a user who has been logged in via :func:`django.contrib.auth."
"login()`, use :func:`django.contrib.auth.logout()` within your view. It "
"takes an :class:`~django.http.HttpRequest` object and has no return value. "
"Example::"
msgstr ""
"如果已经通过 :func:`django.contrib.auth.login()` 登录的用户想退出登录，可以在"
"视图中使用 :func:`django.contrib.auth.logout()` 。需要传入 :class:`~django."
"http.HttpRequest` 对象，并且该函数不会返回值。例如："

msgid ""
"Note that :func:`~django.contrib.auth.logout()` doesn't throw any errors if "
"the user wasn't logged in."
msgstr "注意，如果用户未登录，:func:`~django.contrib.auth.logout()` 不会报错。"

msgid ""
"When you call :func:`~django.contrib.auth.logout()`, the session data for "
"the current request is completely cleaned out. All existing data is removed. "
"This is to prevent another person from using the same Web browser to log in "
"and have access to the previous user's session data. If you want to put "
"anything into the session that will be available to the user immediately "
"after logging out, do that *after* calling :func:`django.contrib.auth."
"logout()`."
msgstr ""
"调用 :func:`~django.contrib.auth.logout()` 后，当前请求的会话数据会被全部清"
"除。这是为了防止其他使用同一个浏览器的用户访问前一名用户的会话数据。如果想在"
"登出后立即向用户提供的会话中放入任何内容，请在调用 :func:`django.contrib."
"auth.logout()` 之后执行此操作。"

msgid "Limiting access to logged-in users"
msgstr "限制对登录用户的访问"

msgid "The raw way"
msgstr "原始方式"

msgid ""
"The simple, raw way to limit access to pages is to check :attr:`request.user."
"is_authenticated <django.contrib.auth.models.User.is_authenticated>` and "
"either redirect to a login page::"
msgstr ""
"限制访问页面最简单的办法就是检查 :attr:`request.user.is_authenticated "
"<django.contrib.auth.models.User.is_authenticated>` 并重定向到登录页面。"

msgid "...or display an error message::"
msgstr "或者显示一个错误信息："

msgid "The ``login_required`` decorator"
msgstr "``login_required`` 装饰器"

msgid ""
"As a shortcut, you can use the convenient :func:`~django.contrib.auth."
"decorators.login_required` decorator::"
msgstr ""
"作为快捷方式，你可以使用 :func:`~django.contrib.auth.decorators."
"login_required` 装饰器:"

msgid ""
":func:`~django.contrib.auth.decorators.login_required` does the following:"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` 会执行以下操作："

msgid ""
"If the user isn't logged in, redirect to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`, passing the current absolute path in the query string. "
"Example: ``/accounts/login/?next=/polls/3/``."
msgstr ""
"如果用户没有登录，会重定向到  :setting:`settings.LOGIN_URL <LOGIN_URL>` ，并"
"传递绝对路径到查询字符串中。例如： ``/accounts/login/?next=/polls/3/`` 。"

msgid ""
"If the user is logged in, execute the view normally. The view code is free "
"to assume the user is logged in."
msgstr "如果用户已经登录，则正常执行视图。视图里的代码可以假设用户已经登录了。"

msgid ""
"By default, the path that the user should be redirected to upon successful "
"authentication is stored in a query string parameter called ``\"next\"``. If "
"you would prefer to use a different name for this parameter, :func:`~django."
"contrib.auth.decorators.login_required` takes an optional "
"``redirect_field_name`` parameter::"
msgstr ""
"默认情况下，成功验证时用户跳转的路径保存在名为 ``\"next\"`` 的查询字符串参数"
"中。如果你希望这个参数使用不同名称，请在 :func:`~django.contrib.auth."
"decorators.login_required` 中传递可选参数 ``redirect_field_name`` ："

msgid ""
"Note that if you provide a value to ``redirect_field_name``, you will most "
"likely need to customize your login template as well, since the template "
"context variable which stores the redirect path will use the value of "
"``redirect_field_name`` as its key rather than ``\"next\"`` (the default)."
msgstr ""
"注意，如果你提供了 ``redirect_field_name`` 值，则很可能也需要自定义登录模板，"
"因为存储重定向路径的模板上下文变量使用的是 ``redirect_field_name`` 值，而不"
"是 ``\"next\"`` （默认情况下）。"

msgid ""
":func:`~django.contrib.auth.decorators.login_required` also takes an "
"optional ``login_url`` parameter. Example::"
msgstr ""
":func:`~django.contrib.auth.decorators.login_required` 也有可选参数 "
"``login_url`` 。例如："

msgid ""
"Note that if you don't specify the ``login_url`` parameter, you'll need to "
"ensure that the :setting:`settings.LOGIN_URL <LOGIN_URL>` and your login "
"view are properly associated. For example, using the defaults, add the "
"following lines to your URLconf::"
msgstr ""
"注意，如果你没有指定参数 ``login_url`` ，你需要确认 :setting:`settings."
"LOGIN_URL <LOGIN_URL>`  和登录视图是正确关联的。例如，使用默认方式，在 URL 配"
"置文件里添加下面这行："

msgid ""
"The :setting:`settings.LOGIN_URL <LOGIN_URL>` also accepts view function "
"names and :ref:`named URL patterns <naming-url-patterns>`. This allows you "
"to freely remap your login view within your URLconf without having to update "
"the setting."
msgstr ""
":setting:`settings.LOGIN_URL <LOGIN_URL>` 也接受视图方法名和 :ref:`named URL "
"patterns <naming-url-patterns>` 。这样你可以在 URLconf 里自由地重新映射你的登"
"录视图，而不需更新配置文件。"

msgid ""
"The ``login_required`` decorator does NOT check the ``is_active`` flag on a "
"user, but the default :setting:`AUTHENTICATION_BACKENDS` reject inactive "
"users."
msgstr ""
"``login_required`` 装饰器不会检查用户的 ``is_active`` 标识状态，但默认的 :"
"setting:`AUTHENTICATION_BACKENDS` 会拒绝非正常用户。"

msgid ""
"If you are writing custom views for Django's admin (or need the same "
"authorization check that the built-in views use), you may find the :func:"
"`django.contrib.admin.views.decorators.staff_member_required` decorator a "
"useful alternative to ``login_required()``."
msgstr ""
"如果你打算编写自定义的 Django 管理模块视图（或需要与内置视图使用同样的权限检"
"查），你将会发现 :func:`django.contrib.admin.views.decorators."
"staff_member_required` 装饰器是 ``login_required()`` 的一个有用的替代方法。"

msgid "The ``LoginRequired`` mixin"
msgstr "``LoginRequired`` Mixin"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can achieve the same behavior as with ``login_required`` by using the "
"``LoginRequiredMixin``. This mixin should be at the leftmost position in the "
"inheritance list."
msgstr ""
"使用基于类的视图时，可以使用 ``LoginRequiredMixin`` 实现和 "
"``login_required`` 相同的行为。这个 Mixin 应该在继承列表中最左侧的位置。"

msgid ""
"If a view is using this mixin, all requests by non-authenticated users will "
"be redirected to the login page or shown an HTTP 403 Forbidden error, "
"depending on the :attr:`~django.contrib.auth.mixins.AccessMixin."
"raise_exception` parameter."
msgstr ""
"如果一个视图使用 Mixin ，那么未经验证用户的所有请求都会被重定向到登录页面或者"
"显示 HTTP 403 Forbidden 错误，这取决于 :attr:`~django.contrib.auth.mixins."
"AccessMixin.raise_exception` 参数。"

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users::"
msgstr ""
"你可以设置 :class:`~django.contrib.auth.mixins.AccessMixin` 的任何参数来自定"
"义未验证用户的处理："

msgid ""
"Just as the ``login_required`` decorator, this mixin does NOT check the "
"``is_active`` flag on a user, but the default :setting:"
"`AUTHENTICATION_BACKENDS` reject inactive users."
msgstr ""
"同 ``login_required`` 装饰器一样，Mixin 不会检查用户的 ``is_active`` 标识状"
"态，但默认的 :setting:`AUTHENTICATION_BACKENDS` 会拒绝非正常用户。"

msgid "Limiting access to logged-in users that pass a test"
msgstr "限制对通过测试的登录用户的访问"

msgid ""
"To limit access based on certain permissions or some other test, you'd do "
"essentially the same thing as described in the previous section."
msgstr ""
"根据某些权限或者其他测试来限制访问，你基本上可以执行和上一节所述同样的操作。"

msgid ""
"The simple way is to run your test on :attr:`request.user <django.http."
"HttpRequest.user>` in the view directly. For example, this view checks to "
"make sure the user has an email in the desired domain and if not, redirects "
"to the login page::"
msgstr ""
"最简单的方法是在视图里直接对 :attr:`request.user <django.http.HttpRequest."
"user>` 进行测试。举例，这个视图检查用户是否拥有特定域名的邮箱，否则会重定向到"
"登录页："

msgid ""
"As a shortcut, you can use the convenient ``user_passes_test`` decorator "
"which performs a redirect when the callable returns ``False``::"
msgstr ""
"作为快捷方式，你可以方便的调用 ``user_passes_test`` 装饰器，当调用返回 "
"``False`` 时会执行重定向。"

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes a required "
"argument: a callable that takes a :class:`~django.contrib.auth.models.User` "
"object and returns ``True`` if the user is allowed to view the page. Note "
"that :func:`~django.contrib.auth.decorators.user_passes_test` does not "
"automatically check that the :class:`~django.contrib.auth.models.User` is "
"not anonymous."
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` 接受一个必要的参数："
"一个带有:class:`~django.contrib.auth.models.User` 对象的调用，如果允许用户访"
"问这个页面，则返回 ``True`` 。注意，:func:`~django.contrib.auth.decorators."
"user_passes_test` 不会自动检查用户是否匿名。"

msgid ""
":func:`~django.contrib.auth.decorators.user_passes_test` takes two optional "
"arguments:"
msgstr ""
":func:`~django.contrib.auth.decorators.user_passes_test` 可以传递两个可选参"
"数："

msgid "``login_url``"
msgstr "``login_url``"

msgid ""
"Lets you specify the URL that users who don't pass the test will be "
"redirected to. It may be a login page and defaults to :setting:`settings."
"LOGIN_URL <LOGIN_URL>` if you don't specify one."
msgstr ""
"允许你指定用户没有通过测试时跳转的地址。它可能是一个登录页面，如果你没指定，"
"默认是 :setting:`settings.LOGIN_URL <LOGIN_URL>` 。"

msgid "``redirect_field_name``"
msgstr "``redirect_field_name``"

msgid ""
"Same as for :func:`~django.contrib.auth.decorators.login_required`. Setting "
"it to ``None`` removes it from the URL, which you may want to do if you are "
"redirecting users that don't pass the test to a non-login page where there's "
"no \"next page\"."
msgstr ""
"与 :func:`~django.contrib.auth.decorators.login_required` 相同。如果你想把没"
"通过检查的用户重定向到没有 \"next page\" 的非登录页面时，把它设置为 "
"``None`` ，这样它会在 URL 中移除。"

msgid "For example::"
msgstr "例如::"

msgid ""
"When using :doc:`class-based views </topics/class-based-views/index>`, you "
"can use the ``UserPassesTestMixin`` to do this."
msgstr "使用基于类的视图时，可以使用 ``UserPassesTestMixin`` 执行此操作。"

msgid ""
"You have to override the ``test_func()`` method of the class to provide the "
"test that is performed. Furthermore, you can set any of the parameters of :"
"class:`~django.contrib.auth.mixins.AccessMixin` to customize the handling of "
"unauthorized users::"
msgstr ""
"你必须覆盖类方法 ``test_func()`` 以提供执行的测试。此外，还可以设置 :class:"
"`~django.contrib.auth.mixins.AccessMixin` 的任何参数来自定义处理未授权用户："

msgid ""
"You can also override the ``get_test_func()`` method to have the mixin use a "
"differently named function for its checks (instead of :meth:`test_func`)."
msgstr ""
"你也可以覆盖 ``get_test_func()`` 方法，以使 mixin 对其检查使用不同名称的函数"
"（而不是 :meth:`test_func` ）。"

msgid "Stacking ``UserPassesTestMixin``"
msgstr ""

msgid ""
"Due to the way ``UserPassesTestMixin`` is implemented, you cannot stack them "
"in your inheritance list. The following does NOT work::"
msgstr ""
"由于实现了 ``UserPassesTestMixin`` 方式，不能在继承列表中堆砌它们。下述方式将"
"不能工作："

msgid ""
"If ``TestMixin1`` would call ``super()`` and take that result into account, "
"``TestMixin1`` wouldn't work standalone anymore."
msgstr ""
"如果 ``TestMixin1`` 调用 ``super()`` 并把结果考虑在内，``TestMixin1`` 将不能"
"独立运行。"

msgid "The ``permission_required`` decorator"
msgstr "``permission_required`` 装饰器"

msgid ""
"It's a relatively common task to check whether a user has a particular "
"permission. For that reason, Django provides a shortcut for that case: the :"
"func:`~django.contrib.auth.decorators.permission_required()` decorator.::"
msgstr ""

msgid ""
"Just like the :meth:`~django.contrib.auth.models.User.has_perm` method, "
"permission names take the form ``\"<app label>.<permission codename>\"`` (i."
"e. ``polls.can_vote`` for a permission on a model in the ``polls`` "
"application)."
msgstr ""

msgid ""
"The decorator may also take an iterable of permissions, in which case the "
"user must have all of the permissions in order to access the view."
msgstr ""

msgid ""
"Note that :func:`~django.contrib.auth.decorators.permission_required()` also "
"takes an optional ``login_url`` parameter::"
msgstr ""

msgid ""
"As in the :func:`~django.contrib.auth.decorators.login_required` decorator, "
"``login_url`` defaults to :setting:`settings.LOGIN_URL <LOGIN_URL>`."
msgstr ""

msgid ""
"If the ``raise_exception`` parameter is given, the decorator will raise :exc:"
"`~django.core.exceptions.PermissionDenied`, prompting :ref:`the 403 (HTTP "
"Forbidden) view<http_forbidden_view>` instead of redirecting to the login "
"page."
msgstr ""

msgid ""
"If you want to use ``raise_exception`` but also give your users a chance to "
"login first, you can add the :func:`~django.contrib.auth.decorators."
"login_required` decorator::"
msgstr ""

msgid ""
"This also avoids a redirect loop when :class:`.LoginView`'s "
"``redirect_authenticated_user=True`` and the logged-in user doesn't have all "
"of the required permissions."
msgstr ""

msgid "The ``PermissionRequiredMixin`` mixin"
msgstr ""

msgid ""
"To apply permission checks to :doc:`class-based views </ref/class-based-"
"views/index>`, you can use the ``PermissionRequiredMixin``:"
msgstr ""

msgid ""
"This mixin, just like the ``permission_required`` decorator, checks whether "
"the user accessing a view has all given permissions. You should specify the "
"permission (or an iterable of permissions) using the ``permission_required`` "
"parameter::"
msgstr ""

msgid ""
"You can set any of the parameters of :class:`~django.contrib.auth.mixins."
"AccessMixin` to customize the handling of unauthorized users."
msgstr ""

msgid "You may also override these methods:"
msgstr "你可能同样需要重写这些方法："

msgid ""
"Returns an iterable of permission names used by the mixin. Defaults to the "
"``permission_required`` attribute, converted to a tuple if necessary."
msgstr ""

msgid ""
"Returns a boolean denoting whether the current user has permission to "
"execute the decorated view. By default, this returns the result of calling :"
"meth:`~django.contrib.auth.models.User.has_perms()` with the list of "
"permissions returned by :meth:`get_permission_required()`."
msgstr ""

msgid "Redirecting unauthorized requests in class-based views"
msgstr ""

msgid ""
"To ease the handling of access restrictions in :doc:`class-based views </ref/"
"class-based-views/index>`, the ``AccessMixin`` can be used to configure the "
"behavior of a view when access is denied. Authenticated users are denied "
"access with an HTTP 403 Forbidden response. Anonymous users are redirected "
"to the login page or shown an HTTP 403 Forbidden response, depending on the :"
"attr:`~django.contrib.auth.mixins.AccessMixin.raise_exception` attribute."
msgstr ""

msgid ""
"In older versions, authenticated users who lacked permissions were "
"redirected to the login page (which resulted in a loop) instead of receiving "
"an HTTP 403 Forbidden response."
msgstr ""

msgid ""
"Default return value for :meth:`get_login_url`.  Defaults to ``None`` in "
"which case :meth:`get_login_url` falls back to :setting:`settings.LOGIN_URL "
"<LOGIN_URL>`."
msgstr ""

msgid ""
"Default return value for :meth:`get_permission_denied_message`. Defaults to "
"an empty string."
msgstr ""

msgid ""
"Default return value for :meth:`get_redirect_field_name`. Defaults to ``"
"\"next\"``."
msgstr ""

msgid ""
"If this attribute is set to ``True``, a :class:`~django.core.exceptions."
"PermissionDenied` exception is raised when the conditions are not met.  When "
"``False`` (the default), anonymous users are redirected to the login page."
msgstr ""

msgid ""
"Returns the URL that users who don't pass the test will be redirected to. "
"Returns :attr:`login_url` if set, or :setting:`settings.LOGIN_URL "
"<LOGIN_URL>` otherwise."
msgstr ""

msgid ""
"When :attr:`raise_exception` is ``True``, this method can be used to control "
"the error message passed to the error handler for display to the user. "
"Returns the :attr:`permission_denied_message` attribute by default."
msgstr ""

msgid ""
"Returns the name of the query parameter that will contain the URL the user "
"should be redirected to after a successful login. If you set this to "
"``None``, a query parameter won't be added. Returns the :attr:"
"`redirect_field_name` attribute by default."
msgstr ""

msgid ""
"Depending on the value of ``raise_exception``, the method either raises a :"
"exc:`~django.core.exceptions.PermissionDenied` exception or redirects the "
"user to the ``login_url``, optionally including the ``redirect_field_name`` "
"if it is set."
msgstr ""

msgid "Session invalidation on password change"
msgstr ""

msgid ""
"If your :setting:`AUTH_USER_MODEL` inherits from :class:`~django.contrib."
"auth.models.AbstractBaseUser` or implements its own :meth:`~django.contrib."
"auth.models.AbstractBaseUser.get_session_auth_hash()` method, authenticated "
"sessions will include the hash returned by this function. In the :class:"
"`~django.contrib.auth.models.AbstractBaseUser` case, this is an HMAC of the "
"password field. Django verifies that the hash in the session for each "
"request matches the one that's computed during the request. This allows a "
"user to log out all of their sessions by changing their password."
msgstr ""

msgid ""
"The default password change views included with Django, :class:`~django."
"contrib.auth.views.PasswordChangeView` and the ``user_change_password`` view "
"in the :mod:`django.contrib.auth` admin, update the session with the new "
"password hash so that a user changing their own password won't log "
"themselves out. If you have a custom password change view and wish to have "
"similar behavior, use the :func:`update_session_auth_hash` function."
msgstr ""

msgid ""
"This function takes the current request and the updated user object from "
"which the new session hash will be derived and updates the session hash "
"appropriately. It also rotates the session key so that a stolen session "
"cookie will be invalidated."
msgstr ""

msgid "Example usage::"
msgstr ""

msgid ""
"Since :meth:`~django.contrib.auth.models.AbstractBaseUser."
"get_session_auth_hash()` is based on :setting:`SECRET_KEY`, updating your "
"site to use a new secret will invalidate all existing sessions."
msgstr ""

msgid "Authentication Views"
msgstr ""

msgid ""
"Django provides several views that you can use for handling login, logout, "
"and password management. These make use of the :ref:`stock auth forms <built-"
"in-auth-forms>` but you can pass in your own forms as well."
msgstr ""

msgid ""
"Django provides no default template for the authentication views. You should "
"create your own templates for the views you want to use. The template "
"context is documented in each view, see :ref:`all-authentication-views`."
msgstr ""

msgid "Using the views"
msgstr ""

msgid ""
"There are different methods to implement these views in your project. The "
"easiest way is to include the provided URLconf in ``django.contrib.auth."
"urls`` in your own URLconf, for example::"
msgstr ""

msgid "This will include the following URL patterns::"
msgstr ""

msgid ""
"The views provide a URL name for easier reference. See :doc:`the URL "
"documentation </topics/http/urls>` for details on using named URL patterns."
msgstr ""

msgid ""
"If you want more control over your URLs, you can reference a specific view "
"in your URLconf::"
msgstr ""

msgid ""
"The views have optional arguments you can use to alter the behavior of the "
"view. For example, if you want to change the template name a view uses, you "
"can provide the ``template_name`` argument. A way to do this is to provide "
"keyword arguments in the URLconf, these will be passed on to the view. For "
"example::"
msgstr ""

msgid ""
"All views are :doc:`class-based </topics/class-based-views/index>`, which "
"allows you to easily customize them by subclassing."
msgstr ""

msgid "All authentication views"
msgstr ""

msgid ""
"This is a list with all the views ``django.contrib.auth`` provides. For "
"implementation details see :ref:`using-the-views`."
msgstr ""

msgid "**URL name:** ``login``"
msgstr ""

msgid ""
"See :doc:`the URL documentation </topics/http/urls>` for details on using "
"named URL patterns."
msgstr ""

msgid "**Attributes:**"
msgstr ""

msgid ""
"``template_name``: The name of a template to display for the view used to "
"log the user in. Defaults to :file:`registration/login.html`."
msgstr ""

msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after login. Defaults to ``next``."
msgstr ""

msgid ""
"``authentication_form``: A callable (typically just a form class) to use for "
"authentication. Defaults to :class:`~django.contrib.auth.forms."
"AuthenticationForm`."
msgstr ""

msgid ""
"``extra_context``: A dictionary of context data that will be added to the "
"default context data passed to the template."
msgstr ""

msgid ""
"``redirect_authenticated_user``: A boolean that controls whether or not "
"authenticated users accessing the login page will be redirected as if they "
"had just successfully logged in. Defaults to ``False``."
msgstr ""

msgid ""
"If you enable ``redirect_authenticated_user``, other websites will be able "
"to determine if their visitors are authenticated on your site by requesting "
"redirect URLs to image files on your website. To avoid this \"`social media "
"fingerprinting <https://robinlinus.github.io/socialmedia-leak/>`_\" "
"information leakage, host all images and your favicon on a separate domain."
msgstr ""

msgid ""
"Enabling ``redirect_authenticated_user`` can also result in a redirect loop "
"when using the :func:`.permission_required` decorator unless the "
"``raise_exception`` parameter is used."
msgstr ""

msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>`, that are safe for "
"redirecting after login. Defaults to an empty :class:`set`."
msgstr ""

msgid "Here's what ``LoginView`` does:"
msgstr ""

msgid ""
"If called via ``GET``, it displays a login form that POSTs to the same URL. "
"More on this in a bit."
msgstr ""

msgid ""
"If called via ``POST`` with user submitted credentials, it tries to log the "
"user in. If login is successful, the view redirects to the URL specified in "
"``next``. If ``next`` isn't provided, it redirects to :setting:`settings."
"LOGIN_REDIRECT_URL <LOGIN_REDIRECT_URL>` (which defaults to ``/accounts/"
"profile/``). If login isn't successful, it redisplays the login form."
msgstr ""

msgid ""
"It's your responsibility to provide the html for the login template , called "
"``registration/login.html`` by default. This template gets passed four "
"template context variables:"
msgstr ""

msgid ""
"``form``: A :class:`~django.forms.Form` object representing the :class:"
"`~django.contrib.auth.forms.AuthenticationForm`."
msgstr ""

msgid ""
"``next``: The URL to redirect to after successful login. This may contain a "
"query string, too."
msgstr ""

msgid ""
"``site``: The current :class:`~django.contrib.sites.models.Site`, according "
"to the :setting:`SITE_ID` setting. If you don't have the site framework "
"installed, this will be set to an instance of :class:`~django.contrib.sites."
"requests.RequestSite`, which derives the site name and domain from the "
"current :class:`~django.http.HttpRequest`."
msgstr ""

msgid ""
"``site_name``: An alias for ``site.name``. If you don't have the site "
"framework installed, this will be set to the value of :attr:`request."
"META['SERVER_NAME'] <django.http.HttpRequest.META>`. For more on sites, see :"
"doc:`/ref/contrib/sites`."
msgstr ""

msgid ""
"If you'd prefer not to call the template :file:`registration/login.html`, "
"you can pass the ``template_name`` parameter via the extra arguments to the "
"``as_view`` method in your URLconf. For example, this URLconf line would "
"use :file:`myapp/login.html` instead::"
msgstr ""

msgid ""
"You can also specify the name of the ``GET`` field which contains the URL to "
"redirect to after login using ``redirect_field_name``. By default, the field "
"is called ``next``."
msgstr ""

msgid ""
"Here's a sample :file:`registration/login.html` template you can use as a "
"starting point. It assumes you have a :file:`base.html` template that "
"defines a ``content`` block:"
msgstr ""

msgid ""
"If you have customized authentication (see :doc:`Customizing Authentication "
"</topics/auth/customizing>`) you can use a custom authentication form by "
"setting the ``authentication_form`` attribute. This form must accept a "
"``request`` keyword argument in its ``__init__()`` method and provide a "
"``get_user()`` method which returns the authenticated user object (this "
"method is only ever called after successful form validation)."
msgstr ""

msgid "Logs a user out."
msgstr ""

msgid "**URL name:** ``logout``"
msgstr ""

msgid ""
"``next_page``: The URL to redirect to after logout. Defaults to :setting:"
"`settings.LOGOUT_REDIRECT_URL <LOGOUT_REDIRECT_URL>`."
msgstr ""

msgid ""
"``template_name``: The full name of a template to display after logging the "
"user out. Defaults to :file:`registration/logged_out.html`."
msgstr ""

msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Defaults to ``next``. Overrides the ``next_page`` "
"URL if the given ``GET`` parameter is passed."
msgstr ""

msgid ""
"``success_url_allowed_hosts``: A :class:`set` of hosts, in addition to :meth:"
"`request.get_host() <django.http.HttpRequest.get_host>`, that are safe for "
"redirecting after logout. Defaults to an empty :class:`set`."
msgstr ""

msgid "**Template context:**"
msgstr ""

msgid "``title``: The string \"Logged out\", localized."
msgstr ""

msgid "Logs a user out, then redirects to the login page."
msgstr ""

msgid "**URL name:** No default URL provided"
msgstr ""

msgid "**Optional arguments:**"
msgstr ""

msgid ""
"``login_url``: The URL of the login page to redirect to. Defaults to :"
"setting:`settings.LOGIN_URL <LOGIN_URL>` if not supplied."
msgstr ""

msgid "**URL name:** ``password_change``"
msgstr ""

msgid "Allows a user to change their password."
msgstr ""

msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password change form. Defaults to :file:`registration/password_change_form."
"html` if not supplied."
msgstr ""

msgid ""
"``success_url``: The URL to redirect to after a successful password change."
msgstr ""

msgid ""
"``form_class``: A custom \"change password\" form which must accept a "
"``user`` keyword argument. The form is responsible for actually changing the "
"user's password. Defaults to :class:`~django.contrib.auth.forms."
"PasswordChangeForm`."
msgstr ""

msgid "``form``: The password change form (see ``form_class`` above)."
msgstr ""

msgid "**URL name:** ``password_change_done``"
msgstr ""

msgid "The page shown after a user has changed their password."
msgstr ""

msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_change_done.html` if not supplied."
msgstr ""

msgid "**URL name:** ``password_reset``"
msgstr ""

msgid ""
"Allows a user to reset their password by generating a one-time use link that "
"can be used to reset the password, and sending that link to the user's "
"registered email address."
msgstr ""

msgid ""
"If the email address provided does not exist in the system, this view won't "
"send an email, but the user won't receive any error message either. This "
"prevents information leaking to potential attackers. If you want to provide "
"an error message in this case, you can subclass :class:`~django.contrib.auth."
"forms.PasswordResetForm` and use the ``form_class`` attribute."
msgstr ""

msgid ""
"Users flagged with an unusable password (see :meth:`~django.contrib.auth."
"models.User.set_unusable_password()` aren't allowed to request a password "
"reset to prevent misuse when using an external authentication source like "
"LDAP. Note that they won't receive any error message since this would expose "
"their account's existence but no mail will be sent either."
msgstr ""

msgid ""
"``template_name``: The full name of a template to use for displaying the "
"password reset form. Defaults to :file:`registration/password_reset_form."
"html` if not supplied."
msgstr ""

msgid ""
"``form_class``: Form that will be used to get the email of the user to reset "
"the password for. Defaults to :class:`~django.contrib.auth.forms."
"PasswordResetForm`."
msgstr ""

msgid ""
"``email_template_name``: The full name of a template to use for generating "
"the email with the reset password link. Defaults to :file:`registration/"
"password_reset_email.html` if not supplied."
msgstr ""

msgid ""
"``subject_template_name``: The full name of a template to use for the "
"subject of the email with the reset password link. Defaults to :file:"
"`registration/password_reset_subject.txt` if not supplied."
msgstr ""

msgid ""
"``token_generator``: Instance of the class to check the one time link. This "
"will default to ``default_token_generator``, it's an instance of ``django."
"contrib.auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

msgid ""
"``success_url``: The URL to redirect to after a successful password reset "
"request."
msgstr ""

msgid ""
"``from_email``: A valid email address. By default Django uses the :setting:"
"`DEFAULT_FROM_EMAIL`."
msgstr ""

msgid ""
"``html_email_template_name``: The full name of a template to use for "
"generating a ``text/html`` multipart email with the password reset link. By "
"default, HTML email is not sent."
msgstr ""

msgid ""
"``extra_email_context``: A dictionary of context data that will be available "
"in the email template."
msgstr ""

msgid ""
"``form``: The form (see ``form_class`` above) for resetting the user's "
"password."
msgstr ""

msgid "**Email template context:**"
msgstr ""

msgid "``email``: An alias for ``user.email``"
msgstr ""

msgid ""
"``user``: The current :class:`~django.contrib.auth.models.User`, according "
"to the ``email`` form field. Only active users are able to reset their "
"passwords (``User.is_active is True``)."
msgstr ""

msgid ""
"``domain``: An alias for ``site.domain``. If you don't have the site "
"framework installed, this will be set to the value of ``request.get_host()``."
msgstr ""

msgid "``protocol``: http or https"
msgstr ""

msgid "``uid``: The user's primary key encoded in base 64."
msgstr ""

msgid "``token``: Token to check that the reset link is valid."
msgstr ""

msgid ""
"Sample ``registration/password_reset_email.html`` (email body template):"
msgstr ""

msgid ""
"The same template context is used for subject template. Subject must be "
"single line plain text string."
msgstr ""

msgid "**URL name:** ``password_reset_done``"
msgstr ""

msgid ""
"The page shown after a user has been emailed a link to reset their password. "
"This view is called by default if the :class:`PasswordResetView` doesn't "
"have an explicit ``success_url`` URL set."
msgstr ""

msgid ""
"If the email address provided does not exist in the system, the user is "
"inactive, or has an unusable password, the user will still be redirected to "
"this view but no email will be sent."
msgstr ""

msgid ""
"``template_name``: The full name of a template to use. Defaults to :file:"
"`registration/password_reset_done.html` if not supplied."
msgstr ""

msgid "**URL name:** ``password_reset_confirm``"
msgstr ""

msgid "Presents a form for entering a new password."
msgstr ""

msgid "**Keyword arguments from the URL:**"
msgstr ""

msgid "``uidb64``: The user's id encoded in base 64."
msgstr ""

msgid "``token``: Token to check that the password is valid."
msgstr ""

msgid ""
"``template_name``: The full name of a template to display the confirm "
"password view. Default value is :file:`registration/password_reset_confirm."
"html`."
msgstr ""

msgid ""
"``token_generator``: Instance of the class to check the password. This will "
"default to ``default_token_generator``, it's an instance of ``django.contrib."
"auth.tokens.PasswordResetTokenGenerator``."
msgstr ""

msgid ""
"``post_reset_login``: A boolean indicating if the user should be "
"automatically authenticated after a successful password reset. Defaults to "
"``False``."
msgstr ""

msgid ""
"``post_reset_login_backend``: A dotted path to the authentication backend to "
"use when authenticating a user if ``post_reset_login`` is ``True``. Required "
"only if you have multiple :setting:`AUTHENTICATION_BACKENDS` configured. "
"Defaults to ``None``."
msgstr ""

msgid ""
"``form_class``: Form that will be used to set the password. Defaults to :"
"class:`~django.contrib.auth.forms.SetPasswordForm`."
msgstr ""

msgid ""
"``success_url``: URL to redirect after the password reset done. Defaults to "
"``'password_reset_complete'``."
msgstr ""

msgid ""
"``form``: The form (see ``form_class`` above) for setting the new user's "
"password."
msgstr ""

msgid ""
"``validlink``: Boolean, True if the link (combination of ``uidb64`` and "
"``token``) is valid or unused yet."
msgstr ""

msgid "**URL name:** ``password_reset_complete``"
msgstr ""

msgid ""
"Presents a view which informs the user that the password has been "
"successfully changed."
msgstr ""

msgid ""
"``template_name``: The full name of a template to display the view. Defaults "
"to :file:`registration/password_reset_complete.html`."
msgstr ""

msgid "Helper functions"
msgstr ""

msgid ""
"Redirects to the login page, and then back to another URL after a successful "
"login."
msgstr ""

msgid "**Required arguments:**"
msgstr ""

msgid "``next``: The URL to redirect to after a successful login."
msgstr ""

msgid ""
"``redirect_field_name``: The name of a ``GET`` field containing the URL to "
"redirect to after log out. Overrides ``next`` if the given ``GET`` parameter "
"is passed."
msgstr ""

msgid "Built-in forms"
msgstr ""

msgid ""
"If you don't want to use the built-in views, but want the convenience of not "
"having to write forms for this functionality, the authentication system "
"provides several built-in forms located in :mod:`django.contrib.auth.forms`:"
msgstr ""

msgid ""
"The built-in authentication forms make certain assumptions about the user "
"model that they are working with. If you're using a :ref:`custom user model "
"<auth-custom-user>`, it may be necessary to define your own forms for the "
"authentication system. For more information, refer to the documentation "
"about :ref:`using the built-in authentication forms with custom user models "
"<custom-users-and-the-built-in-auth-forms>`."
msgstr ""

msgid "A form used in the admin interface to change a user's password."
msgstr ""

msgid "Takes the ``user`` as the first positional argument."
msgstr ""

msgid "A form for logging a user in."
msgstr ""

msgid ""
"Takes ``request`` as its first positional argument, which is stored on the "
"form instance for use by sub-classes."
msgstr ""

msgid ""
"By default, ``AuthenticationForm`` rejects users whose ``is_active`` flag is "
"set to ``False``. You may override this behavior with a custom policy to "
"determine which users can log in. Do this with a custom form that subclasses "
"``AuthenticationForm`` and overrides the ``confirm_login_allowed()`` method. "
"This method should raise a :exc:`~django.core.exceptions.ValidationError` if "
"the given user may not log in."
msgstr ""

msgid ""
"For example, to allow all users to log in regardless of \"active\" status::"
msgstr ""

msgid ""
"(In this case, you'll also need to use an authentication backend that allows "
"inactive users, such as :class:`~django.contrib.auth.backends."
"AllowAllUsersModelBackend`.)"
msgstr ""

msgid "Or to allow only some active users to log in::"
msgstr ""

msgid "A form for allowing a user to change their password."
msgstr ""

msgid ""
"A form for generating and emailing a one-time use link to reset a user's "
"password."
msgstr ""

msgid ""
"Uses the arguments to send an ``EmailMultiAlternatives``. Can be overridden "
"to customize how the email is sent to the user."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "the template for the subject."
msgstr ""

msgid "the template for the email body."
msgstr ""

msgid ""
"context passed to the ``subject_template``, ``email_template``, and "
"``html_email_template`` (if it is not ``None``)."
msgstr ""

msgid "the sender's email."
msgstr ""

msgid "the email of the requester."
msgstr ""

msgid ""
"the template for the HTML body; defaults to ``None``, in which case a plain "
"text email is sent."
msgstr ""

msgid ""
"By default, ``save()`` populates the ``context`` with the same variables "
"that :class:`~django.contrib.auth.views.PasswordResetView` passes to its "
"email context."
msgstr ""

msgid ""
"A form that lets a user change their password without entering the old "
"password."
msgstr ""

msgid ""
"A form used in the admin interface to change a user's information and "
"permissions."
msgstr ""

msgid "A :class:`~django.forms.ModelForm` for creating a new user."
msgstr ""

msgid ""
"It has three fields: ``username`` (from the user model), ``password1``, and "
"``password2``. It verifies that ``password1`` and ``password2`` match, "
"validates the password using :func:`~django.contrib.auth.password_validation."
"validate_password`, and sets the user's password using :meth:`~django."
"contrib.auth.models.User.set_password()`."
msgstr ""

msgid "Authentication data in templates"
msgstr ""

msgid ""
"The currently logged-in user and their permissions are made available in "
"the :doc:`template context </ref/templates/api>` when you use :class:"
"`~django.template.RequestContext`."
msgstr ""

msgid "Technicality"
msgstr ""

msgid ""
"Technically, these variables are only made available in the template context "
"if you use :class:`~django.template.RequestContext` and the ``'django."
"contrib.auth.context_processors.auth'`` context processor is enabled. It is "
"in the default generated settings file. For more, see the :ref:"
"`RequestContext docs <subclassing-context-requestcontext>`."
msgstr ""

msgid "Users"
msgstr ""

msgid ""
"When rendering a template :class:`~django.template.RequestContext`, the "
"currently logged-in user, either a  :class:`~django.contrib.auth.models."
"User` instance or an :class:`~django.contrib.auth.models.AnonymousUser` "
"instance, is stored in the template variable ``{{ user }}``:"
msgstr ""

msgid ""
"This template context variable is not available if a ``RequestContext`` is "
"not being used."
msgstr ""

msgid "Permissions"
msgstr "权限"

msgid ""
"The currently logged-in user's permissions are stored in the template "
"variable ``{{ perms }}``. This is an instance of ``django.contrib.auth."
"context_processors.PermWrapper``, which is a template-friendly proxy of "
"permissions."
msgstr ""

msgid ""
"Evaluating a single-attribute lookup of ``{{ perms }}`` as a boolean is a "
"proxy to :meth:`User.has_module_perms() <django.contrib.auth.models.User."
"has_module_perms>`. For example, to check if the logged-in user has any "
"permissions in the ``foo`` app::"
msgstr ""

msgid ""
"Evaluating a two-level-attribute lookup as a boolean is a proxy to :meth:"
"`User.has_perm() <django.contrib.auth.models.User.has_perm>`. For example, "
"to check if the logged-in user has the permission ``foo.can_vote``::"
msgstr ""

msgid "Here's a more complete example of checking permissions in a template:"
msgstr "以下是一个在模板中检查权限的更完整的示例："

msgid ""
"It is possible to also look permissions up by ``{% if in %}`` statements. "
"For example:"
msgstr ""

msgid "Managing users in the admin"
msgstr ""

msgid ""
"When you have both ``django.contrib.admin`` and ``django.contrib.auth`` "
"installed, the admin provides a convenient way to view and manage users, "
"groups, and permissions. Users can be created and deleted like any Django "
"model. Groups can be created, and permissions can be assigned to users or "
"groups. A log of user edits to models made within the admin is also stored "
"and displayed."
msgstr ""

msgid ""
"You should see a link to \"Users\" in the \"Auth\" section of the main admin "
"index page. The \"Add user\" admin page is different than standard admin "
"pages in that it requires you to choose a username and password before "
"allowing you to edit the rest of the user's fields."
msgstr ""

msgid ""
"Also note: if you want a user account to be able to create users using the "
"Django admin site, you'll need to give them permission to add users *and* "
"change users (i.e., the \"Add user\" and \"Change user\" permissions). If an "
"account has permission to add users but not to change them, that account "
"won't be able to add users. Why? Because if you have permission to add "
"users, you have the power to create superusers, which can then, in turn, "
"change other users. So Django requires add *and* change permissions as a "
"slight security measure."
msgstr ""

msgid ""
"Be thoughtful about how you allow users to manage permissions. If you give a "
"non-superuser the ability to edit users, this is ultimately the same as "
"giving them superuser status because they will be able to elevate "
"permissions of users including themselves!"
msgstr ""

msgid ""
"User passwords are not displayed in the admin (nor stored in the database), "
"but the :doc:`password storage details </topics/auth/passwords>` are "
"displayed. Included in the display of this information is a link to a "
"password change form that allows admins to change user passwords."
msgstr ""

msgid "User authentication in Django"
msgstr "Django中的用户认证"

msgid ""
"Django comes with a user authentication system. It handles user accounts, "
"groups, permissions and cookie-based user sessions. This section of the "
"documentation explains how the default implementation works out of the box, "
"as well as how to :doc:`extend and customize </topics/auth/customizing>` it "
"to suit your project's needs."
msgstr ""

msgid "Overview"
msgstr "概况"

msgid ""
"The Django authentication system handles both authentication and "
"authorization. Briefly, authentication verifies a user is who they claim to "
"be, and authorization determines what an authenticated user is allowed to "
"do. Here the term authentication is used to refer to both tasks."
msgstr ""

msgid "The auth system consists of:"
msgstr "认证系统由以下部分组成："

msgid ""
"Permissions: Binary (yes/no) flags designating whether a user may perform a "
"certain task."
msgstr ""

msgid ""
"Groups: A generic way of applying labels and permissions to more than one "
"user."
msgstr ""

msgid "A configurable password hashing system"
msgstr ""

msgid "Forms and view tools for logging in users, or restricting content"
msgstr ""

msgid "A pluggable backend system"
msgstr ""

msgid ""
"The authentication system in Django aims to be very generic and doesn't "
"provide some features commonly found in web authentication systems. "
"Solutions for some of these common problems have been implemented in third-"
"party packages:"
msgstr ""

msgid "Password strength checking"
msgstr "密码强度检查"

msgid "Throttling of login attempts"
msgstr "限制登录尝试"

msgid "Authentication against third-parties (OAuth, for example)"
msgstr "针对第三方的身份验证（例如OAuth）"

msgid "Object-level permissions"
msgstr ""

msgid "Installation"
msgstr "安装"

msgid ""
"Authentication support is bundled as a Django contrib module in ``django."
"contrib.auth``. By default, the required configuration is already included "
"in the :file:`settings.py` generated by :djadmin:`django-admin startproject "
"<startproject>`, these consist of two items listed in your :setting:"
"`INSTALLED_APPS` setting:"
msgstr ""

msgid ""
"``'django.contrib.auth'`` contains the core of the authentication framework, "
"and its default models."
msgstr ""

msgid ""
"``'django.contrib.contenttypes'`` is the Django :doc:`content type system </"
"ref/contrib/contenttypes>`, which allows permissions to be associated with "
"models you create."
msgstr ""

msgid "and these items in your :setting:`MIDDLEWARE` setting:"
msgstr ""

msgid ""
":class:`~django.contrib.sessions.middleware.SessionMiddleware` manages :doc:"
"`sessions </topics/http/sessions>` across requests."
msgstr ""

msgid ""
":class:`~django.contrib.auth.middleware.AuthenticationMiddleware` associates "
"users with requests using sessions."
msgstr ""

msgid ""
"With these settings in place, running the command ``manage.py migrate`` "
"creates the necessary database tables for auth related models and "
"permissions for any models defined in your installed apps."
msgstr ""
"有了这些设置，运行命令 ``manage.py migrate`` 为auth相关模型创建必要的数据表，"
"并为已安装应用中定义的任何模型创建许可。"

msgid "Usage"
msgstr ""

msgid ":doc:`Using Django's default implementation <default>`"
msgstr ""

msgid ":ref:`Working with User objects <user-objects>`"
msgstr ""

msgid ":ref:`Permissions and authorization <topic-authorization>`"
msgstr ""

msgid ":ref:`Authentication in web requests <auth-web-requests>`"
msgstr ""

msgid ":ref:`Managing users in the admin <auth-admin>`"
msgstr ""

msgid ":doc:`API reference for the default implementation </ref/contrib/auth>`"
msgstr ""

msgid ":doc:`Customizing Users and authentication <customizing>`"
msgstr ""

msgid ":doc:`Password management in Django <passwords>`"
msgstr ""

msgid "Password management in Django"
msgstr "Django中的密码管理"

msgid ""
"Password management is something that should generally not be reinvented "
"unnecessarily, and Django endeavors to provide a secure and flexible set of "
"tools for managing user passwords. This document describes how Django stores "
"passwords, how the storage hashing can be configured, and some utilities to "
"work with hashed passwords."
msgstr ""

msgid ""
"Even though users may use strong passwords, attackers might be able to "
"eavesdrop on their connections. Use :ref:`HTTPS <security-recommendation-"
"ssl>` to avoid sending passwords (or any other sensitive data) over plain "
"HTTP connections because they will be vulnerable to password sniffing."
msgstr ""

msgid "How Django stores passwords"
msgstr ""

msgid ""
"Django provides a flexible password storage system and uses PBKDF2 by "
"default."
msgstr ""

msgid ""
"The :attr:`~django.contrib.auth.models.User.password` attribute of a :class:"
"`~django.contrib.auth.models.User` object is a string in this format::"
msgstr ""

msgid ""
"Those are the components used for storing a User's password, separated by "
"the dollar-sign character and consist of: the hashing algorithm, the number "
"of algorithm iterations (work factor), the random salt, and the resulting "
"password hash.  The algorithm is one of a number of one-way hashing or "
"password storage algorithms Django can use; see below. Iterations describe "
"the number of times the algorithm is run over the hash. Salt is the random "
"seed used and the hash is the result of the one-way function."
msgstr ""

msgid ""
"By default, Django uses the PBKDF2_ algorithm with a SHA256 hash, a password "
"stretching mechanism recommended by NIST_. This should be sufficient for "
"most users: it's quite secure, requiring massive amounts of computing time "
"to break."
msgstr ""

msgid ""
"However, depending on your requirements, you may choose a different "
"algorithm, or even use a custom algorithm to match your specific security "
"situation. Again, most users shouldn't need to do this -- if you're not "
"sure, you probably don't.  If you do, please read on:"
msgstr ""

msgid ""
"Django chooses the algorithm to use by consulting the :setting:"
"`PASSWORD_HASHERS` setting. This is a list of hashing algorithm classes that "
"this Django installation supports. The first entry in this list (that is, "
"``settings.PASSWORD_HASHERS[0]``) will be used to store passwords, and all "
"the other entries are valid hashers that can be used to check existing "
"passwords.  This means that if you want to use a different algorithm, you'll "
"need to modify :setting:`PASSWORD_HASHERS` to list your preferred algorithm "
"first in the list."
msgstr ""

msgid "The default for :setting:`PASSWORD_HASHERS` is::"
msgstr ""

msgid ""
"This means that Django will use PBKDF2_ to store all passwords but will "
"support checking passwords stored with PBKDF2SHA1, argon2_, and bcrypt_."
msgstr ""

msgid ""
"The next few sections describe a couple of common ways advanced users may "
"want to modify this setting."
msgstr ""

msgid "Using Argon2 with Django"
msgstr ""

msgid ""
"Argon2_ is the winner of the 2015 `Password Hashing Competition`_, a "
"community organized open competition to select a next generation hashing "
"algorithm. It's designed not to be easier to compute on custom hardware than "
"it is to compute on an ordinary CPU."
msgstr ""

msgid ""
"Argon2_ is not the default for Django because it requires a third-party "
"library. The Password Hashing Competition panel, however, recommends "
"immediate use of Argon2 rather than the other algorithms supported by Django."
msgstr ""

msgid "To use Argon2 as your default storage algorithm, do the following:"
msgstr ""

msgid ""
"Install the `argon2-cffi library`_.  This can be done by running ``pip "
"install django[argon2]``, which is equivalent to ``pip install argon2-cffi`` "
"(along with any version requirement from Django's ``setup.py``)."
msgstr ""

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``Argon2PasswordHasher`` first. "
"That is, in your settings file, you'd put::"
msgstr ""

msgid ""
"Keep and/or add any entries in this list if you need Django to :ref:`upgrade "
"passwords <password-upgrades>`."
msgstr ""

msgid "Using ``bcrypt`` with Django"
msgstr ""

msgid ""
"Bcrypt_ is a popular password storage algorithm that's specifically designed "
"for long-term password storage. It's not the default used by Django since it "
"requires the use of third-party libraries, but since many people may want to "
"use it Django supports bcrypt with minimal effort."
msgstr ""

msgid "To use Bcrypt as your default storage algorithm, do the following:"
msgstr ""

msgid ""
"Install the `bcrypt library`_. This can be done by running ``pip install "
"django[bcrypt]``, which is equivalent to  ``pip install bcrypt`` (along with "
"any version requirement from Django's ``setup.py``)."
msgstr ""

msgid ""
"Modify :setting:`PASSWORD_HASHERS` to list ``BCryptSHA256PasswordHasher`` "
"first. That is, in your settings file, you'd put::"
msgstr ""

msgid ""
"That's it -- now your Django install will use Bcrypt as the default storage "
"algorithm."
msgstr ""

msgid "Increasing the work factor"
msgstr ""

msgid "PBKDF2 and bcrypt"
msgstr ""

msgid ""
"The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of "
"hashing. This deliberately slows down attackers, making attacks against "
"hashed passwords harder. However, as computing power increases, the number "
"of iterations needs to be increased. We've chosen a reasonable default (and "
"will increase it with each release of Django), but you may wish to tune it "
"up or down, depending on your security needs and available processing power. "
"To do so, you'll subclass the appropriate algorithm and override the "
"``iterations`` parameters. For example, to increase the number of iterations "
"used by the default PBKDF2 algorithm:"
msgstr ""

msgid ""
"Create a subclass of ``django.contrib.auth.hashers.PBKDF2PasswordHasher``::"
msgstr ""

msgid ""
"Save this somewhere in your project. For example, you might put this in a "
"file like ``myproject/hashers.py``."
msgstr ""

msgid "Add your new hasher as the first entry in :setting:`PASSWORD_HASHERS`::"
msgstr ""

msgid ""
"That's it -- now your Django install will use more iterations when it stores "
"passwords using PBKDF2."
msgstr ""

msgid "Argon2"
msgstr ""

msgid "Argon2 has three attributes that can be customized:"
msgstr ""

msgid "``time_cost`` controls the number of iterations within the hash."
msgstr ""

msgid ""
"``memory_cost`` controls the size of memory that must be used during the "
"computation of the hash."
msgstr ""

msgid ""
"``parallelism`` controls how many CPUs the computation of the hash can be "
"parallelized on."
msgstr ""

msgid ""
"The default values of these attributes are probably fine for you. If you "
"determine that the password hash is too fast or too slow, you can tweak it "
"as follows:"
msgstr ""

msgid ""
"Choose ``parallelism`` to be the number of threads you can spare computing "
"the hash."
msgstr ""

msgid "Choose ``memory_cost`` to be the KiB of memory you can spare."
msgstr ""

msgid ""
"Adjust ``time_cost`` and measure the time hashing a password takes. Pick a "
"``time_cost`` that takes an acceptable time for you. If ``time_cost`` set to "
"1 is unacceptably slow, lower ``memory_cost``."
msgstr ""

msgid "``memory_cost`` interpretation"
msgstr ""

msgid ""
"The argon2 command-line utility and some other libraries interpret the "
"``memory_cost`` parameter differently from the value that Django uses. The "
"conversion is given by ``memory_cost == 2 ** memory_cost_commandline``."
msgstr ""

msgid "Password upgrading"
msgstr ""

msgid ""
"When users log in, if their passwords are stored with anything other than "
"the preferred algorithm, Django will automatically upgrade the algorithm to "
"the preferred one. This means that old installs of Django will get "
"automatically more secure as users log in, and it also means that you can "
"switch to new (and better) storage algorithms as they get invented."
msgstr ""

msgid ""
"However, Django can only upgrade passwords that use algorithms mentioned in :"
"setting:`PASSWORD_HASHERS`, so as you upgrade to new systems you should make "
"sure never to *remove* entries from this list. If you do, users using "
"unmentioned algorithms won't be able to upgrade. Hashed passwords will be "
"updated when increasing (or decreasing) the number of PBKDF2 iterations or "
"bcrypt rounds."
msgstr ""

msgid ""
"Be aware that if all the passwords in your database aren't encoded in the "
"default hasher's algorithm, you may be vulnerable to a user enumeration "
"timing attack due to a difference between the duration of a login request "
"for a user with a password encoded in a non-default algorithm and the "
"duration of a login request for a nonexistent user (which runs the default "
"hasher). You may be able to mitigate this by :ref:`upgrading older password "
"hashes <wrapping-password-hashers>`."
msgstr ""

msgid "Password upgrading without requiring a login"
msgstr ""

msgid ""
"If you have an existing database with an older, weak hash such as MD5 or "
"SHA1, you might want to upgrade those hashes yourself instead of waiting for "
"the upgrade to happen when a user logs in (which may never happen if a user "
"doesn't return to your site). In this case, you can use a \"wrapped\" "
"password hasher."
msgstr ""

msgid ""
"For this example, we'll migrate a collection of SHA1 hashes to use "
"PBKDF2(SHA1(password)) and add the corresponding password hasher for "
"checking if a user entered the correct password on login. We assume we're "
"using the built-in ``User`` model and that our project has an ``accounts`` "
"app. You can modify the pattern to work with any algorithm or with a custom "
"user model."
msgstr ""

msgid "First, we'll add the custom hasher:"
msgstr ""

msgid "accounts/hashers.py"
msgstr ""

msgid "The data migration might look something like:"
msgstr ""

msgid "accounts/migrations/0002_migrate_sha1_passwords.py"
msgstr ""

msgid ""
"Be aware that this migration will take on the order of several minutes for "
"several thousand users, depending on the speed of your hardware."
msgstr ""

msgid "Finally, we'll add a :setting:`PASSWORD_HASHERS` setting:"
msgstr ""

msgid "mysite/settings.py"
msgstr "mysite/settings.py"

msgid "Include any other hashers that your site uses in this list."
msgstr ""

msgid "Included hashers"
msgstr ""

msgid "The full list of hashers included in Django is::"
msgstr ""

msgid "The corresponding algorithm names are:"
msgstr ""

msgid "``pbkdf2_sha256``"
msgstr "``pbkdf2_sha256``"

msgid "``pbkdf2_sha1``"
msgstr "``pbkdf2_sha1``"

msgid "``argon2``"
msgstr "``argon2``"

msgid "``bcrypt_sha256``"
msgstr "``bcrypt_sha256``"

msgid "``bcrypt``"
msgstr "``bcrypt``"

msgid "``sha1``"
msgstr "``sha1``"

msgid "``md5``"
msgstr "``md5``"

msgid "``unsalted_sha1``"
msgstr "``unsalted_sha1``"

msgid "``unsalted_md5``"
msgstr "``unsalted_md5``"

msgid "``crypt``"
msgstr "``crypt``"

msgid "Writing your own hasher"
msgstr "编写你自己的哈希"

msgid ""
"If you write your own password hasher that contains a work factor such as a "
"number of iterations, you should implement a ``harden_runtime(self, "
"password, encoded)`` method to bridge the runtime gap between the work "
"factor supplied in the ``encoded`` password and the default work factor of "
"the hasher. This prevents a user enumeration timing attack due to  "
"difference between a login request for a user with a password encoded in an "
"older number of iterations and a nonexistent user (which runs the default "
"hasher's default number of iterations)."
msgstr ""

msgid ""
"Taking PBKDF2 as example, if ``encoded`` contains 20,000 iterations and the "
"hasher's default ``iterations`` is 30,000, the method should run "
"``password`` through another 10,000 iterations of PBKDF2."
msgstr ""

msgid ""
"If your hasher doesn't have a work factor, implement the method as a no-op "
"(``pass``)."
msgstr ""

msgid "Manually managing a user's password"
msgstr ""

msgid ""
"The :mod:`django.contrib.auth.hashers` module provides a set of functions to "
"create and validate hashed passwords. You can use them independently from "
"the ``User`` model."
msgstr ""

msgid ""
"If you'd like to manually authenticate a user by comparing a plain-text "
"password to the hashed password in the database, use the convenience "
"function :func:`check_password`. It takes two arguments: the plain-text "
"password to check, and the full value of a user's ``password`` field in the "
"database to check against, and returns ``True`` if they match, ``False`` "
"otherwise."
msgstr ""

msgid ""
"Creates a hashed password in the format used by this application. It takes "
"one mandatory argument: the password in plain-text. Optionally, you can "
"provide a salt and a hashing algorithm to use, if you don't want to use the "
"defaults (first entry of ``PASSWORD_HASHERS`` setting). See :ref:`auth-"
"included-hashers` for the algorithm name of each hasher. If the password "
"argument is ``None``, an unusable password is returned (one that will never "
"be accepted by :func:`check_password`)."
msgstr ""

msgid ""
"Returns ``False`` if the password is a result of :meth:`.User."
"set_unusable_password`."
msgstr ""

msgid ""
"In older versions, this also returns ``False`` if the password is ``None`` "
"or an empty string, or if the password uses a hasher that's not in the :"
"setting:`PASSWORD_HASHERS` setting. That behavior is considered a bug as it "
"prevents users with such passwords from requesting a password reset."
msgstr ""

msgid "Password validation"
msgstr ""

msgid ""
"Users often choose poor passwords. To help mitigate this problem, Django "
"offers pluggable password validation. You can configure multiple password "
"validators at the same time. A few validators are included in Django, but "
"it's simple to write your own as well."
msgstr ""

msgid ""
"Each password validator must provide a help text to explain the requirements "
"to the user, validate a given password and return an error message if it "
"does not meet the requirements, and optionally receive passwords that have "
"been set. Validators can also have optional settings to fine tune their "
"behavior."
msgstr ""

msgid ""
"Validation is controlled by the :setting:`AUTH_PASSWORD_VALIDATORS` setting. "
"The default for the setting is an empty list, which means no validators are "
"applied. In new projects created with the default :djadmin:`startproject` "
"template, a simple set of validators is enabled."
msgstr ""

msgid ""
"By default, validators are used in the forms to reset or change passwords "
"and in the :djadmin:`createsuperuser` and :djadmin:`changepassword` "
"management commands. Validators aren't applied at the model level, for "
"example in ``User.objects.create_user()`` and ``create_superuser()``, "
"because we assume that developers, not users, interact with Django at that "
"level and also because model validation doesn't automatically run as part of "
"creating models."
msgstr ""

msgid ""
"Password validation can prevent the use of many types of weak passwords. "
"However, the fact that a password passes all the validators doesn't "
"guarantee that it is a strong password. There are many factors that can "
"weaken a password that are not detectable by even the most advanced password "
"validators."
msgstr ""

msgid "Enabling password validation"
msgstr ""

msgid ""
"Password validation is configured in the :setting:`AUTH_PASSWORD_VALIDATORS` "
"setting::"
msgstr ""

msgid "This example enables all four included validators:"
msgstr ""

msgid ""
"``UserAttributeSimilarityValidator``, which checks the similarity between "
"the password and a set of attributes of the user."
msgstr ""

msgid ""
"``MinimumLengthValidator``, which simply checks whether the password meets a "
"minimum length. This validator is configured with a custom option: it now "
"requires the minimum length to be nine characters, instead of the default "
"eight."
msgstr ""

msgid ""
"``CommonPasswordValidator``, which checks whether the password occurs in a "
"list of common passwords. By default, it compares to an included list of "
"20,000 common passwords."
msgstr ""

msgid ""
"``NumericPasswordValidator``, which checks whether the password isn't "
"entirely numeric."
msgstr ""

msgid ""
"For ``UserAttributeSimilarityValidator`` and ``CommonPasswordValidator``, "
"we're simply using the default settings in this example. "
"``NumericPasswordValidator`` has no settings."
msgstr ""

msgid ""
"The help texts and any errors from password validators are always returned "
"in the order they are listed in :setting:`AUTH_PASSWORD_VALIDATORS`."
msgstr ""

msgid "Included validators"
msgstr ""

msgid "Django includes four validators:"
msgstr ""

msgid ""
"Validates whether the password meets a minimum length. The minimum length "
"can be customized with the ``min_length`` parameter."
msgstr ""

msgid ""
"Validates whether the password is sufficiently different from certain "
"attributes of the user."
msgstr ""

msgid ""
"The ``user_attributes`` parameter should be an iterable of names of user "
"attributes to compare to. If this argument is not provided, the default is "
"used: ``'username', 'first_name', 'last_name', 'email'``. Attributes that "
"don't exist are ignored."
msgstr ""

msgid ""
"The minimum similarity of a rejected password can be set on a scale of 0 to "
"1 with the ``max_similarity`` parameter. A setting of 0 rejects all "
"passwords, whereas a setting of 1 rejects only passwords that are identical "
"to an attribute's value."
msgstr ""

msgid ""
"Validates whether the password is not a common password. This converts the "
"password to lowercase (to do a case-insensitive comparison) and checks it "
"against a list of 20,000 common password created by `Royce Williams <https://"
"gist.github.com/roycewilliams/281ce539915a947a23db17137d91aeb7>`_."
msgstr ""

msgid ""
"The ``password_list_path`` can be set to the path of a custom file of common "
"passwords. This file should contain one lowercase password per line and may "
"be plain text or gzipped."
msgstr ""

msgid "In older versions, a list of 1,000 common passwords is used."
msgstr ""

msgid "Validates whether the password is not entirely numeric."
msgstr ""

msgid "Integrating validation"
msgstr ""

msgid ""
"There are a few functions in ``django.contrib.auth.password_validation`` "
"that you can call from your own forms or other code to integrate password "
"validation. This can be useful if you use custom forms for password setting, "
"or if you have API calls that allow passwords to be set, for example."
msgstr ""

msgid ""
"Validates a password. If all validators find the password valid, returns "
"``None``. If one or more validators reject the password, raises a :exc:"
"`~django.core.exceptions.ValidationError` with all the error messages from "
"the validators."
msgstr ""

msgid ""
"The ``user`` object is optional: if it's not provided, some validators may "
"not be able to perform any validation and will accept any password."
msgstr ""

msgid ""
"Informs all validators that the password has been changed. This can be used "
"by validators such as one that prevents password reuse. This should be "
"called once the password has been successfully changed."
msgstr ""

msgid ""
"For subclasses of :class:`~django.contrib.auth.models.AbstractBaseUser`, the "
"password field will be marked as \"dirty\" when calling :meth:`~django."
"contrib.auth.models.AbstractBaseUser.set_password` which triggers a call to "
"``password_changed()`` after the user is saved."
msgstr ""

msgid ""
"Returns a list of the help texts of all validators. These explain the "
"password requirements to the user."
msgstr ""

msgid ""
"Returns an HTML string with all help texts in an ``<ul>``. This is helpful "
"when adding password validation to forms, as you can pass the output "
"directly to the ``help_text`` parameter of a form field."
msgstr ""

msgid ""
"Returns a set of validator objects based on the ``validator_config`` "
"parameter. By default, all functions use the validators defined in :setting:"
"`AUTH_PASSWORD_VALIDATORS`, but by calling this function with an alternate "
"set of validators and then passing the result into the "
"``password_validators`` parameter of the other functions, your custom set of "
"validators will be used instead. This is useful when you have a typical set "
"of validators to use for most scenarios, but also have a special situation "
"that requires a custom set. If you always use the same set of validators, "
"there is no need to use this function, as the configuration from :setting:"
"`AUTH_PASSWORD_VALIDATORS` is used by default."
msgstr ""

msgid ""
"The structure of ``validator_config`` is identical to the structure of :"
"setting:`AUTH_PASSWORD_VALIDATORS`. The return value of this function can be "
"passed into the ``password_validators`` parameter of the functions listed "
"above."
msgstr ""

msgid ""
"Note that where the password is passed to one of these functions, this "
"should always be the clear text password - not a hashed password."
msgstr ""

msgid "Writing your own validator"
msgstr ""

msgid ""
"If Django's built-in validators are not sufficient, you can write your own "
"password validators. Validators are fairly simple classes. They must "
"implement two methods:"
msgstr ""

msgid ""
"``validate(self, password, user=None)``: validate a password. Return "
"``None`` if the password is valid, or raise a :exc:`~django.core.exceptions."
"ValidationError` with an error message if the password is not valid. You "
"must be able to deal with ``user`` being ``None`` - if that means your "
"validator can't run, simply return ``None`` for no error."
msgstr ""

msgid ""
"``get_help_text()``: provide a help text to explain the requirements to the "
"user."
msgstr ""

msgid ""
"Any items in the ``OPTIONS`` in :setting:`AUTH_PASSWORD_VALIDATORS` for your "
"validator will be passed to the constructor. All constructor arguments "
"should have a default value."
msgstr ""

msgid "Here's a basic example of a validator, with one optional setting::"
msgstr ""

msgid ""
"You can also implement ``password_changed(password, user=None``), which will "
"be called after a successful password change. That can be used to prevent "
"password reuse, for example. However, if you decide to store a user's "
"previous passwords, you should never do so in clear text."
msgstr ""

msgid "Django's cache framework"
msgstr ""

msgid ""
"A fundamental trade-off in dynamic websites is, well, they're dynamic. Each "
"time a user requests a page, the Web server makes all sorts of calculations "
"-- from database queries to template rendering to business logic -- to "
"create the page that your site's visitor sees. This is a lot more expensive, "
"from a processing-overhead perspective, than your standard read-a-file-off-"
"the-filesystem server arrangement."
msgstr ""

msgid ""
"For most Web applications, this overhead isn't a big deal. Most Web "
"applications aren't ``washingtonpost.com`` or ``slashdot.org``; they're "
"simply small- to medium-sized sites with so-so traffic. But for medium- to "
"high-traffic sites, it's essential to cut as much overhead as possible."
msgstr ""

msgid "That's where caching comes in."
msgstr ""

msgid ""
"To cache something is to save the result of an expensive calculation so that "
"you don't have to perform the calculation next time. Here's some pseudocode "
"explaining how this would work for a dynamically generated Web page::"
msgstr ""

msgid ""
"Django comes with a robust cache system that lets you save dynamic pages so "
"they don't have to be calculated for each request. For convenience, Django "
"offers different levels of cache granularity: You can cache the output of "
"specific views, you can cache only the pieces that are difficult to produce, "
"or you can cache your entire site."
msgstr ""

msgid ""
"Django also works well with \"downstream\" caches, such as `Squid <http://"
"www.squid-cache.org>`_ and browser-based caches. These are the types of "
"caches that you don't directly control but to which you can provide hints "
"(via HTTP headers) about which parts of your site should be cached, and how."
msgstr ""

msgid ""
"The :ref:`Cache Framework design philosophy <cache-design-philosophy>` "
"explains a few of the design decisions of the framework."
msgstr ""

msgid "Setting up the cache"
msgstr ""

msgid ""
"The cache system requires a small amount of setup. Namely, you have to tell "
"it where your cached data should live -- whether in a database, on the "
"filesystem or directly in memory. This is an important decision that affects "
"your cache's performance; yes, some cache types are faster than others."
msgstr ""

msgid ""
"Your cache preference goes in the :setting:`CACHES` setting in your settings "
"file. Here's an explanation of all available values for :setting:`CACHES`."
msgstr ""

msgid "Memcached"
msgstr ""

msgid ""
"The fastest, most efficient type of cache supported natively by Django, "
"Memcached__ is an entirely memory-based cache server, originally developed "
"to handle high loads at LiveJournal.com and subsequently open-sourced by "
"Danga Interactive. It is used by sites such as Facebook and Wikipedia to "
"reduce database access and dramatically increase site performance."
msgstr ""

msgid ""
"Memcached runs as a daemon and is allotted a specified amount of RAM. All it "
"does is provide a fast interface for adding, retrieving and deleting data in "
"the cache. All data is stored directly in memory, so there's no overhead of "
"database or filesystem usage."
msgstr ""

msgid ""
"After installing Memcached itself, you'll need to install a Memcached "
"binding. There are several Python Memcached bindings available; the two most "
"common are `python-memcached`_ and `pylibmc`_."
msgstr ""

msgid "To use Memcached with Django:"
msgstr ""

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends."
"memcached.MemcachedCache`` or ``django.core.cache.backends.memcached."
"PyLibMCCache`` (depending on your chosen memcached binding)"
msgstr ""

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``ip:port`` values, where "
"``ip`` is the IP address of the Memcached daemon and ``port`` is the port on "
"which Memcached is running, or to a ``unix:path`` value, where ``path`` is "
"the path to a Memcached Unix socket file."
msgstr ""

msgid ""
"In this example, Memcached is running on localhost (127.0.0.1) port 11211, "
"using the ``python-memcached`` binding::"
msgstr ""

msgid ""
"In this example, Memcached is available through a local Unix socket file :"
"file:`/tmp/memcached.sock` using the ``python-memcached`` binding::"
msgstr ""

msgid ""
"When using the ``pylibmc`` binding, do not include the ``unix:/`` prefix::"
msgstr ""

msgid ""
"One excellent feature of Memcached is its ability to share a cache over "
"multiple servers. This means you can run Memcached daemons on multiple "
"machines, and the program will treat the group of machines as a *single* "
"cache, without the need to duplicate cache values on each machine. To take "
"advantage of this feature, include all server addresses in :setting:"
"`LOCATION <CACHES-LOCATION>`, either as a semicolon or comma delimited "
"string, or as a list."
msgstr ""

msgid ""
"In this example, the cache is shared over Memcached instances running on IP "
"address 172.19.26.240 and 172.19.26.242, both on port 11211::"
msgstr ""

msgid ""
"In the following example, the cache is shared over Memcached instances "
"running on the IP addresses 172.19.26.240 (port 11211), 172.19.26.242 (port "
"11212), and 172.19.26.244 (port 11213)::"
msgstr ""

msgid ""
"A final point about Memcached is that memory-based caching has a "
"disadvantage: because the cached data is stored in memory, the data will be "
"lost if your server crashes. Clearly, memory isn't intended for permanent "
"data storage, so don't rely on memory-based caching as your only data "
"storage. Without a doubt, *none* of the Django caching backends should be "
"used for permanent storage -- they're all intended to be solutions for "
"caching, not storage -- but we point this out here because memory-based "
"caching is particularly temporary."
msgstr ""

msgid "Database caching"
msgstr ""

msgid ""
"Django can store its cached data in your database. This works best if you've "
"got a fast, well-indexed database server."
msgstr ""

msgid "To use a database table as your cache backend:"
msgstr ""

msgid ""
"Set :setting:`BACKEND <CACHES-BACKEND>` to ``django.core.cache.backends.db."
"DatabaseCache``"
msgstr ""

msgid ""
"Set :setting:`LOCATION <CACHES-LOCATION>` to ``tablename``, the name of the "
"database table. This name can be whatever you want, as long as it's a valid "
"table name that's not already being used in your database."
msgstr ""

msgid "In this example, the cache table's name is ``my_cache_table``::"
msgstr ""

msgid "Creating the cache table"
msgstr ""

msgid ""
"Before using the database cache, you must create the cache table with this "
"command::"
msgstr ""

msgid ""
"This creates a table in your database that is in the proper format that "
"Django's database-cache system expects. The name of the table is taken from :"
"setting:`LOCATION <CACHES-LOCATION>`."
msgstr ""

msgid ""
"If you are using multiple database caches, :djadmin:`createcachetable` "
"creates one table for each cache."
msgstr ""

msgid ""
"If you are using multiple databases, :djadmin:`createcachetable` observes "
"the ``allow_migrate()`` method of your database routers (see below)."
msgstr ""

msgid ""
"Like :djadmin:`migrate`, :djadmin:`createcachetable` won't touch an existing "
"table. It will only create missing tables."
msgstr ""

msgid ""
"To print the SQL that would be run, rather than run it, use the :option:"
"`createcachetable --dry-run` option."
msgstr ""

msgid "Multiple databases"
msgstr ""

msgid ""
"If you use database caching with multiple databases, you'll also need to set "
"up routing instructions for your database cache table. For the purposes of "
"routing, the database cache table appears as a model named ``CacheEntry``, "
"in an application named ``django_cache``. This model won't appear in the "
"models cache, but the model details can be used for routing purposes."
msgstr ""

msgid ""
"For example, the following router would direct all cache read operations to "
"``cache_replica``, and all write operations to ``cache_primary``. The cache "
"table will only be synchronized onto ``cache_primary``::"
msgstr ""

msgid ""
"If you don't specify routing directions for the database cache model, the "
"cache backend will use the ``default`` database."
msgstr ""

msgid ""
"Of course, if you don't use the database cache backend, you don't need to "
"worry about providing routing instructions for the database cache model."
msgstr ""

msgid "Filesystem caching"
msgstr ""

msgid ""
"The file-based backend serializes and stores each cache value as a separate "
"file. To use this backend set :setting:`BACKEND <CACHES-BACKEND>` to ``"
"\"django.core.cache.backends.filebased.FileBasedCache\"`` and :setting:"
"`LOCATION <CACHES-LOCATION>` to a suitable directory. For example, to store "
"cached data in ``/var/tmp/django_cache``, use this setting::"
msgstr ""

msgid ""
"If you're on Windows, put the drive letter at the beginning of the path, "
"like this::"
msgstr ""

msgid ""
"The directory path should be absolute -- that is, it should start at the "
"root of your filesystem. It doesn't matter whether you put a slash at the "
"end of the setting."
msgstr ""

msgid ""
"Make sure the directory pointed-to by this setting exists and is readable "
"and writable by the system user under which your Web server runs. Continuing "
"the above example, if your server runs as the user ``apache``, make sure the "
"directory ``/var/tmp/django_cache`` exists and is readable and writable by "
"the user ``apache``."
msgstr ""

msgid "Local-memory caching"
msgstr ""

msgid ""
"This is the default cache if another is not specified in your settings file. "
"If you want the speed advantages of in-memory caching but don't have the "
"capability of running Memcached, consider the local-memory cache backend. "
"This cache is per-process (see below) and thread-safe. To use it, set :"
"setting:`BACKEND <CACHES-BACKEND>` to ``\"django.core.cache.backends.locmem."
"LocMemCache\"``. For example::"
msgstr ""

msgid ""
"The cache :setting:`LOCATION <CACHES-LOCATION>` is used to identify "
"individual memory stores. If you only have one ``locmem`` cache, you can "
"omit the :setting:`LOCATION <CACHES-LOCATION>`; however, if you have more "
"than one local memory cache, you will need to assign a name to at least one "
"of them in order to keep them separate."
msgstr ""

msgid "The cache uses a least-recently-used (LRU) culling strategy."
msgstr ""

msgid ""
"Note that each process will have its own private cache instance, which means "
"no cross-process caching is possible. This obviously also means the local "
"memory cache isn't particularly memory-efficient, so it's probably not a "
"good choice for production environments. It's nice for development."
msgstr ""

msgid "Older versions use a pseudo-random culling strategy rather than LRU."
msgstr ""

msgid "Dummy caching (for development)"
msgstr ""

msgid ""
"Finally, Django comes with a \"dummy\" cache that doesn't actually cache -- "
"it just implements the cache interface without doing anything."
msgstr ""

msgid ""
"This is useful if you have a production site that uses heavy-duty caching in "
"various places but a development/test environment where you don't want to "
"cache and don't want to have to change your code to special-case the latter. "
"To activate dummy caching, set :setting:`BACKEND <CACHES-BACKEND>` like so::"
msgstr ""

msgid "Using a custom cache backend"
msgstr "使用自定义的缓存后台"

msgid ""
"While Django includes support for a number of cache backends out-of-the-box, "
"sometimes you might want to use a customized cache backend. To use an "
"external cache backend with Django, use the Python import path as the :"
"setting:`BACKEND <CACHES-BACKEND>` of the :setting:`CACHES` setting, like "
"so::"
msgstr ""

msgid ""
"If you're building your own backend, you can use the standard cache backends "
"as reference implementations. You'll find the code in the ``django/core/"
"cache/backends/`` directory of the Django source."
msgstr ""

msgid ""
"Note: Without a really compelling reason, such as a host that doesn't "
"support them, you should stick to the cache backends included with Django. "
"They've been well-tested and are easy to use."
msgstr ""

msgid "Cache arguments"
msgstr ""

msgid ""
"Each cache backend can be given additional arguments to control caching "
"behavior. These arguments are provided as additional keys in the :setting:"
"`CACHES` setting. Valid arguments are as follows:"
msgstr ""

msgid ""
":setting:`TIMEOUT <CACHES-TIMEOUT>`: The default timeout, in seconds, to use "
"for the cache. This argument defaults to ``300`` seconds (5 minutes). You "
"can set ``TIMEOUT`` to ``None`` so that, by default, cache keys never "
"expire. A value of ``0`` causes keys to immediately expire (effectively "
"\"don't cache\")."
msgstr ""

msgid ""
":setting:`OPTIONS <CACHES-OPTIONS>`: Any options that should be passed to "
"the cache backend. The list of valid options will vary with each backend, "
"and cache backends backed by a third-party library will pass their options "
"directly to the underlying cache library."
msgstr ""

msgid ""
"Cache backends that implement their own culling strategy (i.e., the "
"``locmem``, ``filesystem`` and ``database`` backends) will honor the "
"following options:"
msgstr ""

msgid ""
"``MAX_ENTRIES``: The maximum number of entries allowed in the cache before "
"old values are deleted. This argument defaults to ``300``."
msgstr ""

msgid ""
"``CULL_FREQUENCY``: The fraction of entries that are culled when "
"``MAX_ENTRIES`` is reached. The actual ratio is ``1 / CULL_FREQUENCY``, so "
"set ``CULL_FREQUENCY`` to ``2`` to cull half the entries when "
"``MAX_ENTRIES`` is reached. This argument should be an integer and defaults "
"to ``3``."
msgstr ""

msgid ""
"A value of ``0`` for ``CULL_FREQUENCY`` means that the entire cache will be "
"dumped when ``MAX_ENTRIES`` is reached. On some backends (``database`` in "
"particular) this makes culling *much* faster at the expense of more cache "
"misses."
msgstr ""

msgid ""
"Memcached backends pass the contents of :setting:`OPTIONS <CACHES-OPTIONS>` "
"as keyword arguments to the client constructors, allowing for more advanced "
"control of client behavior. For example usage, see below."
msgstr ""

msgid ""
":setting:`KEY_PREFIX <CACHES-KEY_PREFIX>`: A string that will be "
"automatically included (prepended by default) to all cache keys used by the "
"Django server."
msgstr ""

msgid ""
"See the :ref:`cache documentation <cache_key_prefixing>` for more "
"information."
msgstr ""

msgid ""
":setting:`VERSION <CACHES-VERSION>`: The default version number for cache "
"keys generated by the Django server."
msgstr ""

msgid ""
"See the :ref:`cache documentation <cache_versioning>` for more information."
msgstr ""

msgid ""
":setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` A string containing a dotted "
"path to a function that defines how to compose a prefix, version and key "
"into a final cache key."
msgstr ""

msgid ""
"See the :ref:`cache documentation <cache_key_transformation>` for more "
"information."
msgstr ""

msgid ""
"In this example, a filesystem backend is being configured with a timeout of "
"60 seconds, and a maximum capacity of 1000 items::"
msgstr ""

msgid ""
"Here's an example configuration for a ``python-memcached`` based backend "
"with an object size limit of 2MB::"
msgstr ""

msgid ""
"Here's an example configuration for a ``pylibmc`` based backend that enables "
"the binary protocol, SASL authentication, and the ``ketama`` behavior mode::"
msgstr ""

msgid "The per-site cache"
msgstr ""

msgid ""
"Once the cache is set up, the simplest way to use caching is to cache your "
"entire site. You'll need to add ``'django.middleware.cache."
"UpdateCacheMiddleware'`` and ``'django.middleware.cache."
"FetchFromCacheMiddleware'`` to your :setting:`MIDDLEWARE` setting, as in "
"this example::"
msgstr ""

msgid ""
"No, that's not a typo: the \"update\" middleware must be first in the list, "
"and the \"fetch\" middleware must be last. The details are a bit obscure, "
"but see `Order of MIDDLEWARE`_ below if you'd like the full story."
msgstr ""

msgid "Then, add the following required settings to your Django settings file:"
msgstr ""

msgid ""
":setting:`CACHE_MIDDLEWARE_ALIAS` -- The cache alias to use for storage."
msgstr ""

msgid ""
":setting:`CACHE_MIDDLEWARE_SECONDS` -- The number of seconds each page "
"should be cached."
msgstr ""

msgid ""
":setting:`CACHE_MIDDLEWARE_KEY_PREFIX` -- If the cache is shared across "
"multiple sites using the same Django installation, set this to the name of "
"the site, or some other string that is unique to this Django instance, to "
"prevent key collisions. Use an empty string if you don't care."
msgstr ""

msgid ""
"``FetchFromCacheMiddleware`` caches GET and HEAD responses with status 200, "
"where the request and response headers allow. Responses to requests for the "
"same URL with different query parameters are considered to be unique pages "
"and are cached separately. This middleware expects that a HEAD request is "
"answered with the same response headers as the corresponding GET request; in "
"which case it can return a cached GET response for HEAD request."
msgstr ""

msgid ""
"Additionally, ``UpdateCacheMiddleware`` automatically sets a few headers in "
"each :class:`~django.http.HttpResponse`:"
msgstr ""

msgid ""
"Sets the ``Expires`` header to the current date/time plus the defined :"
"setting:`CACHE_MIDDLEWARE_SECONDS`."
msgstr ""

msgid ""
"Sets the ``Cache-Control`` header to give a max age for the page -- again, "
"from the :setting:`CACHE_MIDDLEWARE_SECONDS` setting."
msgstr ""

msgid "See :doc:`/topics/http/middleware` for more on middleware."
msgstr ""

msgid ""
"If a view sets its own cache expiry time (i.e. it has a ``max-age`` section "
"in its ``Cache-Control`` header) then the page will be cached until the "
"expiry time, rather than :setting:`CACHE_MIDDLEWARE_SECONDS`. Using the "
"decorators in ``django.views.decorators.cache`` you can easily set a view's "
"expiry time (using the :func:`~django.views.decorators.cache.cache_control` "
"decorator) or disable caching for a view (using the :func:`~django.views."
"decorators.cache.never_cache` decorator). See the `using other headers`__ "
"section for more on these decorators."
msgstr ""

msgid ""
"If :setting:`USE_I18N` is set to ``True`` then the generated cache key will "
"include the name of the active :term:`language<language code>` -- see also :"
"ref:`how-django-discovers-language-preference`). This allows you to easily "
"cache multilingual sites without having to create the cache key yourself."
msgstr ""

msgid ""
"Cache keys also include the active :term:`language <language code>` when :"
"setting:`USE_L10N` is set to ``True`` and the :ref:`current time zone "
"<default-current-time-zone>` when :setting:`USE_TZ` is set to ``True``."
msgstr ""

msgid "The per-view cache"
msgstr ""

msgid ""
"A more granular way to use the caching framework is by caching the output of "
"individual views. ``django.views.decorators.cache`` defines a ``cache_page`` "
"decorator that will automatically cache the view's response for you. It's "
"easy to use::"
msgstr ""

msgid ""
"``cache_page`` takes a single argument: the cache timeout, in seconds. In "
"the above example, the result of the ``my_view()`` view will be cached for "
"15 minutes. (Note that we've written it as ``60 * 15`` for the purpose of "
"readability. ``60 * 15`` will be evaluated to ``900`` -- that is, 15 minutes "
"multiplied by 60 seconds per minute.)"
msgstr ""

msgid ""
"The per-view cache, like the per-site cache, is keyed off of the URL. If "
"multiple URLs point at the same view, each URL will be cached separately. "
"Continuing the ``my_view`` example, if your URLconf looks like this::"
msgstr ""

msgid ""
"then requests to ``/foo/1/`` and ``/foo/23/`` will be cached separately, as "
"you may expect. But once a particular URL (e.g., ``/foo/23/``) has been "
"requested, subsequent requests to that URL will use the cache."
msgstr ""

msgid ""
"``cache_page`` can also take an optional keyword argument, ``cache``, which "
"directs the decorator to use a specific cache (from your :setting:`CACHES` "
"setting) when caching view results. By default, the ``default`` cache will "
"be used, but you can specify any cache you want::"
msgstr ""

msgid ""
"You can also override the cache prefix on a per-view basis. ``cache_page`` "
"takes an optional keyword argument, ``key_prefix``, which works in the same "
"way as the :setting:`CACHE_MIDDLEWARE_KEY_PREFIX` setting for the "
"middleware.  It can be used like this::"
msgstr ""

msgid ""
"The ``key_prefix`` and ``cache`` arguments may be specified together. The "
"``key_prefix`` argument and the :setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` "
"specified under :setting:`CACHES` will be concatenated."
msgstr ""

msgid "Specifying per-view cache in the URLconf"
msgstr ""

msgid ""
"The examples in the previous section have hard-coded the fact that the view "
"is cached, because ``cache_page`` alters the ``my_view`` function in place. "
"This approach couples your view to the cache system, which is not ideal for "
"several reasons. For instance, you might want to reuse the view functions on "
"another, cache-less site, or you might want to distribute the views to "
"people who might want to use them without being cached. The solution to "
"these problems is to specify the per-view cache in the URLconf rather than "
"next to the view functions themselves."
msgstr ""

msgid ""
"Doing so is easy: simply wrap the view function with ``cache_page`` when you "
"refer to it in the URLconf. Here's the old URLconf from earlier::"
msgstr ""

msgid "Here's the same thing, with ``my_view`` wrapped in ``cache_page``::"
msgstr ""

msgid "Template fragment caching"
msgstr ""

msgid ""
"If you're after even more control, you can also cache template fragments "
"using the ``cache`` template tag. To give your template access to this tag, "
"put ``{% load cache %}`` near the top of your template."
msgstr ""

msgid ""
"The ``{% cache %}`` template tag caches the contents of the block for a "
"given amount of time. It takes at least two arguments: the cache timeout, in "
"seconds, and the name to give the cache fragment. The fragment is cached "
"forever if timeout is ``None``. The name will be taken as is, do not use a "
"variable. For example:"
msgstr ""

msgid "Older versions don't allow a ``None`` timeout."
msgstr ""

msgid ""
"Sometimes you might want to cache multiple copies of a fragment depending on "
"some dynamic data that appears inside the fragment. For example, you might "
"want a separate cached copy of the sidebar used in the previous example for "
"every user of your site. Do this by passing one or more additional "
"arguments, which may be variables with or without filters, to the ``{% cache "
"%}`` template tag to uniquely identify the cache fragment:"
msgstr ""

msgid ""
"If :setting:`USE_I18N` is set to ``True`` the per-site middleware cache "
"will :ref:`respect the active language<i18n-cache-key>`. For the ``cache`` "
"template tag you could use one of the :ref:`translation-specific "
"variables<template-translation-vars>` available in templates to achieve the "
"same result:"
msgstr ""

msgid ""
"The cache timeout can be a template variable, as long as the template "
"variable resolves to an integer value. For example, if the template variable "
"``my_timeout`` is set to the value ``600``, then the following two examples "
"are equivalent:"
msgstr ""

msgid ""
"This feature is useful in avoiding repetition in templates. You can set the "
"timeout in a variable, in one place, and just reuse that value."
msgstr ""

msgid ""
"By default, the cache tag will try to use the cache called "
"\"template_fragments\". If no such cache exists, it will fall back to using "
"the default cache. You may select an alternate cache backend to use with the "
"``using`` keyword argument, which must be the last argument to the tag."
msgstr ""

msgid ""
"It is considered an error to specify a cache name that is not configured."
msgstr ""

msgid ""
"If you want to obtain the cache key used for a cached fragment, you can use "
"``make_template_fragment_key``. ``fragment_name`` is the same as second "
"argument to the ``cache`` template tag; ``vary_on`` is a list of all "
"additional arguments passed to the tag. This function can be useful for "
"invalidating or overwriting a cached item, for example:"
msgstr ""

msgid "The low-level cache API"
msgstr ""

msgid ""
"Sometimes, caching an entire rendered page doesn't gain you very much and "
"is, in fact, inconvenient overkill."
msgstr ""

msgid ""
"Perhaps, for instance, your site includes a view whose results depend on "
"several expensive queries, the results of which change at different "
"intervals. In this case, it would not be ideal to use the full-page caching "
"that the per-site or per-view cache strategies offer, because you wouldn't "
"want to cache the entire result (since some of the data changes often), but "
"you'd still want to cache the results that rarely change."
msgstr ""

msgid ""
"For cases like this, Django exposes a simple, low-level cache API. You can "
"use this API to store objects in the cache with any level of granularity you "
"like. You can cache any Python object that can be pickled safely: strings, "
"dictionaries, lists of model objects, and so forth. (Most common Python "
"objects can be pickled; refer to the Python documentation for more "
"information about pickling.)"
msgstr ""

msgid "Accessing the cache"
msgstr ""

msgid ""
"You can access the caches configured in the :setting:`CACHES` setting "
"through a dict-like object: ``django.core.cache.caches``. Repeated requests "
"for the same alias in the same thread will return the same object."
msgstr ""

msgid ""
"If the named key does not exist, ``InvalidCacheBackendError`` will be raised."
msgstr ""

msgid ""
"To provide thread-safety, a different instance of the cache backend will be "
"returned for each thread."
msgstr ""

msgid ""
"As a shortcut, the default cache is available as ``django.core.cache."
"cache``::"
msgstr ""

msgid "This object is equivalent to ``caches['default']``."
msgstr ""

msgid "Basic usage"
msgstr ""

msgid "The basic interface is:"
msgstr ""

msgid ""
"``key`` should be a ``str``, and ``value`` can be any picklable Python "
"object."
msgstr ""

msgid ""
"The ``timeout`` argument is optional and defaults to the ``timeout`` "
"argument of the appropriate backend in the :setting:`CACHES` setting "
"(explained above). It's the number of seconds the value should be stored in "
"the cache. Passing in ``None`` for ``timeout`` will cache the value forever. "
"A ``timeout`` of ``0`` won't cache the value."
msgstr ""

msgid ""
"If the object doesn't exist in the cache, ``cache.get()`` returns ``None``::"
msgstr ""

msgid ""
"We advise against storing the literal value ``None`` in the cache, because "
"you won't be able to distinguish between your stored ``None`` value and a "
"cache miss signified by a return value of ``None``."
msgstr ""

msgid ""
"``cache.get()`` can take a ``default`` argument. This specifies which value "
"to return if the object doesn't exist in the cache::"
msgstr ""

msgid ""
"To add a key only if it doesn't already exist, use the ``add()`` method. It "
"takes the same parameters as ``set()``, but it will not attempt to update "
"the cache if the key specified is already present::"
msgstr ""

msgid ""
"If you need to know whether ``add()`` stored a value in the cache, you can "
"check the return value. It will return ``True`` if the value was stored, "
"``False`` otherwise."
msgstr ""

msgid ""
"If you want to get a key's value or set a value if the key isn't in the "
"cache, there is the ``get_or_set()`` method. It takes the same parameters as "
"``get()`` but the default is set as the new cache value for that key, rather "
"than simply returned::"
msgstr ""

msgid "You can also pass any callable as a *default* value::"
msgstr ""

msgid ""
"There's also a ``get_many()`` interface that only hits the cache once. "
"``get_many()`` returns a dictionary with all the keys you asked for that "
"actually exist in the cache (and haven't expired)::"
msgstr ""

msgid ""
"To set multiple values more efficiently, use ``set_many()`` to pass a "
"dictionary of key-value pairs::"
msgstr ""

msgid ""
"Like ``cache.set()``, ``set_many()`` takes an optional ``timeout`` parameter."
msgstr ""

msgid ""
"On supported backends (memcached), ``set_many()`` returns a list of keys "
"that failed to be inserted."
msgstr ""

msgid "The return value containing list of failing keys was added."
msgstr ""

msgid ""
"You can delete keys explicitly with ``delete()``. This is an easy way of "
"clearing the cache for a particular object::"
msgstr ""

msgid ""
"If you want to clear a bunch of keys at once, ``delete_many()`` can take a "
"list of keys to be cleared::"
msgstr ""

msgid ""
"Finally, if you want to delete all the keys in the cache, use ``cache."
"clear()``.  Be careful with this; ``clear()`` will remove *everything* from "
"the cache, not just the keys set by your application. ::"
msgstr ""

msgid ""
"``cache.touch()`` sets a new expiration for a key. For example, to update a "
"key to expire 10 seconds from now::"
msgstr ""

msgid ""
"Like other methods, the ``timeout`` argument is optional and defaults to the "
"``TIMEOUT`` option of the appropriate backend in the :setting:`CACHES` "
"setting."
msgstr ""

msgid ""
"``touch()`` returns ``True`` if the key was successfully touched, ``False`` "
"otherwise."
msgstr ""

msgid ""
"You can also increment or decrement a key that already exists using the "
"``incr()`` or ``decr()`` methods, respectively. By default, the existing "
"cache value will be incremented or decremented by 1. Other increment/"
"decrement values can be specified by providing an argument to the increment/"
"decrement call. A ValueError will be raised if you attempt to increment or "
"decrement a nonexistent cache key.::"
msgstr ""

msgid ""
"``incr()``/``decr()`` methods are not guaranteed to be atomic. On those "
"backends that support atomic increment/decrement (most notably, the "
"memcached backend), increment and decrement operations will be atomic. "
"However, if the backend doesn't natively provide an increment/decrement "
"operation, it will be implemented using a two-step retrieve/update."
msgstr ""

msgid ""
"You can close the connection to your cache with ``close()`` if implemented "
"by the cache backend."
msgstr ""

msgid "For caches that don't implement ``close`` methods it is a no-op."
msgstr ""

msgid "Cache key prefixing"
msgstr ""

msgid ""
"If you are sharing a cache instance between servers, or between your "
"production and development environments, it's possible for data cached by "
"one server to be used by another server. If the format of cached data is "
"different between servers, this can lead to some very hard to diagnose "
"problems."
msgstr ""

msgid ""
"To prevent this, Django provides the ability to prefix all cache keys used "
"by a server. When a particular cache key is saved or retrieved, Django will "
"automatically prefix the cache key with the value of the :setting:"
"`KEY_PREFIX <CACHES-KEY_PREFIX>` cache setting."
msgstr ""

msgid ""
"By ensuring each Django instance has a different :setting:`KEY_PREFIX "
"<CACHES-KEY_PREFIX>`, you can ensure that there will be no collisions in "
"cache values."
msgstr ""

msgid "Cache versioning"
msgstr ""

msgid ""
"When you change running code that uses cached values, you may need to purge "
"any existing cached values. The easiest way to do this is to flush the "
"entire cache, but this can lead to the loss of cache values that are still "
"valid and useful."
msgstr ""

msgid ""
"Django provides a better way to target individual cache values. Django's "
"cache framework has a system-wide version identifier, specified using the :"
"setting:`VERSION <CACHES-VERSION>` cache setting. The value of this setting "
"is automatically combined with the cache prefix and the user-provided cache "
"key to obtain the final cache key."
msgstr ""

msgid ""
"By default, any key request will automatically include the site default "
"cache key version. However, the primitive cache functions all include a "
"``version`` argument, so you can specify a particular cache key version to "
"set or get. For example::"
msgstr ""

msgid ""
"The version of a specific key can be incremented and decremented using the "
"``incr_version()`` and ``decr_version()`` methods. This enables specific "
"keys to be bumped to a new version, leaving other keys unaffected. "
"Continuing our previous example::"
msgstr ""

msgid "Cache key transformation"
msgstr ""

msgid ""
"As described in the previous two sections, the cache key provided by a user "
"is not used verbatim -- it is combined with the cache prefix and key version "
"to provide a final cache key. By default, the three parts are joined using "
"colons to produce a final string::"
msgstr ""

msgid ""
"If you want to combine the parts in different ways, or apply other "
"processing to the final key (e.g., taking a hash digest of the key parts), "
"you can provide a custom key function."
msgstr ""

msgid ""
"The :setting:`KEY_FUNCTION <CACHES-KEY_FUNCTION>` cache setting specifies a "
"dotted-path to a function matching the prototype of ``make_key()`` above. If "
"provided, this custom key function will be used instead of the default key "
"combining function."
msgstr ""

msgid "Cache key warnings"
msgstr ""

msgid ""
"Memcached, the most commonly-used production cache backend, does not allow "
"cache keys longer than 250 characters or containing whitespace or control "
"characters, and using such keys will cause an exception. To encourage cache-"
"portable code and minimize unpleasant surprises, the other built-in cache "
"backends issue a warning (``django.core.cache.backends.base."
"CacheKeyWarning``) if a key is used that would cause an error on memcached."
msgstr ""

msgid ""
"If you are using a production backend that can accept a wider range of keys "
"(a custom backend, or one of the non-memcached built-in backends), and want "
"to use this wider range without warnings, you can silence "
"``CacheKeyWarning`` with this code in the ``management`` module of one of "
"your :setting:`INSTALLED_APPS`::"
msgstr ""

msgid ""
"If you want to instead provide custom key validation logic for one of the "
"built-in backends, you can subclass it, override just the ``validate_key`` "
"method, and follow the instructions for `using a custom cache backend`_. For "
"instance, to do this for the ``locmem`` backend, put this code in a module::"
msgstr ""

msgid ""
"...and use the dotted Python path to this class in the :setting:`BACKEND "
"<CACHES-BACKEND>` portion of your :setting:`CACHES` setting."
msgstr ""

msgid "Downstream caches"
msgstr "下游缓存"

msgid ""
"So far, this document has focused on caching your *own* data. But another "
"type of caching is relevant to Web development, too: caching performed by "
"\"downstream\" caches. These are systems that cache pages for users even "
"before the request reaches your website."
msgstr ""
"到目前为止，该文档主要关注缓存*自己的*数据。但另一种类型的缓存也与 Web 开发相"
"关：缓存由“下游”缓存执行。这些系统甚至在请求到达您的网站之前为用户缓存页面。"

msgid "Here are a few examples of downstream caches:"
msgstr "下面是一些下游缓存的例子："

msgid ""
"Your ISP may cache certain pages, so if you requested a page from https://"
"example.com/, your ISP would send you the page without having to access "
"example.com directly. The maintainers of example.com have no knowledge of "
"this caching; the ISP sits between example.com and your Web browser, "
"handling all of the caching transparently."
msgstr ""
"您的 ISP 可能会缓存某些页面，因此如果您从 https://example.com/ 请求页面，您"
"的 ISP 将直接向您发送页面，而不必直接访问 example.com。example.com 的维护者对"
"这个缓存一无所知；ISP 位于 example.com 和 Web 浏览器之间，透明地处理所有缓"
"存。"

msgid ""
"Your Django website may sit behind a *proxy cache*, such as Squid Web Proxy "
"Cache (http://www.squid-cache.org/), that caches pages for performance. In "
"this case, each request first would be handled by the proxy, and it would be "
"passed to your application only if needed."
msgstr ""
"您的 Django 网站可能会在一个*代理缓存*的后面，例如Squid 网页代理缓存（http://"
"www.squid-cache.org/），为了性能而缓存页面。在这种情况下，每个请求首先由代理"
"来处理，只有在需要时才将其传递给应用程序。"

msgid ""
"Your Web browser caches pages, too. If a Web page sends out the appropriate "
"headers, your browser will use the local cached copy for subsequent requests "
"to that page, without even contacting the Web page again to see whether it "
"has changed."
msgstr ""
"你的网页浏览器也会缓存页面。如果 Web 页面发送了适当的请求头，浏览器将使用本地"
"缓存的副本来对该页面进行后续请求，而不必再次与 Web 页面联系以查看它是否已经更"
"改。"

msgid ""
"Downstream caching is a nice efficiency boost, but there's a danger to it: "
"Many Web pages' contents differ based on authentication and a host of other "
"variables, and cache systems that blindly save pages based purely on URLs "
"could expose incorrect or sensitive data to subsequent visitors to those "
"pages."
msgstr ""
"下游缓存是一个很好的效率提升，但是它有一个危险：许多网页的内容基于认证和其他"
"变量的不同而不同，而纯粹基于 URL 的盲目保存页面的缓存系统可能会将不正确或敏感"
"的数据暴露给那些页面的后续访问者。"

msgid ""
"For example, say you operate a Web email system, and the contents of the "
"\"inbox\" page obviously depend on which user is logged in. If an ISP "
"blindly cached your site, then the first user who logged in through that ISP "
"would have their user-specific inbox page cached for subsequent visitors to "
"the site. That's not cool."
msgstr ""
"比如说，你操作一个网络电子邮件系统，“收件箱”页面的内容显然取决于哪个用户登"
"录。如果 ISP 盲目缓存您的站点，那么通过 ISP 登录的第一个用户将为随后的访问者"
"缓存其特定于用户的收件箱页面。那就不妙了。"

msgid ""
"Fortunately, HTTP provides a solution to this problem. A number of HTTP "
"headers exist to instruct downstream caches to differ their cache contents "
"depending on designated variables, and to tell caching mechanisms not to "
"cache particular pages. We'll look at some of these headers in the sections "
"that follow."
msgstr ""
"幸运的是，HTTP 为这个问题提供了解决方案。存在许多 HTTP 报头以指示下游缓存根据"
"指定的变量来区分它们的缓存内容，并且告诉缓存机制不缓存特定的页面。我们将在下"
"面的章节中查看这些标题。"

msgid "Using ``Vary`` headers"
msgstr "使用 ``Vary`` 标头"

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key. For example, if the contents "
"of a Web page depend on a user's language preference, the page is said to "
"\"vary on language.\""
msgstr ""
"“可变”标头定义了缓存机制在构建其缓存密钥时应考虑哪些请求报头。例如，如果网页"
"的内容取决于用户的语言偏好，则该页面被称为“在语言上有所不同”。"

msgid ""
"By default, Django's cache system creates its cache keys using the requested "
"fully-qualified URL -- e.g., ``\"https://www.example.com/stories/2005/?"
"order_by=author\"``. This means every request to that URL will use the same "
"cached version, regardless of user-agent differences such as cookies or "
"language preferences. However, if this page produces different content based "
"on some difference in request headers -- such as a cookie, or a language, or "
"a user-agent -- you'll need to use the ``Vary`` header to tell caching "
"mechanisms that the page output depends on those things."
msgstr ""
"默认情况下，Django 的缓存系统使用请求的完全合格的URL创建它的缓存密钥——例如，"
"``\"https://www.example.com/stories/2005/?order_by=author\"``。这意味着对该 "
"URL 的每个请求都将使用相同的缓存版本，而不管用户代理差异（如 cookies 或语言首"
"选项）。但是，如果这个页面基于请求头（如 cookie、语言或用户代理）中的某些差异"
"而产生不同的内容，则需要使用``Vary`` 标头来告诉缓存机制，页面输出取决于这些东"
"西。"

msgid ""
"To do this in Django, use the convenient :func:`django.views.decorators.vary."
"vary_on_headers` view decorator, like so::"
msgstr ""

msgid ""
"In this case, a caching mechanism (such as Django's own cache middleware) "
"will cache a separate version of the page for each unique user-agent."
msgstr ""

msgid ""
"The advantage to using the ``vary_on_headers`` decorator rather than "
"manually setting the ``Vary`` header (using something like "
"``response['Vary'] = 'user-agent'``) is that the decorator *adds* to the "
"``Vary`` header (which may already exist), rather than setting it from "
"scratch and potentially overriding anything that was already in there."
msgstr ""

msgid "You can pass multiple headers to ``vary_on_headers()``::"
msgstr ""

msgid ""
"This tells downstream caches to vary on *both*, which means each combination "
"of user-agent and cookie will get its own cache value. For example, a "
"request with the user-agent ``Mozilla`` and the cookie value ``foo=bar`` "
"will be considered different from a request with the user-agent ``Mozilla`` "
"and the cookie value ``foo=ham``."
msgstr ""

msgid ""
"Because varying on cookie is so common, there's a :func:`django.views."
"decorators.vary.vary_on_cookie` decorator. These two views are equivalent::"
msgstr ""

msgid ""
"The headers you pass to ``vary_on_headers`` are not case sensitive; ``\"User-"
"Agent\"`` is the same thing as ``\"user-agent\"``."
msgstr ""

msgid ""
"You can also use a helper function, :func:`django.utils.cache."
"patch_vary_headers`, directly. This function sets, or adds to, the ``Vary "
"header``. For example::"
msgstr ""

msgid ""
"``patch_vary_headers`` takes an :class:`~django.http.HttpResponse` instance "
"as its first argument and a list/tuple of case-insensitive header names as "
"its second argument."
msgstr ""

msgid ""
"For more on Vary headers, see the :rfc:`official Vary spec "
"<7231#section-7.1.4>`."
msgstr ""

msgid "Controlling cache: Using other headers"
msgstr "使用其他标头控制高速缓存"

msgid ""
"Other problems with caching are the privacy of data and the question of "
"where data should be stored in a cascade of caches."
msgstr "缓存的其他问题是数据的隐私和数据应该存储在缓存的级联中的问题。"

msgid ""
"A user usually faces two kinds of caches: their own browser cache (a private "
"cache) and their provider's cache (a public cache). A public cache is used "
"by multiple users and controlled by someone else. This poses problems with "
"sensitive data--you don't want, say, your bank account number stored in a "
"public cache. So Web applications need a way to tell caches which data is "
"private and which is public."
msgstr ""
"用户通常面临两种缓存：它们自己的浏览器缓存（私有缓存）和它们的提供者的缓存"
"（公共缓存）。公共缓存由多个用户使用，并由其他用户控制。这给敏感数据带来了问"
"题——你不希望，比如说，你的银行帐号存储在一个公共缓存中。因此，Web 应用程序需"
"要一种方法来告诉缓存数据是私有的，哪些是公开的。"

msgid ""
"The solution is to indicate a page's cache should be \"private.\" To do this "
"in Django, use the :func:`~django.views.decorators.cache.cache_control` view "
"decorator. Example::"
msgstr ""
"解决方案是指出一个页面的缓存应该是“私有的”。在 Django中，使用 :func:`~django."
"views.decorators.cache.cache_control` 。例子："

msgid ""
"This decorator takes care of sending out the appropriate HTTP header behind "
"the scenes."
msgstr "这个装饰器负责在场景后面发送适当的 HTTP 头。"

msgid ""
"Note that the cache control settings \"private\" and \"public\" are mutually "
"exclusive. The decorator ensures that the \"public\" directive is removed if "
"\"private\" should be set (and vice versa). An example use of the two "
"directives would be a blog site that offers both private and public entries. "
"Public entries may be cached on any shared cache. The following code uses :"
"func:`~django.utils.cache.patch_cache_control`, the manual way to modify the "
"cache control header (it is internally called by the :func:`~django.views."
"decorators.cache.cache_control` decorator)::"
msgstr ""
"注意，缓存控制设置“私有”和“公共”是互斥的。装饰器确保“公共”指令被移除，如果应"
"该设置“私有”（反之亦然）。这两个指令的一个示例使用将是一个提供私人和公共条目"
"的博客站点。公共条目可以缓存在任何共享缓存上。下面的代码使用 :func:`~django."
"utils.cache.patch_cache_control`，手动修改缓存控制头的方法（内部调用的是 :"
"func:`~django.views.decorators.cache.cache_control` 装饰器）："

msgid ""
"You can control downstream caches in other ways as well (see :rfc:`7234` for "
"details on HTTP caching). For example, even if you don't use Django's server-"
"side cache framework, you can still tell clients to cache a view for a "
"certain amount of time with the :rfc:`max-age <7234#section-5.2.2.8>` "
"directive::"
msgstr ""

msgid ""
"(If you *do* use the caching middleware, it already sets the ``max-age`` "
"with the value of the :setting:`CACHE_MIDDLEWARE_SECONDS` setting. In that "
"case, the custom ``max_age`` from the :func:`~django.views.decorators.cache."
"cache_control` decorator will take precedence, and the header values will be "
"merged correctly.)"
msgstr ""

msgid ""
"Any valid ``Cache-Control`` response directive is valid in "
"``cache_control()``. Here are some more examples:"
msgstr ""

msgid "``no_transform=True``"
msgstr "``no_transform=True``"

msgid "``must_revalidate=True``"
msgstr "``must_revalidate=True``"

msgid "``stale_while_revalidate=num_seconds``"
msgstr "``stale_while_revalidate=num_seconds``"

msgid ""
"The full list of known directives can be found in the `IANA registry`_ (note "
"that not all of them apply to responses)."
msgstr ""

msgid ""
"If you want to use headers to disable caching altogether, :func:`~django."
"views.decorators.cache.never_cache` is a view decorator that adds headers to "
"ensure the response won't be cached by browsers or other caches. Example::"
msgstr ""

msgid "Order of ``MIDDLEWARE``"
msgstr " ``MIDDLEWARE``顺序"

msgid ""
"If you use caching middleware, it's important to put each half in the right "
"place within the :setting:`MIDDLEWARE` setting. That's because the cache "
"middleware needs to know which headers by which to vary the cache storage. "
"Middleware always adds something to the ``Vary`` response header when it can."
msgstr ""
"如果使用缓存中间件，重要的是将每一半放在 :setting:`MIDDLEWARE` 设置的正确位"
"置。这是因为缓存中间件需要知道哪些头可以改变缓存存储。中间件总是可以在 "
"``Vary`` 响应头中添加一些东西。"

msgid ""
"``UpdateCacheMiddleware`` runs during the response phase, where middleware "
"is run in reverse order, so an item at the top of the list runs *last* "
"during the response phase. Thus, you need to make sure that "
"``UpdateCacheMiddleware`` appears *before* any other middleware that might "
"add something to the ``Vary`` header. The following middleware modules do so:"
msgstr ""
"``UpdateCacheMiddleware`` 在响应阶段运行，其中中间件以相反的顺序运行，因此列"
"表顶部的项目在响应阶段的*最后*运行。因此，您需要确保 "
"``UpdateCacheMiddleware`` 出现在任何其他可能添加到 ``Vary`` 标头的其他中间件*"
"之前*。下面的中间件模块类似："

msgid "``SessionMiddleware`` adds ``Cookie``"
msgstr "``SessionMiddleware`` 添加 ``Cookie``"

msgid "``GZipMiddleware`` adds ``Accept-Encoding``"
msgstr "``GZipMiddleware`` 添加 ``Accept-Encoding``"

msgid "``LocaleMiddleware`` adds ``Accept-Language``"
msgstr "``LocaleMiddleware`` 添加 ``Accept-Language``"

msgid ""
"``FetchFromCacheMiddleware``, on the other hand, runs during the request "
"phase, where middleware is applied first-to-last, so an item at the top of "
"the list runs *first* during the request phase. The "
"``FetchFromCacheMiddleware`` also needs to run after other middleware "
"updates the ``Vary`` header, so ``FetchFromCacheMiddleware`` must be *after* "
"any item that does so."
msgstr ""

msgid "System check framework"
msgstr "系统检查框架"

msgid ""
"The system check framework is a set of static checks for validating Django "
"projects. It detects common problems and provides hints for how to fix them. "
"The framework is extensible so you can easily add your own checks."
msgstr ""
"系统检查框架是一组验证Django项目的静态检查。 它检测到常见的问题，并提供了如何"
"解决这些问题的提示。 该框架是可扩展的，所以你可以轻松地添加自己的检查。"

msgid ""
"Checks can be triggered explicitly via the :djadmin:`check` command. Checks "
"are triggered implicitly before most commands, including :djadmin:"
"`runserver` and :djadmin:`migrate`. For performance reasons, checks are not "
"run as part of the WSGI stack that is used in deployment. If you need to run "
"system checks on your deployment server, trigger them explicitly using :"
"djadmin:`check`."
msgstr ""

msgid ""
"Serious errors will prevent Django commands (such as :djadmin:`runserver`) "
"from running at all. Minor problems are reported to the console. If you have "
"inspected the cause of a warning and are happy to ignore it, you can hide "
"specific warnings using the :setting:`SILENCED_SYSTEM_CHECKS` setting in "
"your project settings file."
msgstr ""

msgid ""
"A full list of all checks that can be raised by Django can be found in the :"
"doc:`System check reference </ref/checks>`."
msgstr ""

msgid "Writing your own checks"
msgstr ""

msgid ""
"The framework is flexible and allows you to write functions that perform any "
"other kind of check you may require. The following is an example stub check "
"function::"
msgstr ""

msgid ""
"The check function *must* accept an ``app_configs`` argument; this argument "
"is the list of applications that should be inspected. If None, the check "
"must be run on *all* installed apps in the project. The ``**kwargs`` "
"argument is required for future expansion."
msgstr ""

msgid "Messages"
msgstr "消息"

msgid ""
"The function must return a list of messages. If no problems are found as a "
"result of the check, the check function must return an empty list."
msgstr ""

msgid ""
"The warnings and errors raised by the check method must be instances of :"
"class:`~django.core.checks.CheckMessage`. An instance of :class:`~django."
"core.checks.CheckMessage` encapsulates a single reportable error or warning. "
"It also provides context and hints applicable to the message, and a unique "
"identifier that is used for filtering purposes."
msgstr ""

msgid ""
"The concept is very similar to messages from the :doc:`message framework </"
"ref/contrib/messages>` or the :doc:`logging framework </topics/logging>`. "
"Messages are tagged with a ``level`` indicating the severity of the message."
msgstr ""

msgid ""
"There are also shortcuts to make creating messages with common levels "
"easier. When using these classes you can omit the ``level`` argument because "
"it is implied by the class name."
msgstr ""

msgid ":class:`Debug`"
msgstr ""

msgid ":class:`Info`"
msgstr ""

msgid ":class:`Warning`"
msgstr ""

msgid ":class:`Error`"
msgstr ""

msgid ":class:`Critical`"
msgstr ""

msgid "Registering and labeling checks"
msgstr ""

msgid ""
"Lastly, your check function must be registered explicitly with system check "
"registry. Checks should be registered in a file that's loaded when your "
"application is loaded; for example, in the :meth:`AppConfig.ready() <django."
"apps.AppConfig.ready>` method."
msgstr ""

msgid ""
"You can pass as many tags to ``register`` as you want in order to label your "
"check. Tagging checks is useful since it allows you to run only a certain "
"group of checks. For example, to register a compatibility check, you would "
"make the following call::"
msgstr ""

msgid ""
"You can register \"deployment checks\" that are only relevant to a "
"production settings file like this::"
msgstr ""

msgid ""
"These checks will only be run if the :option:`check --deploy` option is used."
msgstr ""

msgid ""
"You can also use ``register`` as a function rather than a decorator by "
"passing a callable object (usually a function) as the first argument to "
"``register``."
msgstr ""

msgid "The code below is equivalent to the code above::"
msgstr ""

msgid "Field, model, manager, and database checks"
msgstr ""

msgid ""
"In some cases, you won't need to register your check function -- you can "
"piggyback on an existing registration."
msgstr ""

msgid ""
"Fields, models, model managers, and database backends all implement a "
"``check()`` method that is already registered with the check framework. If "
"you want to add extra checks, you can extend the implementation on the base "
"class, perform any extra checks you need, and append any messages to those "
"generated by the base class. It's recommended that you delegate each check "
"to separate methods."
msgstr ""

msgid ""
"Consider an example where you are implementing a custom field named "
"``RangedIntegerField``. This field adds ``min`` and ``max`` arguments to the "
"constructor of ``IntegerField``. You may want to add a check to ensure that "
"users provide a min value that is less than or equal to the max value. The "
"following code snippet shows how you can implement this check::"
msgstr ""

msgid ""
"If you wanted to add checks to a model manager, you would take the same "
"approach on your subclass of :class:`~django.db.models.Manager`."
msgstr ""

msgid ""
"If you want to add a check to a model class, the approach is *almost* the "
"same: the only difference is that the check is a classmethod, not an "
"instance method::"
msgstr ""

msgid "Writing tests"
msgstr ""

msgid "Messages are comparable. That allows you to easily write tests::"
msgstr ""

msgid "Built-in class-based generic views"
msgstr ""

msgid ""
"Writing Web applications can be monotonous, because we repeat certain "
"patterns again and again. Django tries to take away some of that monotony at "
"the model and template layers, but Web developers also experience this "
"boredom at the view level."
msgstr ""

msgid ""
"Django's *generic views* were developed to ease that pain. They take certain "
"common idioms and patterns found in view development and abstract them so "
"that you can quickly write common views of data without having to write too "
"much code."
msgstr ""

msgid ""
"We can recognize certain common tasks, like displaying a list of objects, "
"and write code that displays a list of *any* object. Then the model in "
"question can be passed as an extra argument to the URLconf."
msgstr ""

msgid "Django ships with generic views to do the following:"
msgstr ""

msgid ""
"Display list and detail pages for a single object. If we were creating an "
"application to manage conferences then a ``TalkListView`` and a "
"``RegisteredUserListView`` would be examples of list views. A single talk "
"page is an example of what we call a \"detail\" view."
msgstr ""

msgid ""
"Present date-based objects in year/month/day archive pages, associated "
"detail, and \"latest\" pages."
msgstr ""

msgid ""
"Allow users to create, update, and delete objects -- with or without "
"authorization."
msgstr ""

msgid ""
"Taken together, these views provide easy interfaces to perform the most "
"common tasks developers encounter."
msgstr ""

msgid "Extending generic views"
msgstr ""

msgid ""
"There's no question that using generic views can speed up development "
"substantially. In most projects, however, there comes a moment when the "
"generic views no longer suffice. Indeed, the most common question asked by "
"new Django developers is how to make generic views handle a wider array of "
"situations."
msgstr ""

msgid ""
"This is one of the reasons generic views were redesigned for the 1.3 release "
"- previously, they were just view functions with a bewildering array of "
"options; now, rather than passing in a large amount of configuration in the "
"URLconf, the recommended way to extend generic views is to subclass them, "
"and override their attributes or methods."
msgstr ""

msgid ""
"That said, generic views will have a limit. If you find you're struggling to "
"implement your view as a subclass of a generic view, then you may find it "
"more effective to write just the code you need, using your own class-based "
"or functional views."
msgstr ""

msgid ""
"More examples of generic views are available in some third party "
"applications, or you could write your own as needed."
msgstr ""

msgid "Generic views of objects"
msgstr ""

msgid ""
":class:`~django.views.generic.base.TemplateView` certainly is useful, but "
"Django's generic views really shine when it comes to presenting views of "
"your database content. Because it's such a common task, Django comes with a "
"handful of built-in generic views that make generating list and detail views "
"of objects incredibly easy."
msgstr ""

msgid ""
"Let's start by looking at some examples of showing a list of objects or an "
"individual object."
msgstr ""

msgid "We'll be using these models::"
msgstr ""

msgid "Now we need to define a view::"
msgstr ""

msgid "Finally hook that view into your urls::"
msgstr ""

msgid ""
"That's all the Python code we need to write. We still need to write a "
"template, however. We could explicitly tell the view which template to use "
"by adding a ``template_name`` attribute to the view, but in the absence of "
"an explicit template Django will infer one from the object's name. In this "
"case, the inferred template will be ``\"books/publisher_list.html\"`` -- the "
"\"books\" part comes from the name of the app that defines the model, while "
"the \"publisher\" bit is just the lowercased version of the model's name."
msgstr ""

msgid ""
"Thus, when (for example) the ``APP_DIRS`` option of a ``DjangoTemplates`` "
"backend is set to True in :setting:`TEMPLATES`, a template location could "
"be: /path/to/project/books/templates/books/publisher_list.html"
msgstr ""

msgid ""
"This template will be rendered against a context containing a variable "
"called ``object_list`` that contains all the publisher objects. A very "
"simple template might look like the following:"
msgstr ""

msgid ""
"That's really all there is to it. All the cool features of generic views "
"come from changing the attributes set on the generic view. The :doc:`generic "
"views reference</ref/class-based-views/index>` documents all the generic "
"views and their options in detail; the rest of this document will consider "
"some of the common ways you might customize and extend generic views."
msgstr ""

msgid "Making \"friendly\" template contexts"
msgstr ""

msgid ""
"You might have noticed that our sample publisher list template stores all "
"the publishers in a variable named ``object_list``. While this works just "
"fine, it isn't all that \"friendly\" to template authors: they have to "
"\"just know\" that they're dealing with publishers here."
msgstr ""

msgid ""
"Well, if you're dealing with a model object, this is already done for you. "
"When you are dealing with an object or queryset, Django is able to populate "
"the context using the lower cased version of the model class' name. This is "
"provided in addition to the default ``object_list`` entry, but contains "
"exactly the same data, i.e. ``publisher_list``."
msgstr ""

msgid ""
"If this still isn't a good match, you can manually set the name of the "
"context variable. The ``context_object_name`` attribute on a generic view "
"specifies the context variable to use::"
msgstr ""

msgid ""
"Providing a useful ``context_object_name`` is always a good idea. Your "
"coworkers who design templates will thank you."
msgstr ""

msgid "Adding extra context"
msgstr ""

msgid ""
"Often you simply need to present some extra information beyond that provided "
"by the generic view. For example, think of showing a list of all the books "
"on each publisher detail page. The :class:`~django.views.generic.detail."
"DetailView` generic view provides the publisher to the context, but how do "
"we get additional information in that template?"
msgstr ""

msgid ""
"The answer is to subclass :class:`~django.views.generic.detail.DetailView` "
"and provide your own implementation of the ``get_context_data`` method. The "
"default implementation simply adds the object being displayed to the "
"template, but you can override it to send more::"
msgstr ""

msgid ""
"Generally, ``get_context_data`` will merge the context data of all parent "
"classes with those of the current class. To preserve this behavior in your "
"own classes where you want to alter the context, you should be sure to call "
"``get_context_data`` on the super class. When no two classes try to define "
"the same key, this will give the expected results. However if any class "
"attempts to override a key after parent classes have set it (after the call "
"to super), any children of that class will also need to explicitly set it "
"after super if they want to be sure to override all parents. If you're "
"having trouble, review the method resolution order of your view."
msgstr ""

msgid ""
"Another consideration is that the context data from class-based generic "
"views will override data provided by context processors; see :meth:`~django."
"views.generic.detail.SingleObjectMixin.get_context_data` for an example."
msgstr ""

msgid "Viewing subsets of objects"
msgstr ""

msgid ""
"Now let's take a closer look at the ``model`` argument we've been using all "
"along. The ``model`` argument, which specifies the database model that the "
"view will operate upon, is available on all the generic views that operate "
"on a single object or a collection of objects. However, the ``model`` "
"argument is not the only way to specify the objects that the view will "
"operate upon -- you can also specify the list of objects using the "
"``queryset`` argument::"
msgstr ""

msgid ""
"Specifying ``model = Publisher`` is really just shorthand for saying "
"``queryset = Publisher.objects.all()``. However, by using ``queryset`` to "
"define a filtered list of objects you can be more specific about the objects "
"that will be visible in the view (see :doc:`/topics/db/queries` for more "
"information about :class:`~django.db.models.query.QuerySet` objects, and see "
"the :doc:`class-based views reference </ref/class-based-views/index>` for "
"the complete details)."
msgstr ""

msgid ""
"To pick a simple example, we might want to order a list of books by "
"publication date, with the most recent first::"
msgstr ""

msgid ""
"That's a pretty simple example, but it illustrates the idea nicely. Of "
"course, you'll usually want to do more than just reorder objects. If you "
"want to present a list of books by a particular publisher, you can use the "
"same technique::"
msgstr ""

msgid ""
"Notice that along with a filtered ``queryset``, we're also using a custom "
"template name. If we didn't, the generic view would use the same template as "
"the \"vanilla\" object list, which might not be what we want."
msgstr ""

msgid ""
"Also notice that this isn't a very elegant way of doing publisher-specific "
"books. If we want to add another publisher page, we'd need another handful "
"of lines in the URLconf, and more than a few publishers would get "
"unreasonable. We'll deal with this problem in the next section."
msgstr ""

msgid ""
"If you get a 404 when requesting ``/books/acme/``, check to ensure you "
"actually have a Publisher with the name 'ACME Publishing'.  Generic views "
"have an ``allow_empty`` parameter for this case.  See the :doc:`class-based-"
"views reference</ref/class-based-views/index>` for more details."
msgstr ""

msgid "Dynamic filtering"
msgstr ""

msgid ""
"Another common need is to filter down the objects given in a list page by "
"some key in the URL. Earlier we hard-coded the publisher's name in the "
"URLconf, but what if we wanted to write a view that displayed all the books "
"by some arbitrary publisher?"
msgstr ""

msgid ""
"Handily, the ``ListView`` has a :meth:`~django.views.generic.list."
"MultipleObjectMixin.get_queryset` method we can override. Previously, it has "
"just been returning the value of the ``queryset`` attribute, but now we can "
"add more logic."
msgstr ""

msgid ""
"The key part to making this work is that when class-based views are called, "
"various useful things are stored on ``self``; as well as the request (``self."
"request``) this includes the positional (``self.args``) and name-based "
"(``self.kwargs``) arguments captured according to the URLconf."
msgstr ""

msgid "Here, we have a URLconf with a single captured group::"
msgstr ""

msgid "Next, we'll write the ``PublisherBookList`` view itself::"
msgstr ""

msgid ""
"As you can see, it's quite easy to add more logic to the queryset selection; "
"if we wanted, we could use ``self.request.user`` to filter using the current "
"user, or other more complex logic."
msgstr ""

msgid ""
"We can also add the publisher into the context at the same time, so we can "
"use it in the template::"
msgstr ""

msgid "Performing extra work"
msgstr ""

msgid ""
"The last common pattern we'll look at involves doing some extra work before "
"or after calling the generic view."
msgstr ""

msgid ""
"Imagine we had a ``last_accessed`` field on our ``Author`` model that we "
"were using to keep track of the last time anybody looked at that author::"
msgstr ""

msgid ""
"The generic ``DetailView`` class, of course, wouldn't know anything about "
"this field, but once again we could easily write a custom view to keep that "
"field updated."
msgstr ""

msgid ""
"First, we'd need to add an author detail bit in the URLconf to point to a "
"custom view::"
msgstr ""

msgid ""
"Then we'd write our new view -- ``get_object`` is the method that retrieves "
"the object -- so we simply override it and wrap the call::"
msgstr ""

msgid ""
"The URLconf here uses the named group ``pk`` - this name is the default name "
"that ``DetailView`` uses to find the value of the primary key used to filter "
"the queryset."
msgstr ""

msgid ""
"If you want to call the group something else, you can set ``pk_url_kwarg`` "
"on the view. More details can be found in the reference for :class:`~django."
"views.generic.detail.DetailView`"
msgstr ""

msgid "Form handling with class-based views"
msgstr ""

msgid "Form processing generally has 3 paths:"
msgstr ""

msgid "Initial GET (blank or prepopulated form)"
msgstr ""

msgid "POST with invalid data (typically redisplay form with errors)"
msgstr ""

msgid "POST with valid data (process the data and typically redirect)"
msgstr ""

msgid ""
"Implementing this yourself often results in a lot of repeated boilerplate "
"code (see :ref:`Using a form in a view<using-a-form-in-a-view>`). To help "
"avoid this, Django provides a collection of generic class-based views for "
"form processing."
msgstr ""

msgid "Basic forms"
msgstr ""

msgid "Given a simple contact form:"
msgstr ""

msgid "forms.py"
msgstr ""

msgid "The view can be constructed using a ``FormView``:"
msgstr ""

msgid "views.py"
msgstr ""

msgid "Notes:"
msgstr "注意："

msgid ""
"FormView inherits :class:`~django.views.generic.base.TemplateResponseMixin` "
"so :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"can be used here."
msgstr ""

msgid ""
"The default implementation for :meth:`~django.views.generic.edit.FormMixin."
"form_valid` simply redirects to the :attr:`~django.views.generic.edit."
"FormMixin.success_url`."
msgstr ""

msgid "Model forms"
msgstr ""

msgid ""
"Generic views really shine when working with models.  These generic views "
"will automatically create a :class:`~django.forms.ModelForm`, so long as "
"they can work out which model class to use:"
msgstr ""

msgid ""
"If the :attr:`~django.views.generic.edit.ModelFormMixin.model` attribute is "
"given, that model class will be used."
msgstr ""

msgid ""
"If :meth:`~django.views.generic.detail.SingleObjectMixin.get_object()` "
"returns an object, the class of that object will be used."
msgstr ""

msgid ""
"If a :attr:`~django.views.generic.detail.SingleObjectMixin.queryset` is "
"given, the model for that queryset will be used."
msgstr ""

msgid ""
"Model form views provide a :meth:`~django.views.generic.edit.ModelFormMixin."
"form_valid()` implementation that saves the model automatically.  You can "
"override this if you have any special requirements; see below for examples."
msgstr ""

msgid ""
"You don't even need to provide a ``success_url`` for :class:`~django.views."
"generic.edit.CreateView` or :class:`~django.views.generic.edit.UpdateView` - "
"they will use :meth:`~django.db.models.Model.get_absolute_url()` on the "
"model object if available."
msgstr ""

msgid ""
"If you want to use a custom :class:`~django.forms.ModelForm` (for instance "
"to add extra validation) simply set :attr:`~django.views.generic.edit."
"FormMixin.form_class` on your view."
msgstr ""

msgid ""
"When specifying a custom form class, you must still specify the model, even "
"though the :attr:`~django.views.generic.edit.FormMixin.form_class` may be a :"
"class:`~django.forms.ModelForm`."
msgstr ""

msgid ""
"First we need to add :meth:`~django.db.models.Model.get_absolute_url()` to "
"our ``Author`` class:"
msgstr ""

msgid "models.py"
msgstr ""

msgid ""
"Then we can use :class:`CreateView` and friends to do the actual work. "
"Notice how we're just configuring the generic class-based views here; we "
"don't have to write any logic ourselves:"
msgstr ""

msgid ""
"We have to use :func:`~django.urls.reverse_lazy` here, not just "
"``reverse()`` as the urls are not loaded when the file is imported."
msgstr ""

msgid ""
"The ``fields`` attribute works the same way as the ``fields`` attribute on "
"the inner ``Meta`` class on :class:`~django.forms.ModelForm`. Unless you "
"define the form class in another way, the attribute is required and the view "
"will raise an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"if it's not."
msgstr ""

msgid ""
"If you specify both the :attr:`~django.views.generic.edit.ModelFormMixin."
"fields` and :attr:`~django.views.generic.edit.FormMixin.form_class` "
"attributes, an :exc:`~django.core.exceptions.ImproperlyConfigured` exception "
"will be raised."
msgstr ""

msgid "Finally, we hook these new views into the URLconf:"
msgstr ""

msgid "urls.py"
msgstr ""

msgid ""
"These views inherit :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` which uses :attr:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin.template_name_suffix` to construct "
"the :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` "
"based on the model."
msgstr ""

msgid "In this example:"
msgstr ""

msgid ""
":class:`CreateView` and :class:`UpdateView` use ``myapp/author_form.html``"
msgstr ""

msgid ":class:`DeleteView` uses ``myapp/author_confirm_delete.html``"
msgstr ""

msgid ""
"If you wish to have separate templates for :class:`CreateView` and :class:"
"`UpdateView`, you can set either :attr:`~django.views.generic.base."
"TemplateResponseMixin.template_name` or :attr:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin.template_name_suffix` on your view class."
msgstr ""

msgid "Models and ``request.user``"
msgstr ""

msgid ""
"To track the user that created an object using a :class:`CreateView`, you "
"can use a custom :class:`~django.forms.ModelForm` to do this. First, add the "
"foreign key relation to the model:"
msgstr ""

msgid ""
"In the view, ensure that you don't include ``created_by`` in the list of "
"fields to edit, and override :meth:`~django.views.generic.edit."
"ModelFormMixin.form_valid()` to add the user:"
msgstr ""

msgid ""
"Note that you'll need to :ref:`decorate this view<decorating-class-based-"
"views>` using :func:`~django.contrib.auth.decorators.login_required`, or "
"alternatively handle unauthorized users in the :meth:`~django.views.generic."
"edit.ModelFormMixin.form_valid()`."
msgstr ""

msgid "AJAX example"
msgstr ""

msgid ""
"Here is a simple example showing how you might go about implementing a form "
"that works for AJAX requests as well as 'normal' form POSTs::"
msgstr ""

msgid "Class-based views"
msgstr "基于类的视图"

msgid ""
"A view is a callable which takes a request and returns a response. This can "
"be more than just a function, and Django provides an example of some classes "
"which can be used as views. These allow you to structure your views and "
"reuse code by harnessing inheritance and mixins. There are also some generic "
"views for simple tasks which we'll get to later, but you may want to design "
"your own structure of reusable views which suits your use case. For full "
"details, see the :doc:`class-based views reference documentation</ref/class-"
"based-views/index>`."
msgstr ""
"视图是可调用的，能接受用户的请求并返回响应。视图远不只是个函数，Django提供了"
"一些可用作视图的类的示例，允许你通过继承和复用构建自己的视图并且复用这些代"
"码。虽然接下来还会介绍一些用于简单任务的通用视图，但你可能想自己设计可复用的"
"视图结构，以便针对某些特殊场景。详情请见 class-based views reference "
"documentation</ref/class-based-views/index> 。"

msgid "Basic examples"
msgstr ""

msgid ""
"Django provides base view classes which will suit a wide range of "
"applications. All views inherit from the :class:`~django.views.generic.base."
"View` class, which handles linking the view in to the URLs, HTTP method "
"dispatching and other simple features. :class:`~django.views.generic.base."
"RedirectView` is for a simple HTTP redirect, and :class:`~django.views."
"generic.base.TemplateView` extends the base class to make it also render a "
"template."
msgstr ""

msgid "Simple usage in your URLconf"
msgstr ""

msgid ""
"The simplest way to use generic views is to create them directly in your "
"URLconf. If you're only changing a few simple attributes on a class-based "
"view, you can simply pass them into the :meth:`~django.views.generic.base."
"View.as_view` method call itself::"
msgstr ""

msgid ""
"Any arguments passed to :meth:`~django.views.generic.base.View.as_view` will "
"override attributes set on the class. In this example, we set "
"``template_name`` on the ``TemplateView``. A similar overriding pattern can "
"be used for the ``url`` attribute on :class:`~django.views.generic.base."
"RedirectView`."
msgstr ""

msgid "Subclassing generic views"
msgstr ""

msgid ""
"The second, more powerful way to use generic views is to inherit from an "
"existing view and override attributes (such as the ``template_name``) or "
"methods (such as ``get_context_data``) in your subclass to provide new "
"values or methods. Consider, for example, a view that just displays one "
"template, ``about.html``. Django has a generic view to do this - :class:"
"`~django.views.generic.base.TemplateView` - so we can just subclass it, and "
"override the template name::"
msgstr ""

msgid ""
"Then we just need to add this new view into our URLconf. :class:`~django."
"views.generic.base.TemplateView` is a class, not a function, so we point the "
"URL to the :meth:`~django.views.generic.base.View.as_view` class method "
"instead, which provides a function-like entry to class-based views::"
msgstr ""

msgid ""
"For more information on how to use the built in generic views, consult the "
"next topic on :doc:`generic class-based views</topics/class-based-views/"
"generic-display>`."
msgstr ""

msgid "Supporting other HTTP methods"
msgstr ""

msgid ""
"Suppose somebody wants to access our book library over HTTP using the views "
"as an API. The API client would connect every now and then and download book "
"data for the books published since last visit. But if no new books appeared "
"since then, it is a waste of CPU time and bandwidth to fetch the books from "
"the database, render a full response and send it to the client. It might be "
"preferable to ask the API when the most recent book was published."
msgstr ""

msgid "We map the URL to book list view in the URLconf::"
msgstr ""

msgid "And the view::"
msgstr ""

msgid ""
"If the view is accessed from a ``GET`` request, a plain-and-simple object "
"list is returned in the response (using ``book_list.html`` template). But if "
"the client issues a ``HEAD`` request, the response has an empty body and the "
"``Last-Modified`` header indicates when the most recent book was published. "
"Based on this information, the client may or may not download the full "
"object list."
msgstr ""

msgid "Introduction to class-based views"
msgstr "基于类的视图"

msgid ""
"Class-based views provide an alternative way to implement views as Python "
"objects instead of functions. They do not replace function-based views, but "
"have certain differences and advantages when compared to function-based "
"views:"
msgstr ""

msgid ""
"Organization of code related to specific HTTP methods (``GET``, ``POST``, "
"etc.) can be addressed by separate methods instead of conditional branching."
msgstr ""

msgid ""
"Object oriented techniques such as mixins (multiple inheritance) can be used "
"to factor code into reusable components."
msgstr ""

msgid ""
"The relationship and history of generic views, class-based views, and class-"
"based generic views"
msgstr ""

msgid ""
"In the beginning there was only the view function contract, Django passed "
"your function an :class:`~django.http.HttpRequest` and expected back an :"
"class:`~django.http.HttpResponse`. This was the extent of what Django "
"provided."
msgstr ""

msgid ""
"Early on it was recognized that there were common idioms and patterns found "
"in view development. Function-based generic views were introduced to "
"abstract these patterns and ease view development for the common cases."
msgstr ""

msgid ""
"The problem with function-based generic views is that while they covered the "
"simple cases well, there was no way to extend or customize them beyond some "
"simple configuration options, limiting their usefulness in many real-world "
"applications."
msgstr ""

msgid ""
"Class-based generic views were created with the same objective as function-"
"based generic views, to make view development easier. However, the way the "
"solution is implemented, through the use of mixins, provides a toolkit that "
"results in class-based generic views being more extensible and flexible than "
"their function-based counterparts."
msgstr ""

msgid ""
"If you have tried function based generic views in the past and found them "
"lacking, you should not think of class-based generic views as simply a class-"
"based equivalent, but rather as a fresh approach to solving the original "
"problems that generic views were meant to solve."
msgstr ""

msgid ""
"The toolkit of base classes and mixins that Django uses to build class-based "
"generic views are built for maximum flexibility, and as such have many hooks "
"in the form of default method implementations and attributes that you are "
"unlikely to be concerned with in the simplest use cases. For example, "
"instead of limiting you to a class-based attribute for ``form_class``, the "
"implementation uses a ``get_form`` method, which calls a ``get_form_class`` "
"method, which in its default implementation just returns the ``form_class`` "
"attribute of the class. This gives you several options for specifying what "
"form to use, from a simple attribute, to a fully dynamic, callable hook. "
"These options seem to add hollow complexity for simple situations, but "
"without them, more advanced designs would be limited."
msgstr ""

msgid "Using class-based views"
msgstr ""

msgid ""
"At its core, a class-based view allows you to respond to different HTTP "
"request methods with different class instance methods, instead of with "
"conditionally branching code inside a single view function."
msgstr ""

msgid ""
"So where the code to handle HTTP ``GET`` in a view function would look "
"something like::"
msgstr ""

msgid "In a class-based view, this would become::"
msgstr ""

msgid ""
"Because Django's URL resolver expects to send the request and associated "
"arguments to a callable function, not a class, class-based views have an :"
"meth:`~django.views.generic.base.View.as_view` class method which returns a "
"function that can be called when a request arrives for a URL matching the "
"associated pattern. The function creates an instance of the class and calls "
"its :meth:`~django.views.generic.base.View.dispatch` method. ``dispatch`` "
"looks at the request to determine whether it is a ``GET``, ``POST``, etc, "
"and relays the request to a matching method if one is defined, or raises :"
"class:`~django.http.HttpResponseNotAllowed` if not::"
msgstr ""

msgid ""
"It is worth noting that what your method returns is identical to what you "
"return from a function-based view, namely some form of :class:`~django.http."
"HttpResponse`. This means that :doc:`http shortcuts </topics/http/"
"shortcuts>` or :class:`~django.template.response.TemplateResponse` objects "
"are valid to use inside a class-based view."
msgstr ""

msgid ""
"While a minimal class-based view does not require any class attributes to "
"perform its job, class attributes are useful in many class-based designs, "
"and there are two ways to configure or set class attributes."
msgstr ""

msgid ""
"The first is the standard Python way of subclassing and overriding "
"attributes and methods in the subclass. So that if your parent class had an "
"attribute ``greeting`` like this::"
msgstr ""

msgid "You can override that in a subclass::"
msgstr ""

msgid ""
"Another option is to configure class attributes as keyword arguments to the :"
"meth:`~django.views.generic.base.View.as_view` call in the URLconf::"
msgstr ""

msgid ""
"While your class is instantiated for each request dispatched to it, class "
"attributes set through the :meth:`~django.views.generic.base.View.as_view` "
"entry point are configured only once at the time your URLs are imported."
msgstr ""

msgid "Using mixins"
msgstr ""

msgid ""
"Mixins are a form of multiple inheritance where behaviors and attributes of "
"multiple parent classes can be combined."
msgstr ""

msgid ""
"For example, in the generic class-based views there is a mixin called :class:"
"`~django.views.generic.base.TemplateResponseMixin` whose primary purpose is "
"to define the method :meth:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response`. When combined with the behavior of the :class:`~django."
"views.generic.base.View` base class, the result is a :class:`~django.views."
"generic.base.TemplateView` class that will dispatch requests to the "
"appropriate matching methods (a behavior defined in the ``View`` base "
"class), and that has a :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response` method that uses a :attr:`~django."
"views.generic.base.TemplateResponseMixin.template_name` attribute to return "
"a :class:`~django.template.response.TemplateResponse` object (a behavior "
"defined in the ``TemplateResponseMixin``)."
msgstr ""

msgid ""
"Mixins are an excellent way of reusing code across multiple classes, but "
"they come with some cost. The more your code is scattered among mixins, the "
"harder it will be to read a child class and know what exactly it is doing, "
"and the harder it will be to know which methods from which mixins to "
"override if you are subclassing something that has a deep inheritance tree."
msgstr ""

msgid ""
"Note also that you can only inherit from one generic view - that is, only "
"one parent class may inherit from :class:`~django.views.generic.base.View` "
"and the rest (if any) should be mixins. Trying to inherit from more than one "
"class that inherits from ``View`` - for example, trying to use a form at the "
"top of a list and combining :class:`~django.views.generic.edit."
"ProcessFormView` and :class:`~django.views.generic.list.ListView` - won't "
"work as expected."
msgstr ""

msgid "Handling forms with class-based views"
msgstr ""

msgid ""
"A basic function-based view that handles forms may look something like this::"
msgstr ""

msgid "A similar class-based view might look like::"
msgstr ""

msgid ""
"This is a very simple case, but you can see that you would then have the "
"option of customizing this view by overriding any of the class attributes, e."
"g. ``form_class``, via URLconf configuration, or subclassing and overriding "
"one or more of the methods (or both!)."
msgstr ""

msgid "Decorating class-based views"
msgstr ""

msgid ""
"The extension of class-based views isn't limited to using mixins. You can "
"also use decorators. Since class-based views aren't functions, decorating "
"them works differently depending on if you're using ``as_view()`` or "
"creating a subclass."
msgstr ""

msgid "Decorating in URLconf"
msgstr ""

msgid ""
"The simplest way of decorating class-based views is to decorate the result "
"of the :meth:`~django.views.generic.base.View.as_view` method. The easiest "
"place to do this is in the URLconf where you deploy your view::"
msgstr ""

msgid ""
"This approach applies the decorator on a per-instance basis. If you want "
"every instance of a view to be decorated, you need to take a different "
"approach."
msgstr ""

msgid "Decorating the class"
msgstr ""

msgid ""
"To decorate every instance of a class-based view, you need to decorate the "
"class definition itself. To do this you apply the decorator to the :meth:"
"`~django.views.generic.base.View.dispatch` method of the class."
msgstr ""

msgid ""
"A method on a class isn't quite the same as a standalone function, so you "
"can't just apply a function decorator to the method -- you need to transform "
"it into a method decorator first. The ``method_decorator`` decorator "
"transforms a function decorator into a method decorator so that it can be "
"used on an instance method. For example::"
msgstr ""

msgid ""
"Or, more succinctly, you can decorate the class instead and pass the name of "
"the method to be decorated as the keyword argument ``name``::"
msgstr ""

msgid ""
"If you have a set of common decorators used in several places, you can "
"define a list or tuple of decorators and use this instead of invoking "
"``method_decorator()`` multiple times. These two classes are equivalent::"
msgstr ""

msgid ""
"The decorators will process a request in the order they are passed to the "
"decorator. In the example, ``never_cache()`` will process the request before "
"``login_required()``."
msgstr ""

msgid ""
"In this example, every instance of ``ProtectedView`` will have login "
"protection."
msgstr ""

msgid ""
"``method_decorator`` passes ``*args`` and ``**kwargs`` as parameters to the "
"decorated method on the class. If your method does not accept a compatible "
"set of parameters it will raise a ``TypeError`` exception."
msgstr ""

msgid "Using mixins with class-based views"
msgstr ""

msgid ""
"This is an advanced topic. A working knowledge of :doc:`Django's class-based "
"views<index>` is advised before exploring these techniques."
msgstr ""

msgid ""
"Django's built-in class-based views provide a lot of functionality, but some "
"of it you may want to use separately. For instance, you may want to write a "
"view that renders a template to make the HTTP response, but you can't use :"
"class:`~django.views.generic.base.TemplateView`; perhaps you need to render "
"a template only on ``POST``, with ``GET`` doing something else entirely. "
"While you could use :class:`~django.template.response.TemplateResponse` "
"directly, this will likely result in duplicate code."
msgstr ""

msgid ""
"For this reason, Django also provides a number of mixins that provide more "
"discrete functionality. Template rendering, for instance, is encapsulated in "
"the :class:`~django.views.generic.base.TemplateResponseMixin`. The Django "
"reference documentation contains :doc:`full documentation of all the mixins</"
"ref/class-based-views/mixins>`."
msgstr ""

msgid "Context and template responses"
msgstr ""

msgid ""
"Two central mixins are provided that help in providing a consistent "
"interface to working with templates in class-based views."
msgstr ""

msgid ":class:`~django.views.generic.base.TemplateResponseMixin`"
msgstr ""

msgid ""
"Every built in view which returns a :class:`~django.template.response."
"TemplateResponse` will call the :meth:`~django.views.generic.base."
"TemplateResponseMixin.render_to_response()` method that "
"``TemplateResponseMixin`` provides. Most of the time this will be called for "
"you (for instance, it is called by the ``get()`` method implemented by both :"
"class:`~django.views.generic.base.TemplateView` and :class:`~django.views."
"generic.detail.DetailView`); similarly, it's unlikely that you'll need to "
"override it, although if you want your response to return something not "
"rendered via a Django template then you'll want to do it. For an example of "
"this, see the :ref:`JSONResponseMixin example <jsonresponsemixin-example>`."
msgstr ""

msgid ""
"``render_to_response()`` itself calls :meth:`~django.views.generic.base."
"TemplateResponseMixin.get_template_names`, which by default will just look "
"up :attr:`~django.views.generic.base.TemplateResponseMixin.template_name` on "
"the class-based view; two other mixins (:class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin` and :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`) override this to provide more flexible "
"defaults when dealing with actual objects."
msgstr ""

msgid ":class:`~django.views.generic.base.ContextMixin`"
msgstr ""

msgid ""
"Every built in view which needs context data, such as for rendering a "
"template (including ``TemplateResponseMixin`` above), should call :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` passing any "
"data they want to ensure is in there as keyword arguments. "
"``get_context_data()`` returns a dictionary; in ``ContextMixin`` it simply "
"returns its keyword arguments, but it is common to override this to add more "
"members to the dictionary. You can also use the :attr:`~django.views.generic."
"base.ContextMixin.extra_context` attribute."
msgstr ""

msgid "Building up Django's generic class-based views"
msgstr ""

msgid ""
"Let's look at how two of Django's generic class-based views are built out of "
"mixins providing discrete functionality. We'll consider :class:`~django."
"views.generic.detail.DetailView`, which renders a \"detail\" view of an "
"object, and :class:`~django.views.generic.list.ListView`, which will render "
"a list of objects, typically from a queryset, and optionally paginate them. "
"This will introduce us to four mixins which between them provide useful "
"functionality when working with either a single Django object, or multiple "
"objects."
msgstr ""

msgid ""
"There are also mixins involved in the generic edit views (:class:`~django."
"views.generic.edit.FormView`, and the model-specific views :class:`~django."
"views.generic.edit.CreateView`, :class:`~django.views.generic.edit."
"UpdateView` and :class:`~django.views.generic.edit.DeleteView`), and in the "
"date-based generic views. These are covered in the :doc:`mixin reference "
"documentation</ref/class-based-views/mixins>`."
msgstr ""

msgid "``DetailView``: working with a single Django object"
msgstr ""

msgid ""
"To show the detail of an object, we basically need to do two things: we need "
"to look up the object and then we need to make a :class:`~django.template."
"response.TemplateResponse` with a suitable template, and that object as "
"context."
msgstr ""

msgid ""
"To get the object, :class:`~django.views.generic.detail.DetailView` relies "
"on :class:`~django.views.generic.detail.SingleObjectMixin`, which provides "
"a :meth:`~django.views.generic.detail.SingleObjectMixin.get_object` method "
"that figures out the object based on the URL of the request (it looks for "
"``pk`` and ``slug`` keyword arguments as declared in the URLConf, and looks "
"the object up either from the :attr:`~django.views.generic.detail."
"SingleObjectMixin.model` attribute on the view, or the :attr:`~django.views."
"generic.detail.SingleObjectMixin.queryset` attribute if that's provided). "
"``SingleObjectMixin`` also overrides :meth:`~django.views.generic.base."
"ContextMixin.get_context_data()`, which is used across all Django's built in "
"class-based views to supply context data for template renders."
msgstr ""

msgid ""
"To then make a :class:`~django.template.response.TemplateResponse`, :class:"
"`DetailView` uses :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, which extends :class:`~django.views."
"generic.base.TemplateResponseMixin`, overriding :meth:`~django.views.generic."
"base.TemplateResponseMixin.get_template_names()` as discussed above. It "
"actually provides a fairly sophisticated set of options, but the main one "
"that most people are going to use is ``<app_label>/<model_name>_detail."
"html``. The ``_detail`` part can be changed by setting :attr:`~django.views."
"generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix` on a "
"subclass to something else. (For instance, the :doc:`generic edit "
"views<generic-editing>` use ``_form`` for create and update views, and "
"``_confirm_delete`` for delete views.)"
msgstr ""

msgid "``ListView``: working with many Django objects"
msgstr ""

msgid ""
"Lists of objects follow roughly the same pattern: we need a (possibly "
"paginated) list of objects, typically a :class:`~django.db.models.query."
"QuerySet`, and then we need to make a :class:`~django.template.response."
"TemplateResponse` with a suitable template using that list of objects."
msgstr ""

msgid ""
"To get the objects, :class:`~django.views.generic.list.ListView` uses :class:"
"`~django.views.generic.list.MultipleObjectMixin`, which provides both :meth:"
"`~django.views.generic.list.MultipleObjectMixin.get_queryset` and :meth:"
"`~django.views.generic.list.MultipleObjectMixin.paginate_queryset`. Unlike "
"with :class:`~django.views.generic.detail.SingleObjectMixin`, there's no "
"need to key off parts of the URL to figure out the queryset to work with, so "
"the default just uses the :attr:`~django.views.generic.list."
"MultipleObjectMixin.queryset` or :attr:`~django.views.generic.list."
"MultipleObjectMixin.model` attribute on the view class. A common reason to "
"override :meth:`~django.views.generic.list.MultipleObjectMixin.get_queryset` "
"here would be to dynamically vary the objects, such as depending on the "
"current user or to exclude posts in the future for a blog."
msgstr ""

msgid ""
":class:`~django.views.generic.list.MultipleObjectMixin` also overrides :meth:"
"`~django.views.generic.base.ContextMixin.get_context_data()` to include "
"appropriate context variables for pagination (providing dummies if "
"pagination is disabled). It relies on ``object_list`` being passed in as a "
"keyword argument, which :class:`ListView` arranges for it."
msgstr ""

msgid ""
"To make a :class:`~django.template.response.TemplateResponse`, :class:"
"`ListView` then uses :class:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin`; as with :class:`~django.views.generic."
"detail.SingleObjectTemplateResponseMixin` above, this overrides "
"``get_template_names()`` to provide :meth:`a range of options <django.views."
"generic.list.MultipleObjectTemplateResponseMixin>`, with the most commonly-"
"used being ``<app_label>/<model_name>_list.html``, with the ``_list`` part "
"again being taken from the :attr:`~django.views.generic.list."
"MultipleObjectTemplateResponseMixin.template_name_suffix` attribute. (The "
"date based generic views use suffixes such as ``_archive``, "
"``_archive_year`` and so on to use different templates for the various "
"specialized date-based list views.)"
msgstr ""

msgid "Using Django's class-based view mixins"
msgstr ""

msgid ""
"Now we've seen how Django's generic class-based views use the provided "
"mixins, let's look at other ways we can combine them. Of course we're still "
"going to be combining them with either built-in class-based views, or other "
"generic class-based views, but there are a range of rarer problems you can "
"solve than are provided for by Django out of the box."
msgstr ""

msgid ""
"Not all mixins can be used together, and not all generic class based views "
"can be used with all other mixins. Here we present a few examples that do "
"work; if you want to bring together other functionality then you'll have to "
"consider interactions between attributes and methods that overlap between "
"the different classes you're using, and how `method resolution order`_ will "
"affect which versions of the methods will be called in what order."
msgstr ""

msgid ""
"The reference documentation for Django's :doc:`class-based views</ref/class-"
"based-views/index>` and :doc:`class-based view mixins</ref/class-based-views/"
"mixins>` will help you in understanding which attributes and methods are "
"likely to cause conflict between different classes and mixins."
msgstr ""

msgid ""
"If in doubt, it's often better to back off and base your work on :class:"
"`View` or :class:`TemplateView`, perhaps with :class:`~django.views.generic."
"detail.SingleObjectMixin` and :class:`~django.views.generic.list."
"MultipleObjectMixin`. Although you will probably end up writing more code, "
"it is more likely to be clearly understandable to someone else coming to it "
"later, and with fewer interactions to worry about you will save yourself "
"some thinking. (Of course, you can always dip into Django's implementation "
"of the generic class-based views for inspiration on how to tackle problems.)"
msgstr ""

msgid "Using ``SingleObjectMixin`` with View"
msgstr ""

msgid ""
"If we want to write a simple class-based view that responds only to "
"``POST``, we'll subclass :class:`~django.views.generic.base.View` and write "
"a ``post()`` method in the subclass. However if we want our processing to "
"work on a particular object, identified from the URL, we'll want the "
"functionality provided by :class:`~django.views.generic.detail."
"SingleObjectMixin`."
msgstr ""

msgid ""
"We'll demonstrate this with the ``Author`` model we used in the :doc:"
"`generic class-based views introduction<generic-display>`."
msgstr ""

msgid ""
"In practice you'd probably want to record the interest in a key-value store "
"rather than in a relational database, so we've left that bit out. The only "
"bit of the view that needs to worry about using :class:`~django.views."
"generic.detail.SingleObjectMixin` is where we want to look up the author "
"we're interested in, which it just does with a simple call to ``self."
"get_object()``. Everything else is taken care of for us by the mixin."
msgstr ""

msgid "We can hook this into our URLs easily enough:"
msgstr ""

msgid ""
"Note the ``pk`` named group, which :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object` uses to look up the ``Author`` instance. You "
"could also use a slug, or any of the other features of :class:`~django.views."
"generic.detail.SingleObjectMixin`."
msgstr ""

msgid "Using ``SingleObjectMixin`` with ``ListView``"
msgstr ""

msgid ""
":class:`~django.views.generic.list.ListView` provides built-in pagination, "
"but you might want to paginate a list of objects that are all linked (by a "
"foreign key) to another object. In our publishing example, you might want to "
"paginate through all the books by a particular publisher."
msgstr ""

msgid ""
"One way to do this is to combine :class:`ListView` with :class:`~django."
"views.generic.detail.SingleObjectMixin`, so that the queryset for the "
"paginated list of books can hang off the publisher found as the single "
"object. In order to do this, we need to have two different querysets:"
msgstr ""

msgid ""
"``Book`` queryset for use by :class:`~django.views.generic.list.ListView`"
msgstr ""

msgid ""
"Since we have access to the ``Publisher`` whose books we want to list, we "
"simply override ``get_queryset()`` and use the ``Publisher``’s :ref:`reverse "
"foreign key manager<backwards-related-objects>`."
msgstr ""

msgid ""
"``Publisher`` queryset for use in :meth:`~django.views.generic.detail."
"SingleObjectMixin.get_object()`"
msgstr ""

msgid ""
"We'll rely on the default implementation of ``get_object()`` to fetch the "
"correct ``Publisher`` object. However, we need to explicitly pass a "
"``queryset`` argument because otherwise the default implementation of "
"``get_object()`` would call ``get_queryset()`` which we have overridden to "
"return ``Book`` objects instead of ``Publisher`` ones."
msgstr ""

msgid ""
"We have to think carefully about ``get_context_data()``. Since both :class:"
"`~django.views.generic.detail.SingleObjectMixin` and :class:`ListView` will "
"put things in the context data under the value of ``context_object_name`` if "
"it's set, we'll instead explicitly ensure the ``Publisher`` is in the "
"context data. :class:`ListView` will add in the suitable ``page_obj`` and "
"``paginator`` for us providing we remember to call ``super()``."
msgstr ""

msgid "Now we can write a new ``PublisherDetail``::"
msgstr ""

msgid ""
"Notice how we set ``self.object`` within ``get()`` so we can use it again "
"later in ``get_context_data()`` and ``get_queryset()``. If you don't set "
"``template_name``, the template will default to the normal :class:`ListView` "
"choice, which in this case would be ``\"books/book_list.html\"`` because "
"it's a list of books; :class:`ListView` knows nothing about :class:`~django."
"views.generic.detail.SingleObjectMixin`, so it doesn't have any clue this "
"view is anything to do with a ``Publisher``."
msgstr ""

msgid ""
"The ``paginate_by`` is deliberately small in the example so you don't have "
"to create lots of books to see the pagination working! Here's the template "
"you'd want to use:"
msgstr ""

msgid "Avoid anything more complex"
msgstr ""

msgid ""
"Generally you can use :class:`~django.views.generic.base."
"TemplateResponseMixin` and :class:`~django.views.generic.detail."
"SingleObjectMixin` when you need their functionality. As shown above, with a "
"bit of care you can even combine ``SingleObjectMixin`` with :class:`~django."
"views.generic.list.ListView`. However things get increasingly complex as you "
"try to do so, and a good rule of thumb is:"
msgstr ""

msgid ""
"Each of your views should use only mixins or views from one of the groups of "
"generic class-based views: :doc:`detail, list<generic-display>`, :doc:"
"`editing<generic-editing>` and date. For example it's fine to combine :class:"
"`TemplateView` (built in view) with :class:`~django.views.generic.list."
"MultipleObjectMixin` (generic list), but you're likely to have problems "
"combining ``SingleObjectMixin`` (generic detail) with "
"``MultipleObjectMixin`` (generic list)."
msgstr ""

msgid ""
"To show what happens when you try to get more sophisticated, we show an "
"example that sacrifices readability and maintainability when there is a "
"simpler solution. First, let's look at a naive attempt to combine :class:"
"`~django.views.generic.detail.DetailView` with :class:`~django.views.generic."
"edit.FormMixin` to enable us to ``POST`` a Django :class:`~django.forms."
"Form` to the same URL as we're displaying an object using :class:"
"`DetailView`."
msgstr ""

msgid "Using ``FormMixin`` with ``DetailView``"
msgstr ""

msgid ""
"Think back to our earlier example of using :class:`View` and :class:`~django."
"views.generic.detail.SingleObjectMixin` together. We were recording a user's "
"interest in a particular author; say now that we want to let them leave a "
"message saying why they like them. Again, let's assume we're not going to "
"store this in a relational database but instead in something more esoteric "
"that we won't worry about here."
msgstr ""

msgid ""
"At this point it's natural to reach for a :class:`~django.forms.Form` to "
"encapsulate the information sent from the user's browser to Django. Say also "
"that we're heavily invested in `REST`_, so we want to use the same URL for "
"displaying the author as for capturing the message from the user. Let's "
"rewrite our ``AuthorDetailView`` to do that."
msgstr ""

msgid ""
"We'll keep the ``GET`` handling from :class:`DetailView`, although we'll "
"have to add a :class:`~django.forms.Form` into the context data so we can "
"render it in the template. We'll also want to pull in form processing from :"
"class:`~django.views.generic.edit.FormMixin`, and write a bit of code so "
"that on ``POST`` the form gets called appropriately."
msgstr ""

msgid ""
"We use :class:`~django.views.generic.edit.FormMixin` and implement "
"``post()`` ourselves rather than try to mix :class:`DetailView` with :class:"
"`FormView` (which provides a suitable ``post()`` already) because both of "
"the views implement ``get()``, and things would get much more confusing."
msgstr ""

msgid "Our new ``AuthorDetail`` looks like this::"
msgstr ""

msgid ""
"``get_success_url()`` is just providing somewhere to redirect to, which gets "
"used in the default implementation of ``form_valid()``. We have to provide "
"our own ``post()`` as noted earlier, and override ``get_context_data()`` to "
"make the :class:`~django.forms.Form` available in the context data."
msgstr ""

msgid "A better solution"
msgstr ""

msgid ""
"It should be obvious that the number of subtle interactions between :class:"
"`~django.views.generic.edit.FormMixin` and :class:`DetailView` is already "
"testing our ability to manage things. It's unlikely you'd want to write this "
"kind of class yourself."
msgstr ""

msgid ""
"In this case, it would be fairly easy to just write the ``post()`` method "
"yourself, keeping :class:`DetailView` as the only generic functionality, "
"although writing :class:`~django.forms.Form` handling code involves a lot of "
"duplication."
msgstr ""

msgid ""
"Alternatively, it would still be easier than the above approach to have a "
"separate view for processing the form, which could use :class:`~django.views."
"generic.edit.FormView` distinct from :class:`DetailView` without concerns."
msgstr ""

msgid "An alternative better solution"
msgstr ""

msgid ""
"What we're really trying to do here is to use two different class based "
"views from the same URL. So why not do just that? We have a very clear "
"division here: ``GET`` requests should get the :class:`DetailView` (with "
"the :class:`~django.forms.Form` added to the context data), and ``POST`` "
"requests should get the :class:`FormView`. Let's set up those views first."
msgstr ""

msgid ""
"The ``AuthorDisplay`` view is almost the same as :ref:`when we first "
"introduced AuthorDetail<generic-views-extra-work>`; we have to write our own "
"``get_context_data()`` to make the ``AuthorInterestForm`` available to the "
"template. We'll skip the ``get_object()`` override from before for clarity::"
msgstr ""

msgid ""
"Then the ``AuthorInterest`` is a simple :class:`FormView`, but we have to "
"bring in :class:`~django.views.generic.detail.SingleObjectMixin` so we can "
"find the author we're talking about, and we have to remember to set "
"``template_name`` to ensure that form errors will render the same template "
"as ``AuthorDisplay`` is using on ``GET``::"
msgstr ""

msgid ""
"Finally we bring this together in a new ``AuthorDetail`` view. We already "
"know that calling :meth:`~django.views.generic.base.View.as_view()` on a "
"class-based view gives us something that behaves exactly like a function "
"based view, so we can do that at the point we choose between the two "
"subviews."
msgstr ""

msgid ""
"You can of course pass through keyword arguments to :meth:`~django.views."
"generic.base.View.as_view()` in the same way you would in your URLconf, such "
"as if you wanted the ``AuthorInterest`` behavior to also appear at another "
"URL but using a different template::"
msgstr ""

msgid ""
"This approach can also be used with any other generic class-based views or "
"your own class-based views inheriting directly from :class:`View` or :class:"
"`TemplateView`, as it keeps the different views as separate as possible."
msgstr ""

msgid "More than just HTML"
msgstr ""

msgid ""
"Where class-based views shine is when you want to do the same thing many "
"times. Suppose you're writing an API, and every view should return JSON "
"instead of rendered HTML."
msgstr ""

msgid ""
"We can create a mixin class to use in all of our views, handling the "
"conversion to JSON once."
msgstr ""

msgid "For example, a simple JSON mixin might look something like this::"
msgstr ""

msgid ""
"Check out the :doc:`/topics/serialization` documentation for more "
"information on how to correctly transform Django models and querysets into "
"JSON."
msgstr ""

msgid ""
"This mixin provides a ``render_to_json_response()`` method with the same "
"signature as :func:`~django.views.generic.base.TemplateResponseMixin."
"render_to_response()`. To use it, we simply need to mix it into a "
"``TemplateView`` for example, and override ``render_to_response()`` to call "
"``render_to_json_response()`` instead::"
msgstr ""

msgid ""
"Equally we could use our mixin with one of the generic views. We can make "
"our own version of :class:`~django.views.generic.detail.DetailView` by "
"mixing ``JSONResponseMixin`` with the ``django.views.generic.detail."
"BaseDetailView`` -- (the :class:`~django.views.generic.detail.DetailView` "
"before template rendering behavior has been mixed in)::"
msgstr ""

msgid ""
"This view can then be deployed in the same way as any other :class:`~django."
"views.generic.detail.DetailView`, with exactly the same behavior -- except "
"for the format of the response."
msgstr ""

msgid ""
"If you want to be really adventurous, you could even mix a :class:`~django."
"views.generic.detail.DetailView` subclass that is able to return *both* HTML "
"and JSON content, depending on some property of the HTTP request, such as a "
"query argument or a HTTP header. Just mix in both the ``JSONResponseMixin`` "
"and a :class:`~django.views.generic.detail."
"SingleObjectTemplateResponseMixin`, and override the implementation of :func:"
"`~django.views.generic.base.TemplateResponseMixin.render_to_response()` to "
"defer to the appropriate rendering method depending on the type of response "
"that the user requested::"
msgstr ""

msgid ""
"Because of the way that Python resolves method overloading, the call to "
"``super().render_to_response(context)`` ends up calling the :meth:`~django."
"views.generic.base.TemplateResponseMixin.render_to_response()` "
"implementation of :class:`~django.views.generic.base.TemplateResponseMixin`."
msgstr ""

msgid "Conditional View Processing"
msgstr ""

msgid ""
"HTTP clients can send a number of headers to tell the server about copies of "
"a resource that they have already seen. This is commonly used when "
"retrieving a Web page (using an HTTP ``GET`` request) to avoid sending all "
"the data for something the client has already retrieved. However, the same "
"headers can be used for all HTTP methods (``POST``, ``PUT``, ``DELETE``, "
"etc.)."
msgstr ""

msgid ""
"For each page (response) that Django sends back from a view, it might "
"provide two HTTP headers: the ``ETag`` header and the ``Last-Modified`` "
"header. These headers are optional on HTTP responses. They can be set by "
"your view function, or you can rely on the :class:`~django.middleware.http."
"ConditionalGetMiddleware` middleware to set the ``ETag`` header."
msgstr ""

msgid ""
"When the client next requests the same resource, it might send along a "
"header such as either `If-modified-since`_ or `If-unmodified-since`_, "
"containing the date of the last modification time it was sent, or either `If-"
"match`_ or `If-none-match`_, containing the last ``ETag`` it was sent. If "
"the current version of the page matches the ``ETag`` sent by the client, or "
"if the resource has not been modified, a 304 status code can be sent back, "
"instead of a full response, telling the client that nothing has changed. "
"Depending on the header, if the page has been modified or does not match the "
"``ETag`` sent by the client, a 412 status code (Precondition Failed) may be "
"returned."
msgstr ""

msgid ""
"When you need more fine-grained control you may use per-view conditional "
"processing functions."
msgstr ""

msgid "The ``condition`` decorator"
msgstr ""

msgid ""
"Sometimes (in fact, quite often) you can create functions to rapidly compute "
"the ETag_ value or the last-modified time for a resource, **without** "
"needing to do all the computations needed to construct the full view. Django "
"can then use these functions to provide an \"early bailout\" option for the "
"view processing. Telling the client that the content has not been modified "
"since the last request, perhaps."
msgstr ""

msgid ""
"These two functions are passed as parameters to the ``django.views."
"decorators.http.condition`` decorator. This decorator uses the two functions "
"(you only need to supply one, if you can't compute both quantities easily "
"and quickly) to work out if the headers in the HTTP request match those on "
"the resource. If they don't match, a new copy of the resource must be "
"computed and your normal view is called."
msgstr ""

msgid "The ``condition`` decorator's signature looks like this::"
msgstr ""

msgid ""
"The two functions, to compute the ETag and the last modified time, will be "
"passed the incoming ``request`` object and the same parameters, in the same "
"order, as the view function they are helping to wrap. The function passed "
"``last_modified_func`` should return a standard datetime value specifying "
"the last time the resource was modified, or ``None`` if the resource doesn't "
"exist. The function passed to the ``etag`` decorator should return a string "
"representing the `ETag`_ for the resource, or ``None`` if it doesn't exist."
msgstr ""

msgid ""
"The decorator sets the ``ETag`` and ``Last-Modified`` headers on the "
"response if they are not already set by the view and if the request's method "
"is safe (``GET`` or ``HEAD``)."
msgstr ""

msgid ""
"Using this feature usefully is probably best explained with an example. "
"Suppose you have this pair of models, representing a simple blog system::"
msgstr ""

msgid ""
"If the front page, displaying the latest blog entries, only changes when you "
"add a new blog entry, you can compute the last modified time very quickly. "
"You need the latest ``published`` date for every entry associated with that "
"blog. One way to do this would be::"
msgstr ""

msgid ""
"You can then use this function to provide early detection of an unchanged "
"page for your front page view::"
msgstr ""

msgid "Be careful with the order of decorators"
msgstr ""

msgid ""
"When ``condition()`` returns a conditional response, any decorators below it "
"will be skipped and won't apply to the response. Therefore, any decorators "
"that need to apply to both the regular view response and a conditional "
"response must be above ``condition()``. In particular, :func:`~django.views."
"decorators.vary.vary_on_cookie`, :func:`~django.views.decorators.vary."
"vary_on_headers`, and :func:`~django.views.decorators.cache.cache_control` "
"should come first because :rfc:`RFC 7232 <7232#section-4.1>` requires that "
"the headers they set be present on 304 responses."
msgstr ""

msgid "Shortcuts for only computing one value"
msgstr ""

msgid ""
"As a general rule, if you can provide functions to compute *both* the ETag "
"and the last modified time, you should do so. You don't know which headers "
"any given HTTP client will send you, so be prepared to handle both. However, "
"sometimes only one value is easy to compute and Django provides decorators "
"that handle only ETag or only last-modified computations."
msgstr ""

msgid ""
"The ``django.views.decorators.http.etag`` and ``django.views.decorators.http."
"last_modified`` decorators are passed the same type of functions as the "
"``condition`` decorator. Their signatures are::"
msgstr ""

msgid ""
"We could write the earlier example, which only uses a last-modified "
"function, using one of these decorators::"
msgstr ""

msgid "...or::"
msgstr ""

msgid "Use ``condition`` when testing both conditions"
msgstr ""

msgid ""
"It might look nicer to some people to try and chain the ``etag`` and "
"``last_modified`` decorators if you want to test both preconditions. "
"However, this would lead to incorrect behavior."
msgstr ""

msgid ""
"The first decorator doesn't know anything about the second and might answer "
"that the response is not modified even if the second decorators would "
"determine otherwise. The ``condition`` decorator uses both callback "
"functions simultaneously to work out the right action to take."
msgstr ""

msgid "Using the decorators with other HTTP methods"
msgstr ""

msgid ""
"The ``condition`` decorator is useful for more than only ``GET`` and "
"``HEAD`` requests (``HEAD`` requests are the same as ``GET`` in this "
"situation). It can also be used to provide checking for ``POST``, ``PUT`` "
"and ``DELETE`` requests. In these situations, the idea isn't to return a "
"\"not modified\" response, but to tell the client that the resource they are "
"trying to change has been altered in the meantime."
msgstr ""

msgid ""
"For example, consider the following exchange between the client and server:"
msgstr ""

msgid "Client requests ``/foo/``."
msgstr "用户请求``/foo/``。"

msgid "Server responds with some content with an ETag of ``\"abcd1234\"``."
msgstr ""

msgid ""
"Client sends an HTTP ``PUT`` request to ``/foo/`` to update the resource. It "
"also sends an ``If-Match: \"abcd1234\"`` header to specify the version it is "
"trying to update."
msgstr ""

msgid ""
"Server checks to see if the resource has changed, by computing the ETag the "
"same way it does for a ``GET`` request (using the same function). If the "
"resource *has* changed, it will return a 412 status code, meaning "
"\"precondition failed\"."
msgstr ""

msgid ""
"Client sends a ``GET`` request to ``/foo/``, after receiving a 412 response, "
"to retrieve an updated version of the content before updating it."
msgstr ""

msgid ""
"The important thing this example shows is that the same functions can be "
"used to compute the ETag and last modification values in all situations. In "
"fact, you **should** use the same functions, so that the same values are "
"returned every time."
msgstr ""

msgid "Validator headers with non-safe request methods"
msgstr ""

msgid ""
"The ``condition`` decorator only sets validator headers (``ETag`` and ``Last-"
"Modified``) for safe HTTP methods, i.e. ``GET`` and ``HEAD``. If you wish to "
"return them in other cases, set them in your view. See :rfc:"
"`7231#section-4.3.4` to learn about the distinction between setting a "
"validator header in response to requests made with ``PUT`` versus ``POST``."
msgstr ""

msgid "Comparison with middleware conditional processing"
msgstr ""

msgid ""
"Django provides simple and straightforward conditional ``GET`` handling via :"
"class:`django.middleware.http.ConditionalGetMiddleware`. While being easy to "
"use and suitable for many situations, the middleware has limitations for "
"advanced usage:"
msgstr ""

msgid "It's applied globally to all views in your project."
msgstr ""

msgid ""
"It doesn't save you from generating the response, which may be expensive."
msgstr ""

msgid "It's only appropriate for HTTP ``GET`` requests."
msgstr ""

msgid ""
"You should choose the most appropriate tool for your particular problem "
"here. If you have a way to compute ETags and modification times quickly and "
"if some view takes a while to generate the content, you should consider "
"using the ``condition`` decorator described in this document. If everything "
"already runs fairly quickly, stick to using the middleware and the amount of "
"network traffic sent back to the clients will still be reduced if the view "
"hasn't changed."
msgstr ""

msgid "Aggregation"
msgstr "聚合"

msgid ""
"The topic guide on :doc:`Django's database-abstraction API </topics/db/"
"queries>` described the way that you can use Django queries that create, "
"retrieve, update and delete individual objects. However, sometimes you will "
"need to retrieve values that are derived by summarizing or *aggregating* a "
"collection of objects. This topic guide describes the ways that aggregate "
"values can be generated and returned using Django queries."
msgstr ""
":doc:`Django 数据库抽象 API ` 描述了使用 Django queries 来增删查改单个对象的"
"方法。 然而，有时候你要获取的值需要根据一组对象聚合后才能得到。这个主题指南描"
"述了如何使用 Django queries 来生成和返回聚合值的方法。"

msgid ""
"Throughout this guide, we'll refer to the following models. These models are "
"used to track the inventory for a series of online bookstores:"
msgstr "整篇指南我们将引用以下模型。这些模型用来记录多个网上书店的库存。"

msgid "Cheat sheet"
msgstr "速查表"

msgid ""
"In a hurry? Here's how to do common aggregate queries, assuming the models "
"above:"
msgstr "下面是根据以上模型执行常见的聚合查询："

msgid "Generating aggregates over a ``QuerySet``"
msgstr "在 ``QuerySet`` 上生成聚合"

msgid ""
"Django provides two ways to generate aggregates. The first way is to "
"generate summary values over an entire ``QuerySet``. For example, say you "
"wanted to calculate the average price of all books available for sale. "
"Django's query syntax provides a means for describing the set of all books::"
msgstr ""
"Django 提供了两种生成聚合的方法。第一种方法是从整个 ``QuerySet`` 生成汇总值。"
"比如你想要计算所有在售书的平均价格。Django 的查询语法提供了一种用来描述所有图"
"书集合的方法："

msgid ""
"What we need is a way to calculate summary values over the objects that "
"belong to this ``QuerySet``. This is done by appending an ``aggregate()`` "
"clause onto the ``QuerySet``::"
msgstr ""
"可以通过在 ``QuerySet`` 后添加 ``aggregate()`` 子句来计算 ``QuerySet`` 对象的"
"汇总值。"

msgid ""
"The ``all()`` is redundant in this example, so this could be simplified to::"
msgstr ""

msgid ""
"The argument to the ``aggregate()`` clause describes the aggregate value "
"that we want to compute - in this case, the average of the ``price`` field "
"on the ``Book`` model. A list of the aggregate functions that are available "
"can be found in the :ref:`QuerySet reference <aggregation-functions>`."
msgstr ""

msgid ""
"``aggregate()`` is a terminal clause for a ``QuerySet`` that, when invoked, "
"returns a dictionary of name-value pairs. The name is an identifier for the "
"aggregate value; the value is the computed aggregate. The name is "
"automatically generated from the name of the field and the aggregate "
"function. If you want to manually specify a name for the aggregate value, "
"you can do so by providing that name when you specify the aggregate clause::"
msgstr ""

msgid ""
"If you want to generate more than one aggregate, you just add another "
"argument to the ``aggregate()`` clause. So, if we also wanted to know the "
"maximum and minimum price of all books, we would issue the query::"
msgstr ""

msgid "Generating aggregates for each item in a ``QuerySet``"
msgstr ""

msgid ""
"The second way to generate summary values is to generate an independent "
"summary for each object in a :class:`.QuerySet`. For example, if you are "
"retrieving a list of books, you may want to know how many authors "
"contributed to each book. Each Book has a many-to-many relationship with the "
"Author; we want to summarize this relationship for each book in the "
"``QuerySet``."
msgstr ""

msgid ""
"Per-object summaries can be generated using the :meth:`~.QuerySet.annotate` "
"clause. When an ``annotate()`` clause is specified, each object in the "
"``QuerySet`` will be annotated with the specified values."
msgstr ""

msgid ""
"The syntax for these annotations is identical to that used for the :meth:`~."
"QuerySet.aggregate` clause. Each argument to ``annotate()`` describes an "
"aggregate that is to be calculated. For example, to annotate books with the "
"number of authors:"
msgstr ""

msgid ""
"As with ``aggregate()``, the name for the annotation is automatically "
"derived from the name of the aggregate function and the name of the field "
"being aggregated. You can override this default name by providing an alias "
"when you specify the annotation::"
msgstr ""

msgid ""
"Unlike ``aggregate()``, ``annotate()`` is *not* a terminal clause. The "
"output of the ``annotate()`` clause is a ``QuerySet``; this ``QuerySet`` can "
"be modified using any other ``QuerySet`` operation, including ``filter()``, "
"``order_by()``, or even additional calls to ``annotate()``."
msgstr ""

msgid "Combining multiple aggregations"
msgstr ""

msgid ""
"Combining multiple aggregations with ``annotate()`` will `yield the wrong "
"results <https://code.djangoproject.com/ticket/10060>`_ because joins are "
"used instead of subqueries:"
msgstr ""

msgid ""
"For most aggregates, there is no way to avoid this problem, however, the :"
"class:`~django.db.models.Count` aggregate has a ``distinct`` parameter that "
"may help:"
msgstr ""

msgid "If in doubt, inspect the SQL query!"
msgstr ""

msgid ""
"In order to understand what happens in your query, consider inspecting the "
"``query`` property of your ``QuerySet``."
msgstr ""

msgid "Joins and aggregates"
msgstr ""

msgid ""
"So far, we have dealt with aggregates over fields that belong to the model "
"being queried. However, sometimes the value you want to aggregate will "
"belong to a model that is related to the model you are querying."
msgstr ""

msgid ""
"When specifying the field to be aggregated in an aggregate function, Django "
"will allow you to use the same :ref:`double underscore notation <field-"
"lookups-intro>` that is used when referring to related fields in filters. "
"Django will then handle any table joins that are required to retrieve and "
"aggregate the related value."
msgstr ""

msgid ""
"For example, to find the price range of books offered in each store, you "
"could use the annotation::"
msgstr ""

msgid ""
"This tells Django to retrieve the ``Store`` model, join (through the many-to-"
"many relationship) with the ``Book`` model, and aggregate on the price field "
"of the book model to produce a minimum and maximum value."
msgstr ""

msgid ""
"The same rules apply to the ``aggregate()`` clause. If you wanted to know "
"the lowest and highest price of any book that is available for sale in any "
"of the stores, you could use the aggregate::"
msgstr ""

msgid ""
"Join chains can be as deep as you require. For example, to extract the age "
"of the youngest author of any book available for sale, you could issue the "
"query::"
msgstr ""

msgid "Following relationships backwards"
msgstr ""

msgid ""
"In a way similar to :ref:`lookups-that-span-relationships`, aggregations and "
"annotations on fields of models or models that are related to the one you "
"are querying can include traversing \"reverse\" relationships. The lowercase "
"name of related models and double-underscores are used here too."
msgstr ""

msgid ""
"For example, we can ask for all publishers, annotated with their respective "
"total book stock counters (note how we use ``'book'`` to specify the "
"``Publisher`` -> ``Book`` reverse foreign key hop)::"
msgstr ""

msgid ""
"(Every ``Publisher`` in the resulting ``QuerySet`` will have an extra "
"attribute called ``book__count``.)"
msgstr ""

msgid ""
"We can also ask for the oldest book of any of those managed by every "
"publisher::"
msgstr ""

msgid ""
"(The resulting dictionary will have a key called ``'oldest_pubdate'``. If no "
"such alias were specified, it would be the rather long "
"``'book__pubdate__min'``.)"
msgstr ""

msgid ""
"This doesn't apply just to foreign keys. It also works with many-to-many "
"relations. For example, we can ask for every author, annotated with the "
"total number of pages considering all the books the author has (co-)authored "
"(note how we use ``'book'`` to specify the ``Author`` -> ``Book`` reverse "
"many-to-many hop)::"
msgstr ""

msgid ""
"(Every ``Author`` in the resulting ``QuerySet`` will have an extra attribute "
"called ``total_pages``. If no such alias were specified, it would be the "
"rather long ``book__pages__sum``.)"
msgstr ""

msgid ""
"Or ask for the average rating of all the books written by author(s) we have "
"on file::"
msgstr ""

msgid ""
"(The resulting dictionary will have a key called ``'average_rating'``. If no "
"such alias were specified, it would be the rather long "
"``'book__rating__avg'``.)"
msgstr ""

msgid "Aggregations and other ``QuerySet`` clauses"
msgstr ""

msgid "``filter()`` and ``exclude()``"
msgstr ""

msgid ""
"Aggregates can also participate in filters. Any ``filter()`` (or "
"``exclude()``) applied to normal model fields will have the effect of "
"constraining the objects that are considered for aggregation."
msgstr ""

msgid ""
"When used with an ``annotate()`` clause, a filter has the effect of "
"constraining the objects for which an annotation is calculated. For example, "
"you can generate an annotated list of all books that have a title starting "
"with \"Django\" using the query::"
msgstr ""

msgid ""
"When used with an ``aggregate()`` clause, a filter has the effect of "
"constraining the objects over which the aggregate is calculated. For "
"example, you can generate the average price of all books with a title that "
"starts with \"Django\" using the query::"
msgstr ""

msgid "Filtering on annotations"
msgstr ""

msgid ""
"Annotated values can also be filtered. The alias for the annotation can be "
"used in ``filter()`` and ``exclude()`` clauses in the same way as any other "
"model field."
msgstr ""

msgid ""
"For example, to generate a list of books that have more than one author, you "
"can issue the query::"
msgstr ""

msgid ""
"This query generates an annotated result set, and then generates a filter "
"based upon that annotation."
msgstr ""

msgid ""
"If you need two annotations with two separate filters you can use the "
"``filter`` argument with any aggregate. For example, to generate a list of "
"authors with a count of highly rated books::"
msgstr ""

msgid ""
"Each ``Author`` in the result set will have the ``num_books`` and "
"``highly_rated_books`` attributes."
msgstr ""

msgid "Choosing between ``filter`` and ``QuerySet.filter()``"
msgstr ""

msgid ""
"Avoid using the ``filter`` argument with a single annotation or aggregation. "
"It's more efficient to use ``QuerySet.filter()`` to exclude rows. The "
"aggregation ``filter`` argument is only useful when using two or more "
"aggregations over the same relations with different conditionals."
msgstr ""

msgid "The ``filter`` argument was added to aggregates."
msgstr ""

msgid "Order of ``annotate()`` and ``filter()`` clauses"
msgstr ""

msgid ""
"When developing a complex query that involves both ``annotate()`` and "
"``filter()`` clauses, pay particular attention to the order in which the "
"clauses are applied to the ``QuerySet``."
msgstr ""

msgid ""
"When an ``annotate()`` clause is applied to a query, the annotation is "
"computed over the state of the query up to the point where the annotation is "
"requested. The practical implication of this is that ``filter()`` and "
"``annotate()`` are not commutative operations."
msgstr ""

msgid "Given:"
msgstr ""

msgid "Publisher A has two books with ratings 4 and 5."
msgstr ""

msgid "Publisher B has two books with ratings 1 and 4."
msgstr ""

msgid "Publisher C has one book with rating 1."
msgstr ""

msgid "Here's an example with the ``Count`` aggregate::"
msgstr ""

msgid ""
"Both queries return a list of publishers that have at least one book with a "
"rating exceeding 3.0, hence publisher C is excluded."
msgstr ""

msgid ""
"In the first query, the annotation precedes the filter, so the filter has no "
"effect on the annotation. ``distinct=True`` is required to avoid a :ref:"
"`query bug <combining-multiple-aggregations>`."
msgstr ""

msgid ""
"The second query counts the number of books that have a rating exceeding 3.0 "
"for each publisher. The filter precedes the annotation, so the filter "
"constrains the objects considered when calculating the annotation."
msgstr ""

msgid "Here's another example with the ``Avg`` aggregate::"
msgstr ""

msgid ""
"The first query asks for the average rating of all a publisher's books for "
"publisher's that have at least one book with a rating exceeding 3.0. The "
"second query asks for the average of a publisher's book's ratings for only "
"those ratings exceeding 3.0."
msgstr ""

msgid ""
"It's difficult to intuit how the ORM will translate complex querysets into "
"SQL queries so when in doubt, inspect the SQL with ``str(queryset.query)`` "
"and write plenty of tests."
msgstr ""

msgid "``order_by()``"
msgstr ""

msgid ""
"Annotations can be used as a basis for ordering. When you define an "
"``order_by()`` clause, the aggregates you provide can reference any alias "
"defined as part of an ``annotate()`` clause in the query."
msgstr ""

msgid ""
"For example, to order a ``QuerySet`` of books by the number of authors that "
"have contributed to the book, you could use the following query::"
msgstr ""

msgid "``values()``"
msgstr "``values()``"

msgid ""
"Ordinarily, annotations are generated on a per-object basis - an annotated "
"``QuerySet`` will return one result for each object in the original "
"``QuerySet``. However, when a ``values()`` clause is used to constrain the "
"columns that are returned in the result set, the method for evaluating "
"annotations is slightly different. Instead of returning an annotated result "
"for each result in the original ``QuerySet``, the original results are "
"grouped according to the unique combinations of the fields specified in the "
"``values()`` clause. An annotation is then provided for each unique group; "
"the annotation is computed over all members of the group."
msgstr ""
"通常，注解值会添加到每个对象上，即一个被注解的 ``QuerySet`` 将会为初始 "
"``QuerySet`` 的每个对象返回一个结果集。然而，当使用 ``values()`` 子句来对结果"
"集进行约束时，生成注解值的方法会稍有不同。不是在原始 ``QuerySet`` 中对每个对"
"象添加注解并返回，而是根据定义在 ``values()`` 子句中的字段组合先对结果进行分"
"组，再对每个单独的分组进行注解，这个注解值是根据分组中所有的对象计算得到的。"

msgid ""
"For example, consider an author query that attempts to find out the average "
"rating of books written by each author:"
msgstr "下面是一个关于作者的查询例子，查询每个作者所著书的平均评分："

msgid ""
"This will return one result for each author in the database, annotated with "
"their average book rating."
msgstr "这段代码返回的是数据库中的所有作者及其所著书的平均评分。"

msgid ""
"However, the result will be slightly different if you use a ``values()`` "
"clause::"
msgstr "但是如果你使用 ``values()`` 子句，结果会稍有不同："

msgid ""
"In this example, the authors will be grouped by name, so you will only get "
"an annotated result for each *unique* author name. This means if you have "
"two authors with the same name, their results will be merged into a single "
"result in the output of the query; the average will be computed as the "
"average over the books written by both authors."
msgstr ""
"在这个例子中，作者会按名字分组，所以你只能得到不重名的作者分组的注解值。这意"
"味着如果你有两个作者同名，那么他们原本各自的查询结果将被合并到同一个结果中；"
"两个作者的所有评分都将被计算为一个平均分。"

msgid "Order of ``annotate()`` and ``values()`` clauses"
msgstr "``annotate()`` 和 ``values()`` 的顺序"

msgid ""
"As with the ``filter()`` clause, the order in which ``annotate()`` and "
"``values()`` clauses are applied to a query is significant. If the "
"``values()`` clause precedes the ``annotate()``, the annotation will be "
"computed using the grouping described by the ``values()`` clause."
msgstr ""
"和使用 ``filter()`` 一样，作用于某个查询的 ``annotate()`` 和 ``values()`` 子"
"句的顺序非常重要。如果 ``values()`` 子句在 ``annotate()`` 之前，就会根据 "
"``values()`` 子句产生的分组来计算注解。"

msgid ""
"However, if the ``annotate()`` clause precedes the ``values()`` clause, the "
"annotations will be generated over the entire query set. In this case, the "
"``values()`` clause only constrains the fields that are generated on output."
msgstr ""
"然而如果 ``annotate()`` 子句在 ``values()`` 之前，就会根据整个查询集生成注"
"解。这种情况下，``values()`` 子句只能限制输出的字段。"

msgid ""
"For example, if we reverse the order of the ``values()`` and ``annotate()`` "
"clause from our previous example::"
msgstr ""
"举个例子，如果我们颠倒上个例子中 ``values()`` 和 ``annotate()`` 的顺序："

msgid ""
"This will now yield one unique result for each author; however, only the "
"author's name and the ``average_rating`` annotation will be returned in the "
"output data."
msgstr ""
"这段代码将为每个作者添加一个唯一注解，但只有作者姓名和 ``average_rating`` 注"
"解会返回在输出结果中。"

msgid ""
"You should also note that ``average_rating`` has been explicitly included in "
"the list of values to be returned. This is required because of the ordering "
"of the ``values()`` and ``annotate()`` clause."
msgstr ""

msgid ""
"If the ``values()`` clause precedes the ``annotate()`` clause, any "
"annotations will be automatically added to the result set. However, if the "
"``values()`` clause is applied after the ``annotate()`` clause, you need to "
"explicitly include the aggregate column."
msgstr ""

msgid "Interaction with default ordering or ``order_by()``"
msgstr ""

msgid ""
"Fields that are mentioned in the ``order_by()`` part of a queryset (or which "
"are used in the default ordering on a model) are used when selecting the "
"output data, even if they are not otherwise specified in the ``values()`` "
"call. These extra fields are used to group \"like\" results together and "
"they can make otherwise identical result rows appear to be separate. This "
"shows up, particularly, when counting things."
msgstr ""

msgid "By way of example, suppose you have a model like this::"
msgstr ""

msgid ""
"The important part here is the default ordering on the ``name`` field. If "
"you want to count how many times each distinct ``data`` value appears, you "
"might try this::"
msgstr ""

msgid ""
"...which will group the ``Item`` objects by their common ``data`` values and "
"then count the number of ``id`` values in each group. Except that it won't "
"quite work. The default ordering by ``name`` will also play a part in the "
"grouping, so this query will group by distinct ``(data, name)`` pairs, which "
"isn't what you want. Instead, you should construct this queryset::"
msgstr ""

msgid ""
"...clearing any ordering in the query. You could also order by, say, "
"``data`` without any harmful effects, since that is already playing a role "
"in the query."
msgstr ""

msgid ""
"This behavior is the same as that noted in the queryset documentation for :"
"meth:`~django.db.models.query.QuerySet.distinct` and the general rule is the "
"same: normally you won't want extra columns playing a part in the result, so "
"clear out the ordering, or at least make sure it's restricted only to those "
"fields you also select in a ``values()`` call."
msgstr ""

msgid ""
"You might reasonably ask why Django doesn't remove the extraneous columns "
"for you. The main reason is consistency with ``distinct()`` and other "
"places: Django **never** removes ordering constraints that you have "
"specified (and we can't change those other methods' behavior, as that would "
"violate our :doc:`/misc/api-stability` policy)."
msgstr ""

msgid "Aggregating annotations"
msgstr ""

msgid ""
"You can also generate an aggregate on the result of an annotation. When you "
"define an ``aggregate()`` clause, the aggregates you provide can reference "
"any alias defined as part of an ``annotate()`` clause in the query."
msgstr ""

msgid ""
"For example, if you wanted to calculate the average number of authors per "
"book you first annotate the set of books with the author count, then "
"aggregate that author count, referencing the annotation field::"
msgstr ""

msgid "Examples of model relationship API usage"
msgstr ""

msgid "Many-to-many relationships"
msgstr ""

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`."
msgstr ""

msgid ""
"In this example, an ``Article`` can be published in multiple ``Publication`` "
"objects, and a ``Publication`` has multiple ``Article`` objects:"
msgstr ""

msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities. Note that if you are using :ref:`an intermediate "
"model <intermediary-manytomany>` for a many-to-many relationship, some of "
"the related manager's methods are disabled, so some of these examples won't "
"work with such models."
msgstr ""

msgid "Create a few ``Publications``::"
msgstr ""

msgid "Create an ``Article``::"
msgstr ""

msgid "You can't associate it with a ``Publication`` until it's been saved::"
msgstr ""

msgid "Save it! ::"
msgstr ""

msgid "Associate the ``Article`` with a ``Publication``::"
msgstr ""

msgid ""
"Create another ``Article``, and set it to appear in the ``Publications``::"
msgstr ""

msgid "Adding a second time is OK, it will not duplicate the relation::"
msgstr ""

msgid "Adding an object of the wrong type raises :exc:`TypeError`::"
msgstr ""

msgid ""
"Create and add a ``Publication`` to an ``Article`` in one step using :meth:"
"`~django.db.models.fields.related.RelatedManager.create`::"
msgstr ""

msgid ""
"``Article`` objects have access to their related ``Publication`` objects::"
msgstr ""

msgid ""
"``Publication`` objects have access to their related ``Article`` objects::"
msgstr ""

msgid ""
"Many-to-many relationships can be queried using :ref:`lookups across "
"relationships <lookups-that-span-relationships>`::"
msgstr ""

msgid ""
"The :meth:`~django.db.models.query.QuerySet.count` function respects :meth:"
"`~django.db.models.query.QuerySet.distinct` as well::"
msgstr ""

msgid ""
"Reverse m2m queries are supported (i.e., starting at the table that doesn't "
"have a :class:`~django.db.models.ManyToManyField`)::"
msgstr ""

msgid ""
"Excluding a related item works as you would expect, too (although the SQL "
"involved is a little complex)::"
msgstr ""

msgid ""
"If we delete a ``Publication``, its ``Articles`` won't be able to access it::"
msgstr ""

msgid ""
"If we delete an ``Article``, its ``Publications`` won't be able to access "
"it::"
msgstr ""

msgid "Adding via the 'other' end of an m2m::"
msgstr ""

msgid "Adding via the other end using keywords::"
msgstr ""

msgid "Removing ``Publication`` from an ``Article``::"
msgstr ""

msgid "And from the other end::"
msgstr ""

msgid "Relation sets can be set::"
msgstr ""

msgid "Relation sets can be cleared::"
msgstr ""

msgid "And you can clear from the other end::"
msgstr ""

msgid "Recreate the ``Article`` and ``Publication`` we have deleted::"
msgstr ""

msgid ""
"Bulk delete some ``Publications`` - references to deleted publications "
"should go::"
msgstr ""

msgid "Bulk delete some articles - references to deleted objects should go::"
msgstr ""

msgid ""
"After the :meth:`~django.db.models.query.QuerySet.delete`, the :class:"
"`~django.db.models.query.QuerySet` cache needs to be cleared, and the "
"referenced objects should be gone::"
msgstr ""

msgid "Many-to-one relationships"
msgstr ""

msgid ""
"To define a many-to-one relationship, use :class:`~django.db.models."
"ForeignKey`::"
msgstr ""

msgid ""
"What follows are examples of operations that can be performed using the "
"Python API facilities."
msgstr ""

msgid "Create a few Reporters::"
msgstr ""

msgid "Create an Article::"
msgstr ""

msgid ""
"Note that you must save an object before it can be assigned to a foreign key "
"relationship. For example, creating an ``Article`` with unsaved ``Reporter`` "
"raises ``ValueError``::"
msgstr ""

msgid "Article objects have access to their related Reporter objects::"
msgstr ""

msgid "Create an Article via the Reporter object::"
msgstr "通过 Reporter 对象来创建一个 Article"

msgid "Create a new article::"
msgstr ""

msgid "Add the same article to a different article set - check that it moves::"
msgstr ""

msgid "Adding an object of the wrong type raises TypeError::"
msgstr ""

msgid "Note that in the last example the article has moved from John to Paul."
msgstr ""

msgid ""
"Related managers support field lookups as well. The API automatically "
"follows relationships as far as you need. Use double underscores to separate "
"relationships. This works as many levels deep as you want. There's no limit. "
"For example::"
msgstr ""

msgid "Exact match is implied here::"
msgstr ""

msgid ""
"Query twice over the related field. This translates to an AND condition in "
"the WHERE clause::"
msgstr ""

msgid ""
"For the related lookup you can supply a primary key value or pass the "
"related object explicitly::"
msgstr ""

msgid "You can also use a queryset instead of a literal list of instances::"
msgstr ""

msgid "Querying in the opposite direction::"
msgstr ""

msgid ""
"Counting in the opposite direction works in conjunction with distinct()::"
msgstr ""

msgid "Queries can go round in circles::"
msgstr ""

msgid ""
"If you delete a reporter, his articles will be deleted (assuming that the "
"ForeignKey was defined with :attr:`django.db.models.ForeignKey.on_delete` "
"set to ``CASCADE``, which is the default)::"
msgstr ""

msgid "You can delete using a JOIN in the query::"
msgstr ""

msgid "One-to-one relationships"
msgstr ""

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`."
msgstr ""

msgid "In this example, a ``Place`` optionally can be a ``Restaurant``::"
msgstr ""

msgid "Create a couple of Places::"
msgstr "创建几个地方："

msgid ""
"Create a Restaurant. Pass the ID of the \"parent\" object as this object's "
"ID::"
msgstr "创建一个餐馆，将“父”对象的ID传递为该对象的ID："

msgid "A Restaurant can access its place::"
msgstr "餐厅可进入其地点："

msgid "A Place can access its restaurant, if available::"
msgstr "一个可以进入餐厅的地方（如果有的话）："

msgid "p2 doesn't have an associated restaurant::"
msgstr "p2没有关联餐厅："

msgid "You can also use ``hasattr`` to avoid the need for exception catching::"
msgstr "您还可以使用``hasattr`` 来避免例外捕获的需要："

msgid ""
"Set the place using assignment notation. Because place is the primary key on "
"Restaurant, the save will create a new restaurant::"
msgstr "使用赋值符号来设置地方。因为地方是餐厅的主键，保存将创建一个新的餐馆："

msgid "Set the place back again, using assignment in the reverse direction::"
msgstr "再次设置地方，使用相反方向的赋值："

msgid ""
"Note that you must save an object before it can be assigned to a one-to-one "
"relationship. For example, creating a ``Restaurant`` with unsaved ``Place`` "
"raises ``ValueError``::"
msgstr ""

msgid ""
"Restaurant.objects.all() just returns the Restaurants, not the Places.  Note "
"that there are two restaurants - Ace Hardware the Restaurant was created in "
"the call to r.place = p2::"
msgstr ""

msgid ""
"Place.objects.all() returns all Places, regardless of whether they have "
"Restaurants::"
msgstr ""

msgid ""
"You can query the models using :ref:`lookups across relationships <lookups-"
"that-span-relationships>`::"
msgstr ""

msgid "This of course works in reverse::"
msgstr ""

msgid "Add a Waiter to the Restaurant::"
msgstr ""

msgid "Query the waiters::"
msgstr ""

msgid "Models and databases"
msgstr "模型和数据库"

msgid ""
"A model is the single, definitive source of data about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""
"模型是您的数据唯一而且准确的信息来源。它包含您正在储存的数据的重要字段和行"
"为。一般来说，每一个模型都映射一个数据库表。"

msgid "Database instrumentation"
msgstr ""

msgid ""
"To help you understand and control the queries issued by your code, Django "
"provides a hook for installing wrapper functions around the execution of "
"database queries. For example, wrappers can count queries, measure query "
"duration, log queries, or even prevent query execution (e.g. to make sure "
"that no queries are issued while rendering a template with prefetched data)."
msgstr ""

msgid ""
"The wrappers are modeled after :doc:`middleware </topics/http/middleware>` "
"-- they are callables which take another callable as one of their arguments. "
"They call that callable to invoke the (possibly wrapped) database query, and "
"they can do what they want around that call. They are, however, created and "
"installed by user code, and so don't need a separate factory like middleware "
"do."
msgstr ""

msgid ""
"Installing a wrapper is done in a context manager -- so the wrappers are "
"temporary and specific to some flow in your code."
msgstr ""

msgid ""
"As mentioned above, an example of a wrapper is a query execution blocker. It "
"could look like this::"
msgstr ""

msgid ""
"And it would be used in a view to block queries from the template like so::"
msgstr ""

msgid "The parameters sent to the wrappers are:"
msgstr ""

msgid ""
"``execute`` -- a callable, which should be invoked with the rest of the "
"parameters in order to execute the query."
msgstr ""

msgid "``sql`` -- a ``str``, the SQL query to be sent to the database."
msgstr ""

msgid ""
"``params`` -- a list/tuple of parameter values for the SQL command, or a "
"list/tuple of lists/tuples if the wrapped call is ``executemany()``."
msgstr ""

msgid ""
"``many`` -- a ``bool`` indicating whether the ultimately invoked call is "
"``execute()`` or ``executemany()`` (and whether ``params`` is expected to be "
"a sequence of values, or a sequence of sequences of values)."
msgstr ""

msgid ""
"``context`` -- a dictionary with further data about the context of "
"invocation. This includes the connection and cursor."
msgstr ""

msgid ""
"Using the parameters, a slightly more complex version of the blocker could "
"include the connection name in the error message::"
msgstr ""

msgid "For a more complete example, a query logger could look like this::"
msgstr ""

msgid ""
"To use this, you would create a logger object and install it as a wrapper::"
msgstr ""

msgid "``connection.execute_wrapper()``"
msgstr ""

msgid ""
"Returns a context manager which, when entered, installs a wrapper around "
"database query executions, and when exited, removes the wrapper. The wrapper "
"is installed on the thread-local connection object."
msgstr ""

msgid ""
"``wrapper`` is a callable taking five arguments.  It is called for every "
"query execution in the scope of the context manager, with arguments "
"``execute``, ``sql``, ``params``, ``many``, and ``context`` as described "
"above. It's expected to call ``execute(sql, params, many, context)`` and "
"return the return value of that call."
msgstr ""

msgid "Managers"
msgstr ""

msgid ""
"A ``Manager`` is the interface through which database query operations are "
"provided to Django models. At least one ``Manager`` exists for every model "
"in a Django application."
msgstr ""

msgid ""
"The way ``Manager`` classes work is documented in :doc:`/topics/db/queries`; "
"this document specifically touches on model options that customize "
"``Manager`` behavior."
msgstr ""

msgid "Manager names"
msgstr ""

msgid ""
"By default, Django adds a ``Manager`` with the name ``objects`` to every "
"Django model class. However, if you want to use ``objects`` as a field name, "
"or if you want to use a name other than ``objects`` for the ``Manager``, you "
"can rename it on a per-model basis. To rename the ``Manager`` for a given "
"class, define a class attribute of type ``models.Manager()`` on that model. "
"For example::"
msgstr ""

msgid ""
"Using this example model, ``Person.objects`` will generate an "
"``AttributeError`` exception, but ``Person.people.all()`` will provide a "
"list of all ``Person`` objects."
msgstr ""

msgid "Custom managers"
msgstr ""

msgid ""
"You can use a custom ``Manager`` in a particular model by extending the base "
"``Manager`` class and instantiating your custom ``Manager`` in your model."
msgstr ""

msgid ""
"There are two reasons you might want to customize a ``Manager``: to add "
"extra ``Manager`` methods, and/or to modify the initial ``QuerySet`` the "
"``Manager`` returns."
msgstr ""

msgid "Adding extra manager methods"
msgstr ""

msgid ""
"Adding extra ``Manager`` methods is the preferred way to add \"table-level\" "
"functionality to your models. (For \"row-level\" functionality -- i.e., "
"functions that act on a single instance of a model object -- use :ref:`Model "
"methods <model-methods>`, not custom ``Manager`` methods.)"
msgstr ""

msgid ""
"A custom ``Manager`` method can return anything you want. It doesn't have to "
"return a ``QuerySet``."
msgstr ""

msgid ""
"For example, this custom ``Manager`` offers a method ``with_counts()``, "
"which returns a list of all ``OpinionPoll`` objects, each with an extra "
"``num_responses`` attribute that is the result of an aggregate query::"
msgstr ""

msgid ""
"With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return "
"that list of ``OpinionPoll`` objects with ``num_responses`` attributes."
msgstr ""

msgid ""
"Another thing to note about this example is that ``Manager`` methods can "
"access ``self.model`` to get the model class to which they're attached."
msgstr ""

msgid "Modifying a manager's initial ``QuerySet``"
msgstr ""

msgid ""
"A ``Manager``’s base ``QuerySet`` returns all objects in the system. For "
"example, using this model::"
msgstr ""

msgid ""
"...the statement ``Book.objects.all()`` will return all books in the "
"database."
msgstr ""

msgid ""
"You can override a ``Manager``’s base ``QuerySet`` by overriding the "
"``Manager.get_queryset()`` method. ``get_queryset()`` should return a "
"``QuerySet`` with the properties you require."
msgstr ""

msgid ""
"For example, the following model has *two* ``Manager``\\s -- one that "
"returns all objects, and one that returns only the books by Roald Dahl::"
msgstr ""

msgid ""
"With this sample model, ``Book.objects.all()`` will return all books in the "
"database, but ``Book.dahl_objects.all()`` will only return the ones written "
"by Roald Dahl."
msgstr ""

msgid ""
"Of course, because ``get_queryset()`` returns a ``QuerySet`` object, you can "
"use ``filter()``, ``exclude()`` and all the other ``QuerySet`` methods on "
"it. So these statements are all legal::"
msgstr ""

msgid ""
"This example also pointed out another interesting technique: using multiple "
"managers on the same model. You can attach as many ``Manager()`` instances "
"to a model as you'd like. This is an easy way to define common \"filters\" "
"for your models."
msgstr ""

msgid ""
"This example allows you to request ``Person.authors.all()``, ``Person."
"editors.all()``, and ``Person.people.all()``, yielding predictable results."
msgstr ""

msgid "Default managers"
msgstr ""

msgid ""
"If you use custom ``Manager`` objects, take note that the first ``Manager`` "
"Django encounters (in the order in which they're defined in the model) has a "
"special status. Django interprets the first ``Manager`` defined in a class "
"as the \"default\" ``Manager``, and several parts of Django (including :"
"djadmin:`dumpdata`) will use that ``Manager`` exclusively for that model. As "
"a result, it's a good idea to be careful in your choice of default manager "
"in order to avoid a situation where overriding ``get_queryset()`` results in "
"an inability to retrieve objects you'd like to work with."
msgstr ""

msgid ""
"You can specify a custom default manager using :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`."
msgstr ""

msgid ""
"If you're writing some code that must handle an unknown model, for example, "
"in a third-party app that implements a generic view, use this manager (or :"
"attr:`~Model._base_manager`) rather than assuming the model has an "
"``objects`` manager."
msgstr ""

msgid "Base managers"
msgstr ""

msgid "Using managers for related object access"
msgstr ""

msgid ""
"By default, Django uses an instance of the ``Model._base_manager`` manager "
"class when accessing related objects (i.e. ``choice.question``), not the "
"``_default_manager`` on the related object. This is because Django needs to "
"be able to retrieve the related object, even if it would otherwise be "
"filtered out (and hence be inaccessible) by the default manager."
msgstr ""

msgid ""
"If the normal base manager class (:class:`django.db.models.Manager`) isn't "
"appropriate for your circumstances, you can tell Django which class to use "
"by setting :attr:`Meta.base_manager_name <django.db.models.Options."
"base_manager_name>`."
msgstr ""

msgid ""
"Base managers aren't used when querying on related models. For example, if "
"the ``Question`` model :ref:`from the tutorial <creating-models>` had a "
"``deleted`` field and a base manager that filters out instances with "
"``deleted=True``, a queryset like ``Choice.objects."
"filter(question__name__startswith='What')`` would include choices related to "
"deleted questions."
msgstr ""

msgid "Don't filter away any results in this type of manager subclass"
msgstr ""

msgid ""
"This manager is used to access objects that are related to from some other "
"model. In those situations, Django has to be able to see all the objects for "
"the model it is fetching, so that *anything* which is referred to can be "
"retrieved."
msgstr ""

msgid ""
"If you override the ``get_queryset()`` method and filter out any rows, "
"Django will return incorrect results. Don't do that. A manager that filters "
"results in ``get_queryset()`` is not appropriate for use as a base manager."
msgstr ""

msgid "Calling custom ``QuerySet`` methods from the manager"
msgstr ""

msgid ""
"While most methods from the standard ``QuerySet`` are accessible directly "
"from the ``Manager``, this is only the case for the extra methods defined on "
"a custom ``QuerySet`` if you also implement them on the ``Manager``::"
msgstr ""

msgid ""
"This example allows you to call both ``authors()`` and ``editors()`` "
"directly from the manager ``Person.people``."
msgstr ""

msgid "Creating a manager with ``QuerySet`` methods"
msgstr ""

msgid ""
"In lieu of the above approach which requires duplicating methods on both the "
"``QuerySet`` and the ``Manager``, :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` can be used to create an instance of "
"``Manager`` with a copy of a custom ``QuerySet``’s methods::"
msgstr ""

msgid ""
"The ``Manager`` instance created by :meth:`QuerySet.as_manager() <django.db."
"models.query.QuerySet.as_manager>` will be virtually identical to the "
"``PersonManager`` from the previous example."
msgstr ""

msgid ""
"Not every ``QuerySet`` method makes sense at the ``Manager`` level; for "
"instance we intentionally prevent the :meth:`QuerySet.delete() <django.db."
"models.query.QuerySet.delete>` method from being copied onto the ``Manager`` "
"class."
msgstr ""

msgid "Methods are copied according to the following rules:"
msgstr ""

msgid "Public methods are copied by default."
msgstr ""

msgid ""
"Private methods (starting with an underscore) are not copied by default."
msgstr ""

msgid ""
"Methods with a ``queryset_only`` attribute set to ``False`` are always "
"copied."
msgstr ""

msgid ""
"Methods with a ``queryset_only`` attribute set to ``True`` are never copied."
msgstr ""

msgid "``from_queryset()``"
msgstr ""

msgid ""
"For advanced usage you might want both a custom ``Manager`` and a custom "
"``QuerySet``. You can do that by calling ``Manager.from_queryset()`` which "
"returns a *subclass* of your base ``Manager`` with a copy of the custom "
"``QuerySet`` methods::"
msgstr ""

msgid "You may also store the generated class into a variable::"
msgstr "还可以将生成的类存储到变量中："

msgid "Custom managers and model inheritance"
msgstr "自定义管理器和模型继承"

msgid ""
"Here's how Django handles custom managers and :ref:`model inheritance <model-"
"inheritance>`:"
msgstr ""
"下面是Django如何处理自定义管理器和 :ref:`model inheritance <model-"
"inheritance>`："

msgid ""
"Managers from base classes are always inherited by the child class, using "
"Python's normal name resolution order (names on the child class override all "
"others; then come names on the first parent class, and so on)."
msgstr ""
"基类的管理者总是由子类继承，使用Python的正常名称解析顺序（子类上的名称覆盖所"
"有其他类；然后在第一个父类上命名）等等。"

msgid ""
"If no managers are declared on a model and/or its parents, Django "
"automatically creates the ``objects`` manager."
msgstr ""
"如果没有在模型和/或其父母上宣布管理人员，Django就会自动创建``objects``管理"
"器。"

msgid ""
"The default manager on a class is either the one chosen with :attr:`Meta."
"default_manager_name <django.db.models.Options.default_manager_name>`, or "
"the first manager declared on the model, or the default manager of the first "
"parent model."
msgstr ""
"类上的默认管理器要么是使用:attr:`Meta.default_manager_name <django.db.models."
"Options.default_manager_name>`，要么是在模型上声明的第一个管理器，或者是第一"
"个父模型的默认管理器。"

msgid ""
"These rules provide the necessary flexibility if you want to install a "
"collection of custom managers on a group of models, via an abstract base "
"class, but still customize the default manager. For example, suppose you "
"have this base class::"
msgstr ""
"如果您想通过抽象基类在一组模型上安装自定义管理器集合，但仍然自定义默认管理"
"器，则这些规则提供了必要的灵活性。"

msgid ""
"If you use this directly in a subclass, ``objects`` will be the default "
"manager if you declare no managers in the base class::"
msgstr ""
"如果您在子类中直接使用这一点，如果您在基类中没有声明任何管理器，那么 "
"``objects`` 将是默认的管理器："

msgid ""
"If you want to inherit from ``AbstractBase``, but provide a different "
"default manager, you can provide the default manager on the child class::"
msgstr ""
"如果您想从``AbstractBase``继承，但提供不同的默认管理器，则可以在子类上提供默"
"认管理器："

msgid ""
"Here, ``default_manager`` is the default. The ``objects`` manager is still "
"available, since it's inherited. It just isn't used as the default."
msgstr ""
"在这里，``default_manager``是默认的。 ``objects`` 管理器仍然可用，因为它是继"
"承的。它只是没有被用作默认值。"

msgid ""
"Finally for this example, suppose you want to add extra managers to the "
"child class, but still use the default from ``AbstractBase``. You can't add "
"the new manager directly in the child class, as that would override the "
"default and you would have to also explicitly include all the managers from "
"the abstract base class. The solution is to put the extra managers in "
"another base class and introduce it into the inheritance hierarchy *after* "
"the defaults::"
msgstr ""
"最后，对于这个示例，假设您想要向子类中添加额外的管理器，但是仍然使用来自"
"``AbstractBase``的默认管理器。您不能直接在子类中添加新的管理器，因为这将覆盖"
"默认值，并且您还必须显式地包含来自抽象基类的所有管理器。解决方案是将额外的管"
"理器放到另一个基类中，并在默认值*之后*将其引入继承层次结构："

msgid ""
"Note that while you can *define* a custom manager on the abstract model, you "
"can't *invoke* any methods using the abstract model. That is::"
msgstr ""
"请注意，虽然可以在抽象模型上定义*自定义管理器，但不能使用抽象模型*调用*任何方"
"法。即："

msgid "is legal, but::"
msgstr "是合法的，但："

msgid ""
"will raise an exception. This is because managers are intended to "
"encapsulate logic for managing collections of objects. Since you can't have "
"a collection of abstract objects, it doesn't make sense to be managing them. "
"If you have functionality that applies to the abstract model, you should put "
"that functionality in a ``staticmethod`` or ``classmethod`` on the abstract "
"model."
msgstr ""
"这将引起一个例外。这是因为管理人员打算封装管理对象集合的逻辑。因为您不能拥有"
"抽象对象的集合，所以管理抽象对象是没有意义的。如果您有适用于抽象模型的功能，"
"则应该将该功能放在抽象模型上的 ``静态方法`` 或``类方法`` 中。"

msgid "Implementation concerns"
msgstr "执行关系"

msgid ""
"Whatever features you add to your custom ``Manager``, it must be possible to "
"make a shallow copy of a ``Manager`` instance; i.e., the following code must "
"work::"
msgstr ""
"无论您在自定义的 ``Manager`` 中添加了什么特性，都必须能够对 ``Manager`` 实例"
"进行简单的复制；也就是说，以下代码必须有效："

msgid ""
"Django makes shallow copies of manager objects during certain queries; if "
"your Manager cannot be copied, those queries will fail."
msgstr ""
"Django在某些查询期间对管理器对象进行浅拷贝；如果您的管理器无法被复制，那么这"
"些查询将失败。"

msgid ""
"This won't be an issue for most custom managers. If you are just adding "
"simple methods to your ``Manager``, it is unlikely that you will "
"inadvertently make instances of your ``Manager`` uncopyable. However, if "
"you're overriding ``__getattr__`` or some other private method of your "
"``Manager`` object that controls object state, you should ensure that you "
"don't affect the ability of your ``Manager`` to be copied."
msgstr ""

msgid "Models"
msgstr "模型"

msgid ""
"A model is the single, definitive source of information about your data. It "
"contains the essential fields and behaviors of the data you're storing. "
"Generally, each model maps to a single database table."
msgstr ""
"模型是您的数据唯一而且准确的信息来源。它包含您正在储存的数据的重要字段和行"
"为。一般来说，每一个模型都映射一个数据库表。"

msgid "The basics:"
msgstr "基础："

msgid ""
"Each model is a Python class that subclasses :class:`django.db.models.Model`."
msgstr ""
"每个模型都是一个 Python 的类，这些类继承 :class:`django.db.models.Model`"

msgid "Each attribute of the model represents a database field."
msgstr "模型类的每个属性都相当于一个数据库的字段。"

msgid ""
"With all of this, Django gives you an automatically-generated database-"
"access API; see :doc:`/topics/db/queries`."
msgstr ""
"综上诉说，Django 给你一个自动生成访问数据库的 API；请参阅 :doc:`/topics/db/"
"queries`。"

msgid "Quick example"
msgstr "快速上手"

msgid ""
"This example model defines a ``Person``, which has a ``first_name`` and "
"``last_name``::"
msgstr ""
"这个样例模型定义了一个 ``Person``, 其拥有 ``first_name`` 和 ``last_name``::"

msgid ""
"``first_name`` and ``last_name`` are fields_ of the model. Each field is "
"specified as a class attribute, and each attribute maps to a database column."
msgstr ""
"``first_name`` 和 ``last_name`` 是模型的字段_。每个字段都被指定为一个类属性，"
"并且每个属性映射为一个数据库列。"

msgid "The above ``Person`` model would create a database table like this:"
msgstr "上面的 ``Person`` 模型会创建一个如下的数据库表："

msgid "Some technical notes:"
msgstr "一些技术上的说明："

msgid ""
"The name of the table, ``myapp_person``, is automatically derived from some "
"model metadata but can be overridden. See :ref:`table-names` for more "
"details."
msgstr ""
"该表的名称 “myapp_person” 是自动从某些模型元数据中派生出来，但可以被改写。有"
"关更多详细信息，请参阅：:ref:`表命名`。"

msgid ""
"An ``id`` field is added automatically, but this behavior can be overridden. "
"See :ref:`automatic-primary-key-fields`."
msgstr ""
"一个 ``id`` 字段会被自动添加，但是这种行为可以被改写。请参阅：:ref:`默认主键"
"字段`。"

msgid ""
"The ``CREATE TABLE`` SQL in this example is formatted using PostgreSQL "
"syntax, but it's worth noting Django uses SQL tailored to the database "
"backend specified in your :doc:`settings file </topics/settings>`."
msgstr ""

msgid "Using models"
msgstr "使用模型"

msgid ""
"Once you have defined your models, you need to tell Django you're going to "
"*use* those models. Do this by editing your settings file and changing the :"
"setting:`INSTALLED_APPS` setting to add the name of the module that contains "
"your ``models.py``."
msgstr ""
"一旦你定义了你的模型，你需要告诉 Django 你准备*使用*这些模型。你需要修改设置"
"文件中的 :setting:`INSTALLED_APPS` ，在这个设置中添加包含你  ``models.py`` 文"
"件的模块的名字。"

msgid ""
"For example, if the models for your application live in the module ``myapp."
"models`` (the package structure that is created for an application by the :"
"djadmin:`manage.py startapp <startapp>` script), :setting:`INSTALLED_APPS` "
"should read, in part::"
msgstr ""
"例如，如果模型位于你项目中的``myapp.models``中（ 此包结构使用:djadmin:"
"`manage.py startapp`命令创建），:setting:`INSTALLED_APPS` 应设置如下:"

msgid ""
"When you add new apps to :setting:`INSTALLED_APPS`, be sure to run :djadmin:"
"`manage.py migrate <migrate>`, optionally making migrations for them first "
"with :djadmin:`manage.py makemigrations <makemigrations>`."
msgstr ""
"当你向 :setting:`INSTALLED_APPS` 添加新的应用的时候，请务必运行:djadmin:"
"`manage.py migrate <migrate>`，此外你也可以先使用以下命令先进行迁移 :djadmin:"
"`manage.py makemigrations <makemigrations>`。"

msgid "Fields"
msgstr "字段"

msgid ""
"The most important part of a model -- and the only required part of a model "
"-- is the list of database fields it defines. Fields are specified by class "
"attributes. Be careful not to choose field names that conflict with the :doc:"
"`models API </ref/models/instances>` like ``clean``, ``save``, or ``delete``."
msgstr ""
"模型中最重要的、并且也是唯一必须的是数据库的字段定义。字段在类中定义。定义字"
"段名时应小心避免使用与 :doc:`models API</ref/models/instances>冲突的名称， "
"如 ``clean``, ``save``, or ``delete``等."

msgid "Example::"
msgstr "举例："

msgid "Field types"
msgstr "字段类型"

msgid ""
"Each field in your model should be an instance of the appropriate :class:"
"`~django.db.models.Field` class. Django uses the field class types to "
"determine a few things:"
msgstr ""
"模型中每一个字段都应该是相应类的实例， Django 利用这些字段类来实现下面这些功"
"能。"

msgid ""
"The column type, which tells the database what kind of data to store (e.g. "
"``INTEGER``, ``VARCHAR``, ``TEXT``)."
msgstr ""
"字段类型用以指定数据库数据类型（如：``INTEGER``, ``VARCHAR``, ``TEXT``）"

msgid ""
"The default HTML :doc:`widget </ref/forms/widgets>` to use when rendering a "
"form field (e.g. ``<input type=\"text\">``, ``<select>``)."
msgstr ""
"默认的HTML表单输入框</ref/forms/widgets>（如：<input type=\"text\"><select>）"

msgid ""
"The minimal validation requirements, used in Django's admin and in "
"automatically-generated forms."
msgstr "用于Django admin和自动生成表单的基本验证。"

msgid ""
"Django ships with dozens of built-in field types; you can find the complete "
"list in the :ref:`model field reference <model-field-types>`. You can easily "
"write your own fields if Django's built-in ones don't do the trick; see :doc:"
"`/howto/custom-model-fields`."
msgstr ""
"Django内置了多种字段类型；你可以在模型字段参考<model-field-types>中看到完整列"
"表。如果Django内置类型不能满足你的需求，你可以很轻松地编写自定义的字段类型；"
"见:doc:`/howto/custom-model-fields`。"

msgid "Field options"
msgstr "字段选项"

msgid ""
"Each field takes a certain set of field-specific arguments (documented in "
"the :ref:`model field reference <model-field-types>`). For example, :class:"
"`~django.db.models.CharField` (and its subclasses) require a :attr:`~django."
"db.models.CharField.max_length` argument which specifies the size of the "
"``VARCHAR`` database field used to store the data."
msgstr ""
"每一种字段都需要指定一些特定的参数（参考 :ref:`model field reference<model-"
"field-types> ） 例如： :class:`~django.db.models.CharField` （以及它的子类）"
"需要接收一个 :attr:`~django.db.models.CharField.max_length` 参数，用以指定数"
"据库存储数据时用的 ``VARCHAR`` 大小。"

msgid ""
"There's also a set of common arguments available to all field types. All are "
"optional. They're fully explained in the :ref:`reference <common-model-field-"
"options>`, but here's a quick summary of the most often-used ones:"
msgstr ""
"一些可选的参数是通用的，可以用于任何字段类型，详情请见 :ref:"
"`reference<common-model-field-options> ` ，下面介绍一部分经常用到的通用参数："

msgid ":attr:`~Field.null`"
msgstr ":attr:`~Field.null`"

msgid ""
"If ``True``, Django will store empty values as ``NULL`` in the database. "
"Default is ``False``."
msgstr ""
"如果设置为 ``True`` ， 当该字段为空时，Django会将数据库中该字段设置为 "
"``NULL`` 。默认为 ``False`` 。"

msgid ":attr:`~Field.blank`"
msgstr ":attr:`~Field.blank`"

msgid "If ``True``, the field is allowed to be blank. Default is ``False``."
msgstr "如果设置为 ``True`` ，该字段允许为空。默认为 ``False`` 。"

msgid ""
"Note that this is different than :attr:`~Field.null`. :attr:`~Field.null` is "
"purely database-related, whereas :attr:`~Field.blank` is validation-related. "
"If a field has :attr:`blank=True <Field.blank>`, form validation will allow "
"entry of an empty value. If a field has :attr:`blank=False <Field.blank>`, "
"the field will be required."
msgstr ""
"注意该选项与 ``False`` 不同， :attr:`~Field.null` 选项仅仅是数据库层面的设"
"置，然而 :attr:`~Field.blank` 是涉及表单验证方面。如果一个字段设置为 :attr:"
"`blank=True <Field.blank>` ，在进行表单验证时，接收的数据该字段值允许为空，而"
"设置为 :attr:`blank=False <Field.blank>` 时，不允许为空。"

msgid ":attr:`~Field.choices`"
msgstr ":attr:`~Field.choices`"

msgid ""
"An iterable (e.g., a list or tuple) of 2-tuples to use as choices for this "
"field. If this is given, the default form widget will be a select box "
"instead of the standard text field and will limit choices to the choices "
"given."
msgstr ""
"该参数接收一个可迭代的列表或元组（基本单位为二元组）。如果指定了该参数，在实"
"例化该模型时，该字段只能取选项列表中的值。"

msgid "A choices list looks like this::"
msgstr "一个选项列表："

msgid ""
"The first element in each tuple is the value that will be stored in the "
"database. The second element is displayed by the field's form widget."
msgstr "每个二元组的第一个值会储存在数据库中，而第二个值将只会用于显示作用。"

msgid ""
"Given a model instance, the display value for a field with ``choices`` can "
"be accessed using the :meth:`~django.db.models.Model.get_FOO_display` "
"method. For example::"
msgstr ""
"对于一个模型实例，要获取该字段二元组中相对应的第二个值，使用 :meth:`~django."
"db.models.Model.get_FOO_display` 方法。例如："

msgid ":attr:`~Field.default`"
msgstr ":attr:`~Field.default`"

msgid ""
"The default value for the field. This can be a value or a callable object. "
"If callable it will be called every time a new object is created."
msgstr ""
"该字段的默认值。可以是一个值或者是个可调用的对象，如果是个可调用对象，每次实"
"例化模型时都会调用该对象。"

msgid ":attr:`~Field.help_text`"
msgstr ":attr:`~Field.help_text`"

msgid ""
"Extra \"help\" text to be displayed with the form widget. It's useful for "
"documentation even if your field isn't used on a form."
msgstr ""

msgid ":attr:`~Field.primary_key`"
msgstr ":attr:`~Field.primary_key`"

msgid "If ``True``, this field is the primary key for the model."
msgstr "如果设置为 ``True`` ，将该字段设置为该模型的主键。"

msgid ""
"If you don't specify :attr:`primary_key=True <Field.primary_key>` for any "
"fields in your model, Django will automatically add an :class:`IntegerField` "
"to hold the primary key, so you don't need to set :attr:`primary_key=True "
"<Field.primary_key>` on any of your fields unless you want to override the "
"default primary-key behavior. For more, see :ref:`automatic-primary-key-"
"fields`."
msgstr ""
"在一个模型中，如果你没有对任何一个字段设置 :attr:`primary_key=True <Field."
"primary_key>` 选项。 Django 会自动添加一个 :class:`IntegerField` 字段，用于设"
"置为主键，因此除非你想重写 Django 默认的主键设置行为，你可以不手动设置主键。"
"详情请见 :ref:`automatic-primary-key-fields` 。"

msgid ""
"The primary key field is read-only. If you change the value of the primary "
"key on an existing object and then save it, a new object will be created "
"alongside the old one. For example::"
msgstr ""
"主键字段是只可读的，如果你修改一个模型实例该字段的值并保存，你将等同于创建了"
"一个新的模型实例。例如："

msgid ":attr:`~Field.unique`"
msgstr ":attr:`~Field.unique`"

msgid "If ``True``, this field must be unique throughout the table."
msgstr "如果设置为 ``True``，这个字段必须在整个表中保持值唯一。"

msgid ""
"Again, these are just short descriptions of the most common field options. "
"Full details can be found in the :ref:`common model field option reference "
"<common-model-field-options>`."
msgstr ""
"再次声明，以上只是一些通用参数的简略描述。你可以在 :ref:`common model field "
"option reference<common-model-field-options> ` 中找到完整的介绍。"

msgid "Automatic primary key fields"
msgstr "自动设置主键"

msgid "By default, Django gives each model the following field::"
msgstr "默认情况下， Django 会给每一个模型添加下面的字段："

msgid "This is an auto-incrementing primary key."
msgstr "这是一个自增的主键。"

msgid ""
"If you'd like to specify a custom primary key, just specify :attr:"
"`primary_key=True <Field.primary_key>` on one of your fields. If Django sees "
"you've explicitly set :attr:`Field.primary_key`, it won't add the automatic "
"``id`` column."
msgstr ""
"如果你想指定设置为为主键的字段， 在你想要设置为主键的字段上设置 :attr:"
"`primary_key=True <Field.primary_key>` 选项。如果 Django 看到你显式的设置了 :"
"attr:`Field.primary_key` ，将不会自动在表（模型）中添加 ``id`` 列。"

msgid ""
"Each model requires exactly one field to have :attr:`primary_key=True <Field."
"primary_key>` (either explicitly declared or automatically added)."
msgstr ""
"每个模型都需要拥有一个设置了 :attr:`primary_key=True <Field.primary_key>` 的"
"字段（无论是显式的设置还是 Django 自动设置）。"

msgid "Verbose field names"
msgstr "备注名"

msgid ""
"Each field type, except for :class:`~django.db.models.ForeignKey`, :class:"
"`~django.db.models.ManyToManyField` and :class:`~django.db.models."
"OneToOneField`, takes an optional first positional argument -- a verbose "
"name. If the verbose name isn't given, Django will automatically create it "
"using the field's attribute name, converting underscores to spaces."
msgstr ""
"除了  :class:`~django.db.models.ForeignKey` ， :class:`~django.db.models."
"ManyToManyField` 和 :class:`~django.db.models.OneToOneField` ，任何字段类型都"
"接收一个可选的参数 :attr:`~Field.verbose_name`  ，如果未指定该参数值， "
"Django 会自动使用该字段的属性名作为该参数值，并且把下划线转换为空格。"

msgid "In this example, the verbose name is ``\"person's first name\"``::"
msgstr "在该例中：备注名为 ``\"person's first name\"``:: 。"

msgid "In this example, the verbose name is ``\"first name\"``::"
msgstr "在该例中：备注名为 ``\"first name\"``:: 。"

msgid ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` require the "
"first argument to be a model class, so use the :attr:`~Field.verbose_name` "
"keyword argument::"
msgstr ""
":class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` and :class:`~django.db.models.OneToOneField` 接收的第一个参"
"数为模型的类名，后面可以添加一个 :attr:`~Field.verbose_name` 参数："

msgid ""
"The convention is not to capitalize the first letter of the :attr:`~Field."
"verbose_name`. Django will automatically capitalize the first letter where "
"it needs to."
msgstr ""
"一般情况下不需要将 :attr:`~Field.verbose_name` 值首字母大写，必要时 Djanog 会"
"自动把首字母转换为大写。"

msgid "Relationships"
msgstr "关联关系"

msgid ""
"Clearly, the power of relational databases lies in relating tables to each "
"other. Django offers ways to define the three most common types of database "
"relationships: many-to-one, many-to-many and one-to-one."
msgstr ""
"显然，关系型数据库的强大之处在于各表之间的关联关系。 Django 提供了定义三种最"
"常见的数据库关联关系的方法：多对一，多对多，一对一。"

msgid ""
"To define a many-to-one relationship, use :class:`django.db.models."
"ForeignKey`. You use it just like any other :class:`~django.db.models.Field` "
"type: by including it as a class attribute of your model."
msgstr ""
"定义一个多对一的关联关系，使用 :class:`django.db.models.ForeignKey` 类。就和"
"其他 :class:`~django.db.models.Field` 字段类型一样，只需要在你模型中添加一个"
"值为该类的属性。"

msgid ""
":class:`~django.db.models.ForeignKey` requires a positional argument: the "
"class to which the model is related."
msgstr ""
" :class:`~django.db.models.ForeignKey` 类需要添加一个参数，即你想要关联的模型"
"类名。"

msgid ""
"For example, if a ``Car`` model has a ``Manufacturer`` -- that is, a "
"``Manufacturer`` makes multiple cars but each ``Car`` only has one "
"``Manufacturer`` -- use the following definitions::"
msgstr ""
"例如，如果一个 ``Car`` 模型 有一个制造者 ``Manufacturer`` --就是说一个 "
"``Manufacturer`` 制造许多辆车，但是每辆车都属于某个特定的制造者-- 那么使用下"
"面的方法定义这个关系："

msgid ""
"You can also create :ref:`recursive relationships <recursive-relationships>` "
"(an object with a many-to-one relationship to itself) and :ref:"
"`relationships to models not yet defined <lazy-relationships>`; see :ref:"
"`the model field reference <ref-foreignkey>` for details."
msgstr ""
"你也可以创建一个 :ref:`recursive relationships <recursive-relationships>` 关"
"系（一个模型与它本身有多对一的关系）和 :ref:`relationships to models not yet "
"defined <lazy-relationships> ` ；详情请见  :ref:`the model field reference "
"<ref-foreignkey> ` 。"

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ForeignKey` field (``manufacturer`` in the example above) be the name "
"of the model, lowercase. You can, of course, call the field whatever you "
"want. For example::"
msgstr ""
"建议设置 :class:`~django.db.models.ForeignKey` 字段（上例中的 "
"``manufacturer`` ）名为想要关联的模型名，但是你也可以随意设置为你想要的名称，"
"例如："

msgid ""
":class:`~django.db.models.ForeignKey` fields accept a number of extra "
"arguments which are explained in :ref:`the model field reference <foreign-"
"key-arguments>`. These options help define how the relationship should work; "
"all are optional."
msgstr ""
":class:`~django.db.models.ForeignKey` 字段还可以接收一些其他的参数，详见 :"
"ref:`the model field reference <foreign-key-arguments>` ，这些可选的参数可以"
"更深入的规定光联关系的具体实现。"

msgid ""
"For details on accessing backwards-related objects, see the :ref:`Following "
"relationships backward example <backwards-related-objects>`."
msgstr ""

msgid ""
"For sample code, see the :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one>`."
msgstr ""
"如要查看相关示例代码，详见 :doc:`Many-to-one relationship model example </"
"topics/db/examples/many_to_one> ` 。"

msgid ""
"To define a many-to-many relationship, use :class:`~django.db.models."
"ManyToManyField`. You use it just like any other :class:`~django.db.models."
"Field` type: by including it as a class attribute of your model."
msgstr ""
"定义一个多对多的关联关系，使用 :class:`django.db.models.ManyToManyField` 类。"
"就和其他 :class:`~django.db.models.Field` 字段类型一样，只需要在你模型中添加"
"一个值为该类的属性。"

msgid ""
":class:`~django.db.models.ManyToManyField` requires a positional argument: "
"the class to which the model is related."
msgstr ""
" :class:`~django.db.models.ManyToManyField` 类需要添加一个参数，即你想要关联"
"的模型类名。"

msgid ""
"For example, if a ``Pizza`` has multiple ``Topping`` objects -- that is, a "
"``Topping`` can be on multiple pizzas and each ``Pizza`` has multiple "
"toppings -- here's how you'd represent that::"
msgstr ""
"例如：如果 ``Pizza`` 含有多种 ``Topping``（配料） -- 也就是一种 ``Topping`` "
"可能存在于多个 ``Pizza`` 中，并且每个 ``Pizza``  含有多种 ``Topping`` --那么"
"可以这样表示这种关系："

msgid ""
"As with :class:`~django.db.models.ForeignKey`, you can also create :ref:"
"`recursive relationships <recursive-relationships>` (an object with a many-"
"to-many relationship to itself) and :ref:`relationships to models not yet "
"defined <lazy-relationships>`."
msgstr ""
"和 :class:`~django.db.models.ForeignKey` 类一样，你也可以创建 :ref:"
"`recursive relationships <recursive-relationships>` 关系（一个对象与他本身有"
"着多对多的关系）和 :ref:`relationships to models not yet defined <lazy-"
"relationships>` 关系。"

msgid ""
"It's suggested, but not required, that the name of a :class:`~django.db."
"models.ManyToManyField` (``toppings`` in the example above) be a plural "
"describing the set of related model objects."
msgstr ""
"建议设置 :class:`~django.db.models.ManyToManyField` 字段（上例中的 "
"``toppings`` ）名为一个复数名词，表示所要光联的模型对象的集合。"

msgid ""
"It doesn't matter which model has the :class:`~django.db.models."
"ManyToManyField`, but you should only put it in one of the models -- not "
"both."
msgstr ""
"对于多对多光联关系的两个模型，可以在任何一个模型中添加 :class:`~django.db."
"models.ManyToManyField` 字段，但只能选择一个模型设置该字段，即不能同时在两模"
"型中添加该字段。"

msgid ""
"Generally, :class:`~django.db.models.ManyToManyField` instances should go in "
"the object that's going to be edited on a form. In the above example, "
"``toppings`` is in ``Pizza`` (rather than ``Topping`` having a ``pizzas`` :"
"class:`~django.db.models.ManyToManyField` ) because it's more natural to "
"think about a pizza having toppings than a topping being on multiple pizzas. "
"The way it's set up above, the ``Pizza`` form would let users select the "
"toppings."
msgstr ""
"一般来讲，应该把 :class:`~django.db.models.ManyToManyField` 实例放到需要在表"
"单中被编辑的对象中。在之前的例子中， ``toppings`` 被放在 ``Pizza`` 当中（而不"
"是 ``Topping`` 中有指向 ``pizzas`` 的 :class:`~django.db.models."
"ManyToManyField` 实例 ）因为相较于配料被放在不同的披萨当中，披萨当中有很多种"
"配料更加符合常理。按照先前说的，在编辑 ``Pizza`` 的表单时用户可以选择多种配"
"料。"

msgid ""
"See the :doc:`Many-to-many relationship model example </topics/db/examples/"
"many_to_many>` for a full example."
msgstr ""
"如要查看完整示例代码，详见 :doc:`Many-to-many relationship model example </"
"topics/db/examples/many_to_many>`。"

msgid ""
":class:`~django.db.models.ManyToManyField` fields also accept a number of "
"extra arguments which are explained in :ref:`the model field reference "
"<manytomany-arguments>`. These options help define how the relationship "
"should work; all are optional."
msgstr ""

msgid "Extra fields on many-to-many relationships"
msgstr "在多对多(many-to-many)关系中添加添加额外的属性字段"

msgid ""
"When you're only dealing with simple many-to-many relationships such as "
"mixing and matching pizzas and toppings, a standard :class:`~django.db."
"models.ManyToManyField` is all you need. However, sometimes you may need to "
"associate data with the relationship between two models."
msgstr ""
"如果你只是想要一个类似于记录披萨和配料之间混合和搭配的简单多对多关系，标准"
"的 :class:`~django.db.models.ManyToManyField` 就足够你用了。然而，有的时候你"
"可能会需要在两个模型的关系中记录更多的数据。"

msgid ""
"For example, consider the case of an application tracking the musical groups "
"which musicians belong to. There is a many-to-many relationship between a "
"person and the groups of which they are a member, so you could use a :class:"
"`~django.db.models.ManyToManyField` to represent this relationship. However, "
"there is a lot of detail about the membership that you might want to "
"collect, such as the date at which the person joined the group."
msgstr ""
"举例来讲，考虑一个需要跟踪音乐人属于哪个音乐组的应用程序。在人和他们所在的组"
"之间有一个多对多关系，你可以使用 :class:`~django.db.models.ManyToManyField` "
"来代表这个关系。然而，你想要记录更多的信息在这样的所属关系当中，比如你想要记"
"录某人是何时加入一个组的。"

msgid ""
"For these situations, Django allows you to specify the model that will be "
"used to govern the many-to-many relationship. You can then put extra fields "
"on the intermediate model. The intermediate model is associated with the :"
"class:`~django.db.models.ManyToManyField` using the :attr:`through "
"<ManyToManyField.through>` argument to point to the model that will act as "
"an intermediary. For our musician example, the code would look something "
"like this::"
msgstr ""
"对于这些情况，Django允许你指定用于控制多对多关系的模型。你可以在中间模型当中"
"添加而外的字段。在实例化 :class:`~django.db.models.ManyToManyField` 的时候使"
"用 :attr:`through <ManyToManyField.through>` 参数指定多对多关系使用哪个中间模"
"型。对于我们举的音乐家的例子，代码如下："

msgid ""
"When you set up the intermediary model, you explicitly specify foreign keys "
"to the models that are involved in the many-to-many relationship. This "
"explicit declaration defines how the two models are related."
msgstr ""
"在设置中间模型的时候，你需要显式地为多对多关系中涉及的模型指定外键。这种显式"
"声明定义了这两个模型之间的关系。"

msgid "There are a few restrictions on the intermediate model:"
msgstr "在中间模型当中有一些限制条件："

msgid ""
"Your intermediate model must contain one - and *only* one - foreign key to "
"the source model (this would be ``Group`` in our example), or you must "
"explicitly specify the foreign keys Django should use for the relationship "
"using :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>`. If you have more than one foreign key and "
"``through_fields`` is not specified, a validation error will be raised. A "
"similar restriction applies to the foreign key to the target model (this "
"would be ``Person`` in our example)."
msgstr ""
"你的中间模型要么有且 *仅* 有一个指向源模型（我们例子当中的 ``Group`` ）的外"
"键，要么你必须通过 :attr:`ManyToManyField.through_fields <ManyToManyField."
"through_fields>` 参数在多个外键当中手动选择一个外键，如果有多个外健且没有用 "
"``through_fields`` 参数选择一个的话，会出现验证错误。对于指向目标模型（我们例"
"子当中的 ``Person`` ）的外键也有同样的限制。"

msgid ""
"For a model which has a many-to-many relationship to itself through an "
"intermediary model, two foreign keys to the same model are permitted, but "
"they will be treated as the two (different) sides of the many-to-many "
"relationship. If there are *more* than two foreign keys though, you must "
"also specify ``through_fields`` as above, or a validation error will be "
"raised."
msgstr ""
"在一个用于描述模型当中自己指向自己的多对多关系的中间模型当中，可以有两个指向"
"同一个模型的外健，但这两个外健分表代表多对多关系（不同）的两端。如果外健的个"
"数 *超过* 两个，你必须和上面一样指定 ``through_fields`` 参数，要不然会出现验"
"证错误。"

msgid ""
"When defining a many-to-many relationship from a model to itself, using an "
"intermediary model, you *must* use :attr:`symmetrical=False <ManyToManyField."
"symmetrical>` (see :ref:`the model field reference <manytomany-arguments>`)."
msgstr ""
"在定义模型自己指向自己的多对多关系时，如果使用中间模型，你 *必须* 定义 :attr:"
"`symmetrical=False <ManyToManyField.symmetrical>` （查看 :ref:`the model "
"field reference <manytomany-arguments>`）。"

msgid ""
"Now that you have set up your :class:`~django.db.models.ManyToManyField` to "
"use your intermediary model (``Membership``, in this case), you're ready to "
"start creating some many-to-many relationships. You do this by creating "
"instances of the intermediate model::"
msgstr ""
"现在你已经通过中间模型完成你的 :class:`~django.db.models."
"ManyToManyField` （例子中的``Membership``），可以开始创建一些多对多关系了。你"
"通过实例化中间模型来创建关系："

msgid ""
"Unlike normal many-to-many fields, you *can't* use ``add()``, ``create()``, "
"or ``set()`` to create relationships::"
msgstr ""
"和一般的多对多字段不同，你 *不能* 使用 ``add()``， ``create()``， 或 "
"``set()`` 来创建关系。"

msgid ""
"Why? You can't just create a relationship between a ``Person`` and a "
"``Group`` - you need to specify all the detail for the relationship required "
"by the ``Membership`` model. The simple ``add``, ``create`` and assignment "
"calls don't provide a way to specify this extra detail. As a result, they "
"are disabled for many-to-many relationships that use an intermediate model. "
"The only way to create this type of relationship is to create instances of "
"the intermediate model."
msgstr ""
"为什么？你不能简单的在 ``Person`` 和 ``Group`` 之间创立关系 - 你需要指定 "
"``Membership`` 模型当中需要的所有关于此关系的细节信息。因此，在使用中间模型来"
"定义多对多关系的时候这些方法无法使用。创立这种关系的唯一办法是创建中间模型的"
"实例。"

msgid ""
"The :meth:`~django.db.models.fields.related.RelatedManager.remove` method is "
"disabled for similar reasons. For example, if the custom through table "
"defined by the intermediate model does not enforce uniqueness on the "
"``(model1, model2)`` pair, a ``remove()`` call would not provide enough "
"information as to which intermediate model instance should be deleted::"
msgstr ""
":meth:`~django.db.models.fields.related.RelatedManager.remove` 方法也因为同样"
"的原因无法使用。举例来讲，如果通过中间模型定义的自定义中间表没有确保二元祖 "
"``(model1, model2)`` 的唯一，``remove()`` 在被调用的时候没有足够的信息来确定"
"哪一个中间模型需要被删除。"

msgid ""
"However, the :meth:`~django.db.models.fields.related.RelatedManager.clear` "
"method can be used to remove all many-to-many relationships for an instance::"
msgstr ""
"但是，:meth:`~django.db.models.fields.related.RelatedManager.clear` 方法可以"
"被用来移除一个实例的所有多对多关系："

msgid ""
"Once you have established the many-to-many relationships by creating "
"instances of your intermediate model, you can issue queries. Just as with "
"normal many-to-many relationships, you can query using the attributes of the "
"many-to-many-related model::"
msgstr ""
"一旦你通过创建中间模型创立了多对多关系，你可以执行查询。就和一般的多对多关系"
"一样，你可以使用多对多关联模型的属性来执行查询："

msgid ""
"As you are using an intermediate model, you can also query on its "
"attributes::"
msgstr "当你使用中间模型的时候，你也可以查询他的属性："

msgid ""
"If you need to access a membership's information you may do so by directly "
"querying the ``Membership`` model::"
msgstr "如果你想访问一个关系的信息时你可以直接查询 ``Membership`` 模型："

msgid ""
"Another way to access the same information is by querying the :ref:`many-to-"
"many reverse relationship<m2m-reverse-relationships>` from a ``Person`` "
"object::"
msgstr ""
"另一种访问同样信息的方法是通过 ``Person`` 对象来查询 ref:`many-to-many "
"reverse relationship<m2m-reverse-relationships>` ："

msgid ""
"To define a one-to-one relationship, use :class:`~django.db.models."
"OneToOneField`. You use it just like any other ``Field`` type: by including "
"it as a class attribute of your model."
msgstr ""
"使用 :class:`~django.db.models.OneToOneField` 来定义一对一关系。就像使用其他"
"类型的 ``Field`` 一样：在模型属性中包含它。"

msgid ""
"This is most useful on the primary key of an object when that object "
"\"extends\" another object in some way."
msgstr "当一个对象以某种方式“扩展”另一个对象时，这对该对象的主键非常有用。"

msgid ""
":class:`~django.db.models.OneToOneField` requires a positional argument: the "
"class to which the model is related."
msgstr ""
":class:`~django.db.models.OneToOneField` 需要一个位置参数：与模型相关的类。"

msgid ""
"For example, if you were building a database of \"places\", you would build "
"pretty standard stuff such as address, phone number, etc. in the database. "
"Then, if you wanted to build a database of restaurants on top of the places, "
"instead of repeating yourself and replicating those fields in the "
"``Restaurant`` model, you could make ``Restaurant`` have a :class:`~django."
"db.models.OneToOneField` to ``Place`` (because a restaurant \"is a\" place; "
"in fact, to handle this you'd typically use :ref:`inheritance <model-"
"inheritance>`, which involves an implicit one-to-one relation)."
msgstr ""
"例如，当你要建立一个有关“位置”信息的数据库时，你可能会包含通常的地址，电话等"
"字段。接着，如果你想接着建立一个关于关于餐厅的数据库，除了将位置数据库当中的"
"字段复制到 ``Restaurant`` 模型，你也可以将一个指向 ``Place`` :class:`~django."
"db.models.OneToOneField` 放到 ``Restaurant`` 当中（因为餐厅“是一个”地点）；事"
"实上，在处理这样的情况时最好使用 :ref:`inheritance<model-inheritance>` ，它隐"
"含的包括了一个一对一关系。"

msgid ""
"As with :class:`~django.db.models.ForeignKey`, a :ref:`recursive "
"relationship <recursive-relationships>` can be defined and :ref:`references "
"to as-yet undefined models <lazy-relationships>` can be made."
msgstr ""
"和  :class:`~django.db.models.ForeignKey` 一样，可以创建 :ref:`recursive "
"relationship <recursive-relationships>` 也可以创建 :ref:`references to as-"
"yet undefined models <lazy-relationships>` 。"

msgid ""
"See the :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` for a full example."
msgstr ""
"点击文档 :doc:`One-to-one relationship model example </topics/db/examples/"
"one_to_one>` 来查看完整的例子。"

msgid ""
":class:`~django.db.models.OneToOneField` fields also accept an optional :"
"attr:`~django.db.models.OneToOneField.parent_link` argument."
msgstr ""
":class:`~django.db.models.OneToOneField` 字段还接受一个可选的 :attr:`~django."
"db.models.OneToOneField.parent_link` 参数。"

msgid ""
":class:`~django.db.models.OneToOneField` classes used to automatically "
"become the primary key on a model. This is no longer true (although you can "
"manually pass in the :attr:`~django.db.models.Field.primary_key` argument if "
"you like). Thus, it's now possible to have multiple fields of type :class:"
"`~django.db.models.OneToOneField` on a single model."
msgstr ""
":class:`~django.db.models.OneToOneField` 类通常自动的成为模型的主键，这条规则"
"现在不再使用了（然而你可以手动指定 :attr:`~django.db.models.Field."
"primary_key` 参数）。因此，现在可以在单个模型当中指定多个 :class:`~django.db."
"models.OneToOneField` 字段。"

msgid "Models across files"
msgstr "跨文件模型"

msgid ""
"It's perfectly OK to relate a model to one from another app. To do this, "
"import the related model at the top of the file where your model is defined. "
"Then, just refer to the other model class wherever needed. For example::"
msgstr ""
"关联另一个应用中的模型是当然可以的。为了实现这一点，在定义模型的文件开头导入"
"需要被关联的模型。接着，接着就可以在其他有需要的模型类当中关联它了。比如："

msgid "Field name restrictions"
msgstr "字段命名限制"

msgid "Django places only two restrictions on model field names:"
msgstr "Django在模型字段命名方面仅有两个限制。"

msgid ""
"A field name cannot be a Python reserved word, because that would result in "
"a Python syntax error. For example::"
msgstr "一个字段的名称不能是Python保留字，因为这回导致Python语法错误。比如："

msgid ""
"A field name cannot contain more than one underscore in a row, due to the "
"way Django's query lookup syntax works. For example::"
msgstr ""
"一个字段名称不能包含连续的多个下划线，原因在于Django查询语法的工作方式。比"
"如："

msgid ""
"These limitations can be worked around, though, because your field name "
"doesn't necessarily have to match your database column name. See the :attr:"
"`~Field.db_column` option."
msgstr ""
"但是，这些限制是可以被解决的，因为字段名没要求和数据库列名一样。查看 :attr:"
"`~Field.db_column` 选项。"

msgid ""
"SQL reserved words, such as ``join``, ``where`` or ``select``, *are* allowed "
"as model field names, because Django escapes all database table names and "
"column names in every underlying SQL query. It uses the quoting syntax of "
"your particular database engine."
msgstr ""
"SQL保留字，例如 ``join``， ``where`` 或 ``select``， *是* 可以被用在模型字段"
"名当中的，因为Django在对底层的SQL查询当中清洗了所有的数据库表名和字段名，通过"
"使用特定数据库引擎的引用语法。"

msgid "Custom field types"
msgstr "自定义的字段类型"

msgid ""
"If one of the existing model fields cannot be used to fit your purposes, or "
"if you wish to take advantage of some less common database column types, you "
"can create your own field class. Full coverage of creating your own fields "
"is provided in :doc:`/howto/custom-model-fields`."
msgstr ""
"如果已经存在的模型字段不能满足你的需求，或者你希望支持一些不太常见的数据库列"
"类型，你可以创建自己的字段类。在 :doc:`/howto/custom-model-fields 中提供了创"
"建自己的字段的各方面内容。"

msgid "``Meta`` options"
msgstr "``Meta`` 选项"

msgid "Give your model metadata by using an inner ``class Meta``, like so::"
msgstr "使用内部 ``Meta类`` 来给模型赋予元数据，就像："

msgid ""
"Model metadata is \"anything that's not a field\", such as ordering options "
"(:attr:`~Options.ordering`), database table name (:attr:`~Options."
"db_table`), or human-readable singular and plural names (:attr:`~Options."
"verbose_name` and :attr:`~Options.verbose_name_plural`). None are required, "
"and adding ``class Meta`` to a model is completely optional."
msgstr ""
"模型的元数据是指“所有不是字段的东西”，比如排序选项（attr:`~Options."
"ordering`），数据库表名（:attr:`~Options.db_table`），或是人可读的单复数名（:"
"attr:`~Options.verbose_name` 和 :attr:`~Options.verbose_name_plural`）。都不"
"是必须的，并且在模型当中添加 ``Meta类`` 也完全是可选的。"

msgid ""
"A complete list of all possible ``Meta`` options can be found in the :doc:"
"`model option reference </ref/models/options>`."
msgstr ""
"在 :doc:`model option reference </ref/models/options>` 中列出了 ``Meta`` 可使"
"用的全部选项。"

msgid "Model attributes"
msgstr "模型属性"

msgid "``objects``"
msgstr "``objects``"

msgid ""
"The most important attribute of a model is the :class:`~django.db.models."
"Manager`. It's the interface through which database query operations are "
"provided to Django models and is used to :ref:`retrieve the instances "
"<retrieving-objects>` from the database. If no custom ``Manager`` is "
"defined, the default name is :attr:`~django.db.models.Model.objects`. "
"Managers are only accessible via model classes, not the model instances."
msgstr ""
"模型当中最重要的属性是 :class:`~django.db.models.Manager`。它是Django模型和数"
"据库查询操作之间的接口，并且它被用作从数据库当中 :ref:`retrieve the "
"instances <retrieving-objects>`，如果没有指定自定义的 ``Manager`` 默认名称"
"是 :attr:`~django.db.models.Model.objects`。Manager只能通过模型类来访问，不能"
"通过模型实例来访问。"

msgid "Model methods"
msgstr "模型方法"

msgid ""
"Define custom methods on a model to add custom \"row-level\" functionality "
"to your objects. Whereas :class:`~django.db.models.Manager` methods are "
"intended to do \"table-wide\" things, model methods should act on a "
"particular model instance."
msgstr ""

msgid ""
"This is a valuable technique for keeping business logic in one place -- the "
"model."
msgstr ""

msgid "For example, this model has a few custom methods::"
msgstr ""

msgid "The last method in this example is a :term:`property`."
msgstr ""

msgid ""
"The :doc:`model instance reference </ref/models/instances>` has a complete "
"list of :ref:`methods automatically given to each model <model-instance-"
"methods>`. You can override most of these -- see `overriding predefined "
"model methods`_, below -- but there are a couple that you'll almost always "
"want to define:"
msgstr ""

msgid ":meth:`~Model.__str__`"
msgstr ""

msgid ""
"A Python \"magic method\" that returns a string representation of any "
"object. This is what Python and Django will use whenever a model instance "
"needs to be coerced and displayed as a plain string. Most notably, this "
"happens when you display an object in an interactive console or in the admin."
msgstr ""

msgid ""
"You'll always want to define this method; the default isn't very helpful at "
"all."
msgstr ""

msgid ":meth:`~Model.get_absolute_url`"
msgstr ""

msgid ""
"This tells Django how to calculate the URL for an object. Django uses this "
"in its admin interface, and any time it needs to figure out a URL for an "
"object."
msgstr ""

msgid ""
"Any object that has a URL that uniquely identifies it should define this "
"method."
msgstr ""

msgid "Overriding predefined model methods"
msgstr ""

msgid ""
"There's another set of :ref:`model methods <model-instance-methods>` that "
"encapsulate a bunch of database behavior that you'll want to customize. In "
"particular you'll often want to change the way :meth:`~Model.save` and :meth:"
"`~Model.delete` work."
msgstr ""

msgid ""
"You're free to override these methods (and any other model method) to alter "
"behavior."
msgstr ""

msgid ""
"A classic use-case for overriding the built-in methods is if you want "
"something to happen whenever you save an object. For example (see :meth:"
"`~Model.save` for documentation of the parameters it accepts)::"
msgstr ""

msgid "You can also prevent saving::"
msgstr ""

msgid ""
"It's important to remember to call the superclass method -- that's that "
"``super().save(*args, **kwargs)`` business -- to ensure that the object "
"still gets saved into the database. If you forget to call the superclass "
"method, the default behavior won't happen and the database won't get touched."
msgstr ""

msgid ""
"It's also important that you pass through the arguments that can be passed "
"to the model method -- that's what the ``*args, **kwargs`` bit does. Django "
"will, from time to time, extend the capabilities of built-in model methods, "
"adding new arguments. If you use ``*args, **kwargs`` in your method "
"definitions, you are guaranteed that your code will automatically support "
"those arguments when they are added."
msgstr ""

msgid "Overridden model methods are not called on bulk operations"
msgstr ""

msgid ""
"Note that the :meth:`~Model.delete()` method for an object is not "
"necessarily called when :ref:`deleting objects in bulk using a QuerySet "
"<topics-db-queries-delete>` or as a result of a :attr:`cascading delete "
"<django.db.models.ForeignKey.on_delete>`. To ensure customized delete logic "
"gets executed, you can use :data:`~django.db.models.signals.pre_delete` and/"
"or :data:`~django.db.models.signals.post_delete` signals."
msgstr ""

msgid ""
"Unfortunately, there isn't a workaround when :meth:`creating<django.db."
"models.query.QuerySet.bulk_create>` or :meth:`updating<django.db.models."
"query.QuerySet.update>` objects in bulk, since none of :meth:`~Model."
"save()`, :data:`~django.db.models.signals.pre_save`, and :data:`~django.db."
"models.signals.post_save` are called."
msgstr ""

msgid "Executing custom SQL"
msgstr ""

msgid ""
"Another common pattern is writing custom SQL statements in model methods and "
"module-level methods. For more details on using raw SQL, see the "
"documentation on :doc:`using raw SQL</topics/db/sql>`."
msgstr ""

msgid "Model inheritance"
msgstr "模型继承"

msgid ""
"Model inheritance in Django works almost identically to the way normal class "
"inheritance works in Python, but the basics at the beginning of the page "
"should still be followed. That means the base class should subclass :class:"
"`django.db.models.Model`."
msgstr ""
"模型继承在 Django 中与普通类继承在 Python 中的工作方式几乎完全相同, 但也仍应"
"遵循本页开头的内容. 这意味着其基类应该继承自 :class:`django.db.models."
"Model` ."

msgid ""
"The only decision you have to make is whether you want the parent models to "
"be models in their own right (with their own database tables), or if the "
"parents are just holders of common information that will only be visible "
"through the child models."
msgstr ""

msgid "There are three styles of inheritance that are possible in Django."
msgstr ""

msgid ""
"Often, you will just want to use the parent class to hold information that "
"you don't want to have to type out for each child model. This class isn't "
"going to ever be used in isolation, so :ref:`abstract-base-classes` are what "
"you're after."
msgstr ""

msgid ""
"If you're subclassing an existing model (perhaps something from another "
"application entirely) and want each model to have its own database table, :"
"ref:`multi-table-inheritance` is the way to go."
msgstr ""

msgid ""
"Finally, if you only want to modify the Python-level behavior of a model, "
"without changing the models fields in any way, you can use :ref:`proxy-"
"models`."
msgstr ""

msgid "Abstract base classes"
msgstr ""

msgid ""
"Abstract base classes are useful when you want to put some common "
"information into a number of other models. You write your base class and put "
"``abstract=True`` in the :ref:`Meta <meta-options>` class. This model will "
"then not be used to create any database table. Instead, when it is used as a "
"base class for other models, its fields will be added to those of the child "
"class."
msgstr ""

msgid "An example::"
msgstr ""

msgid ""
"The ``Student`` model will have three fields: ``name``, ``age`` and "
"``home_group``. The ``CommonInfo`` model cannot be used as a normal Django "
"model, since it is an abstract base class. It does not generate a database "
"table or have a manager, and cannot be instantiated or saved directly."
msgstr ""

msgid ""
"Fields inherited from abstract base classes can be overridden with another "
"field or value, or be removed with ``None``."
msgstr ""

msgid ""
"For many uses, this type of model inheritance will be exactly what you want. "
"It provides a way to factor out common information at the Python level, "
"while still only creating one database table per child model at the database "
"level."
msgstr ""

msgid "``Meta`` inheritance"
msgstr ""

msgid ""
"When an abstract base class is created, Django makes any :ref:`Meta <meta-"
"options>` inner class you declared in the base class available as an "
"attribute. If a child class does not declare its own :ref:`Meta <meta-"
"options>` class, it will inherit the parent's :ref:`Meta <meta-options>`. If "
"the child wants to extend the parent's :ref:`Meta <meta-options>` class, it "
"can subclass it. For example::"
msgstr ""

msgid ""
"Django does make one adjustment to the :ref:`Meta <meta-options>` class of "
"an abstract base class: before installing the :ref:`Meta <meta-options>` "
"attribute, it sets ``abstract=False``. This means that children of abstract "
"base classes don't automatically become abstract classes themselves. Of "
"course, you can make an abstract base class that inherits from another "
"abstract base class. You just need to remember to explicitly set "
"``abstract=True`` each time."
msgstr ""

msgid ""
"Some attributes won't make sense to include in the :ref:`Meta <meta-"
"options>` class of an abstract base class. For example, including "
"``db_table`` would mean that all the child classes (the ones that don't "
"specify their own :ref:`Meta <meta-options>`) would use the same database "
"table, which is almost certainly not what you want."
msgstr ""

msgid "Be careful with ``related_name`` and ``related_query_name``"
msgstr ""

msgid ""
"If you are using :attr:`~django.db.models.ForeignKey.related_name` or :attr:"
"`~django.db.models.ForeignKey.related_query_name` on a ``ForeignKey`` or "
"``ManyToManyField``, you must always specify a *unique* reverse name and "
"query name for the field. This would normally cause a problem in abstract "
"base classes, since the fields on this class are included into each of the "
"child classes, with exactly the same values for the attributes (including :"
"attr:`~django.db.models.ForeignKey.related_name` and :attr:`~django.db."
"models.ForeignKey.related_query_name`) each time."
msgstr ""

msgid ""
"To work around this problem, when you are using :attr:`~django.db.models."
"ForeignKey.related_name` or :attr:`~django.db.models.ForeignKey."
"related_query_name` in an abstract base class (only), part of the value "
"should contain ``'%(app_label)s'`` and ``'%(class)s'``."
msgstr ""

msgid ""
"``'%(class)s'`` is replaced by the lower-cased name of the child class that "
"the field is used in."
msgstr ""

msgid ""
"``'%(app_label)s'`` is replaced by the lower-cased name of the app the child "
"class is contained within. Each installed application name must be unique "
"and the model class names within each app must also be unique, therefore the "
"resulting name will end up being different."
msgstr ""

msgid "For example, given an app ``common/models.py``::"
msgstr ""

msgid "Along with another app ``rare/models.py``::"
msgstr ""

msgid ""
"The reverse name of the ``common.ChildA.m2m`` field will be "
"``common_childa_related`` and the reverse query name will be "
"``common_childas``. The reverse name of the ``common.ChildB.m2m`` field will "
"be ``common_childb_related`` and the reverse query name will be "
"``common_childbs``. Finally, the reverse name of the ``rare.ChildB.m2m`` "
"field will be ``rare_childb_related`` and the reverse query name will be "
"``rare_childbs``. It's up to you how you use the ``'%(class)s'`` and "
"``'%(app_label)s'`` portion to construct your related name or related query "
"name but if you forget to use it, Django will raise errors when you perform "
"system checks (or run :djadmin:`migrate`)."
msgstr ""

msgid ""
"If you don't specify a :attr:`~django.db.models.ForeignKey.related_name` "
"attribute for a field in an abstract base class, the default reverse name "
"will be the name of the child class followed by ``'_set'``, just as it "
"normally would be if you'd declared the field directly on the child class. "
"For example, in the above code, if the :attr:`~django.db.models.ForeignKey."
"related_name` attribute was omitted, the reverse name for the ``m2m`` field "
"would be ``childa_set`` in the ``ChildA`` case and ``childb_set`` for the "
"``ChildB`` field."
msgstr ""

msgid "Multi-table inheritance"
msgstr ""

msgid ""
"The second type of model inheritance supported by Django is when each model "
"in the hierarchy is a model all by itself. Each model corresponds to its own "
"database table and can be queried and created individually. The inheritance "
"relationship introduces links between the child model and each of its "
"parents (via an automatically-created :class:`~django.db.models."
"OneToOneField`). For example::"
msgstr ""

msgid ""
"All of the fields of ``Place`` will also be available in ``Restaurant``, "
"although the data will reside in a different database table. So these are "
"both possible::"
msgstr ""

msgid ""
"If you have a ``Place`` that is also a ``Restaurant``, you can get from the "
"``Place`` object to the ``Restaurant`` object by using the lower-case "
"version of the model name::"
msgstr ""

msgid ""
"However, if ``p`` in the above example was *not* a ``Restaurant`` (it had "
"been created directly as a ``Place`` object or was the parent of some other "
"class), referring to ``p.restaurant`` would raise a ``Restaurant."
"DoesNotExist`` exception."
msgstr ""

msgid ""
"The automatically-created :class:`~django.db.models.OneToOneField` on "
"``Restaurant`` that links it to ``Place`` looks like this::"
msgstr ""

msgid ""
"You can override that field by declaring your own :class:`~django.db.models."
"OneToOneField` with :attr:`parent_link=True <django.db.models.OneToOneField."
"parent_link>` on ``Restaurant``."
msgstr ""

msgid "``Meta`` and multi-table inheritance"
msgstr ""

msgid ""
"In the multi-table inheritance situation, it doesn't make sense for a child "
"class to inherit from its parent's :ref:`Meta <meta-options>` class. All "
"the :ref:`Meta <meta-options>` options have already been applied to the "
"parent class and applying them again would normally only lead to "
"contradictory behavior (this is in contrast with the abstract base class "
"case, where the base class doesn't exist in its own right)."
msgstr ""

msgid ""
"So a child model does not have access to its parent's :ref:`Meta <meta-"
"options>` class. However, there are a few limited cases where the child "
"inherits behavior from the parent: if the child does not specify an :attr:"
"`~django.db.models.Options.ordering` attribute or a :attr:`~django.db.models."
"Options.get_latest_by` attribute, it will inherit these from its parent."
msgstr ""

msgid ""
"If the parent has an ordering and you don't want the child to have any "
"natural ordering, you can explicitly disable it::"
msgstr ""

msgid "Inheritance and reverse relations"
msgstr ""

msgid ""
"Because multi-table inheritance uses an implicit :class:`~django.db.models."
"OneToOneField` to link the child and the parent, it's possible to move from "
"the parent down to the child, as in the above example. However, this uses up "
"the name that is the default :attr:`~django.db.models.ForeignKey."
"related_name` value for :class:`~django.db.models.ForeignKey` and :class:"
"`~django.db.models.ManyToManyField` relations.  If you are putting those "
"types of relations on a subclass of the parent model, you **must** specify "
"the :attr:`~django.db.models.ForeignKey.related_name` attribute on each such "
"field. If you forget, Django will raise a validation error."
msgstr ""

msgid ""
"For example, using the above ``Place`` class again, let's create another "
"subclass with a :class:`~django.db.models.ManyToManyField`::"
msgstr ""

msgid "This results in the error::"
msgstr ""

msgid ""
"Adding ``related_name`` to the ``customers`` field as follows would resolve "
"the error: ``models.ManyToManyField(Place, related_name='provider')``."
msgstr ""

msgid "Specifying the parent link field"
msgstr ""

msgid ""
"As mentioned, Django will automatically create a :class:`~django.db.models."
"OneToOneField` linking your child class back to any non-abstract parent "
"models. If you want to control the name of the attribute linking back to the "
"parent, you can create your own :class:`~django.db.models.OneToOneField` and "
"set :attr:`parent_link=True <django.db.models.OneToOneField.parent_link>` to "
"indicate that your field is the link back to the parent class."
msgstr ""

msgid "Proxy models"
msgstr ""

msgid ""
"When using :ref:`multi-table inheritance <multi-table-inheritance>`, a new "
"database table is created for each subclass of a model. This is usually the "
"desired behavior, since the subclass needs a place to store any additional "
"data fields that are not present on the base class. Sometimes, however, you "
"only want to change the Python behavior of a model -- perhaps to change the "
"default manager, or add a new method."
msgstr ""

msgid ""
"This is what proxy model inheritance is for: creating a *proxy* for the "
"original model. You can create, delete and update instances of the proxy "
"model and all the data will be saved as if you were using the original (non-"
"proxied) model. The difference is that you can change things like the "
"default model ordering or the default manager in the proxy, without having "
"to alter the original."
msgstr ""

msgid ""
"Proxy models are declared like normal models. You tell Django that it's a "
"proxy model by setting the :attr:`~django.db.models.Options.proxy` attribute "
"of the ``Meta`` class to ``True``."
msgstr ""

msgid ""
"For example, suppose you want to add a method to the ``Person`` model. You "
"can do it like this::"
msgstr ""

msgid ""
"The ``MyPerson`` class operates on the same database table as its parent "
"``Person`` class. In particular, any new instances of ``Person`` will also "
"be accessible through ``MyPerson``, and vice-versa::"
msgstr ""

msgid ""
"You could also use a proxy model to define a different default ordering on a "
"model. You might not always want to order the ``Person`` model, but "
"regularly order by the ``last_name`` attribute when you use the proxy. This "
"is easy::"
msgstr ""
"你仍然可以使用一个代理模型来定义模型的默认排序方法。你也许不会想一直"
"对“Persion”进行排序，但是通常情况下用代理模型根据“last_name”属性进行排序。这"
"很简单::"

msgid ""
"Now normal ``Person`` queries will be unordered and ``OrderedPerson`` "
"queries will be ordered by ``last_name``."
msgstr ""

msgid ""
"Proxy models inherit ``Meta`` attributes :ref:`in the same way as regular "
"models <meta-and-multi-table-inheritance>`."
msgstr ""
"代理模型继承“Meta”属性:ref:`和普通模型使用同样的方法<meta-and-multi-table-"
"inheritance>`。"

msgid "``QuerySet``\\s still return the model that was requested"
msgstr ""

msgid ""
"There is no way to have Django return, say, a ``MyPerson`` object whenever "
"you query for ``Person`` objects. A queryset for ``Person`` objects will "
"return those types of objects. The whole point of proxy objects is that code "
"relying on the original ``Person`` will use those and your own code can use "
"the extensions you included (that no other code is relying on anyway). It is "
"not a way to replace the ``Person`` (or any other) model everywhere with "
"something of your own creation."
msgstr ""

msgid "Base class restrictions"
msgstr ""

msgid ""
"A proxy model must inherit from exactly one non-abstract model class. You "
"can't inherit from multiple non-abstract models as the proxy model doesn't "
"provide any connection between the rows in the different database tables. A "
"proxy model can inherit from any number of abstract model classes, providing "
"they do *not* define any model fields. A proxy model may also inherit from "
"any number of proxy models that share a common non-abstract parent class."
msgstr ""
"一个代理模型必须仅能继承一个非抽象模型类。你不能继承多个非抽象模型类，因为代"
"理模型无法提供不同数据表的任何行间连接。一个代理模型可以继承任意数量的抽象模"
"型类，假如他们*没有*定义任何的模型字段。一个代理模型也可以继承任意数量的代理"
"模型，只需他们共享同一个非抽象父类。"

msgid "Proxy model managers"
msgstr "代理模型管理器"

msgid ""
"If you don't specify any model managers on a proxy model, it inherits the "
"managers from its model parents. If you define a manager on the proxy model, "
"it will become the default, although any managers defined on the parent "
"classes will still be available."
msgstr ""

msgid ""
"Continuing our example from above, you could change the default manager used "
"when you query the ``Person`` model like this::"
msgstr ""

msgid ""
"If you wanted to add a new manager to the Proxy, without replacing the "
"existing default, you can use the techniques described in the :ref:`custom "
"manager <custom-managers-and-inheritance>` documentation: create a base "
"class containing the new managers and inherit that after the primary base "
"class::"
msgstr ""

msgid ""
"You probably won't need to do this very often, but, when you do, it's "
"possible."
msgstr "通常情况下，你可能不需要这么做。然而，你需要的时候，这也是可以的。"

msgid "Differences between proxy inheritance and unmanaged models"
msgstr ""

msgid ""
"Proxy model inheritance might look fairly similar to creating an unmanaged "
"model, using the :attr:`~django.db.models.Options.managed` attribute on a "
"model's ``Meta`` class."
msgstr ""

msgid ""
"With careful setting of :attr:`Meta.db_table <django.db.models.Options."
"db_table>` you could create an unmanaged model that shadows an existing "
"model and adds Python methods to it. However, that would be very repetitive "
"and fragile as you need to keep both copies synchronized if you make any "
"changes."
msgstr ""

msgid ""
"On the other hand, proxy models are intended to behave exactly like the "
"model they are proxying for. They are always in sync with the parent model "
"since they directly inherit its fields and managers."
msgstr ""

msgid "The general rules are:"
msgstr ""

msgid ""
"If you are mirroring an existing model or database table and don't want all "
"the original database table columns, use ``Meta.managed=False``. That option "
"is normally useful for modeling database views and tables not under the "
"control of Django."
msgstr ""

msgid ""
"If you are wanting to change the Python-only behavior of a model, but keep "
"all the same fields as in the original, use ``Meta.proxy=True``. This sets "
"things up so that the proxy model is an exact copy of the storage structure "
"of the original model when data is saved."
msgstr ""

msgid "Multiple inheritance"
msgstr ""

msgid ""
"Just as with Python's subclassing, it's possible for a Django model to "
"inherit from multiple parent models. Keep in mind that normal Python name "
"resolution rules apply. The first base class that a particular name (e.g. :"
"ref:`Meta <meta-options>`) appears in will be the one that is used; for "
"example, this means that if multiple parents contain a :ref:`Meta <meta-"
"options>` class, only the first one is going to be used, and all others will "
"be ignored."
msgstr ""

msgid ""
"Generally, you won't need to inherit from multiple parents. The main use-"
"case where this is useful is for \"mix-in\" classes: adding a particular "
"extra field or method to every class that inherits the mix-in. Try to keep "
"your inheritance hierarchies as simple and straightforward as possible so "
"that you won't have to struggle to work out where a particular piece of "
"information is coming from."
msgstr ""

msgid ""
"Note that inheriting from multiple models that have a common ``id`` primary "
"key field will raise an error. To properly use multiple inheritance, you can "
"use an explicit :class:`~django.db.models.AutoField` in the base models::"
msgstr ""

msgid ""
"Or use a common ancestor to hold the :class:`~django.db.models.AutoField`. "
"This requires using an explicit :class:`~django.db.models.OneToOneField` "
"from each parent model to the common ancestor to avoid a clash between the "
"fields that are automatically generated and inherited by the child::"
msgstr ""

msgid "Field name \"hiding\" is not permitted"
msgstr ""

msgid ""
"In normal Python class inheritance, it is permissible for a child class to "
"override any attribute from the parent class. In Django, this isn't usually "
"permitted for model fields. If a non-abstract model base class has a field "
"called ``author``, you can't create another model field or define an "
"attribute called ``author`` in any class that inherits from that base class."
msgstr ""

msgid ""
"This restriction doesn't apply to model fields inherited from an abstract "
"model. Such fields may be overridden with another field or value, or be "
"removed by setting ``field_name = None``."
msgstr ""

msgid ""
"Model managers are inherited from abstract base classes. Overriding an "
"inherited field which is referenced by an inherited :class:`~django.db."
"models.Manager` may cause subtle bugs. See :ref:`custom managers and model "
"inheritance <custom-managers-and-inheritance>`."
msgstr ""

msgid ""
"Some fields define extra attributes on the model, e.g. a :class:`~django.db."
"models.ForeignKey` defines an extra attribute with ``_id`` appended to the "
"field name, as well as ``related_name`` and ``related_query_name`` on the "
"foreign model."
msgstr ""

msgid ""
"These extra attributes cannot be overridden unless the field that defines it "
"is changed or removed so that it no longer defines the extra attribute."
msgstr ""

msgid ""
"Overriding fields in a parent model leads to difficulties in areas such as "
"initializing new instances (specifying which field is being initialized in "
"``Model.__init__``) and serialization. These are features which normal "
"Python class inheritance doesn't have to deal with in quite the same way, so "
"the difference between Django model inheritance and Python class inheritance "
"isn't arbitrary."
msgstr ""

msgid ""
"This restriction only applies to attributes which are :class:`~django.db."
"models.Field` instances. Normal Python attributes can be overridden if you "
"wish. It also only applies to the name of the attribute as Python sees it: "
"if you are manually specifying the database column name, you can have the "
"same column name appearing in both a child and an ancestor model for multi-"
"table inheritance (they are columns in two different database tables)."
msgstr ""

msgid ""
"Django will raise a :exc:`~django.core.exceptions.FieldError` if you "
"override any model field in any ancestor model."
msgstr ""

msgid "Organizing models in a package"
msgstr ""

msgid ""
"The :djadmin:`manage.py startapp <startapp>` command creates an application "
"structure that includes a ``models.py`` file. If you have many models, "
"organizing them in separate files may be useful."
msgstr ""

msgid ""
"To do so, create a ``models`` package. Remove ``models.py`` and create a "
"``myapp/models/`` directory with an ``__init__.py`` file and the files to "
"store your models. You must import the models in the ``__init__.py`` file."
msgstr ""

msgid ""
"For example, if you had ``organic.py`` and ``synthetic.py`` in the "
"``models`` directory:"
msgstr ""

msgid "myapp/models/__init__.py"
msgstr ""

msgid ""
"Explicitly importing each model rather than using ``from .models import *`` "
"has the advantages of not cluttering the namespace, making code more "
"readable, and keeping code analysis tools useful."
msgstr ""

msgid ":doc:`The Models Reference </ref/models/index>`"
msgstr ""

msgid ""
"Covers all the model related APIs including model fields, related objects, "
"and ``QuerySet``."
msgstr ""

msgid ""
"This topic guide describes Django's support for interacting with multiple "
"databases. Most of the rest of Django's documentation assumes you are "
"interacting with a single database. If you want to interact with multiple "
"databases, you'll need to take some additional steps."
msgstr ""

msgid ""
"See :ref:`testing-multi-db` for information about testing with multiple "
"databases."
msgstr ""

msgid "Defining your databases"
msgstr ""

msgid ""
"The first step to using more than one database with Django is to tell Django "
"about the database servers you'll be using. This is done using the :setting:"
"`DATABASES` setting. This setting maps database aliases, which are a way to "
"refer to a specific database throughout Django, to a dictionary of settings "
"for that specific connection. The settings in the inner dictionaries are "
"described fully in the :setting:`DATABASES` documentation."
msgstr ""

msgid ""
"Databases can have any alias you choose. However, the alias ``default`` has "
"special significance. Django uses the database with the alias of ``default`` "
"when no other database has been selected."
msgstr ""

msgid ""
"The following is an example ``settings.py`` snippet defining two databases "
"-- a default PostgreSQL database and a MySQL database called ``users``::"
msgstr ""

msgid ""
"If the concept of a ``default`` database doesn't make sense in the context "
"of your project, you need to be careful to always specify the database that "
"you want to use. Django requires that a ``default`` database entry be "
"defined, but the parameters dictionary can be left blank if it will not be "
"used. To do this, you must set up :setting:`DATABASE_ROUTERS` for all of "
"your apps' models, including those in any contrib and third-party apps "
"you're using, so that no queries are routed to the default database. The "
"following is an example ``settings.py`` snippet defining two non-default "
"databases, with the ``default`` entry intentionally left empty::"
msgstr ""

msgid ""
"If you attempt to access a database that you haven't defined in your :"
"setting:`DATABASES` setting, Django will raise a ``django.db.utils."
"ConnectionDoesNotExist`` exception."
msgstr ""

msgid "Synchronizing your databases"
msgstr ""

msgid ""
"The :djadmin:`migrate` management command operates on one database at a "
"time. By default, it operates on the ``default`` database, but by providing "
"the :option:`--database <migrate --database>` option, you can tell it to "
"synchronize a different database. So, to synchronize all models onto all "
"databases in the first example above, you would need to call::"
msgstr ""

msgid ""
"If you don't want every application to be synchronized onto a particular "
"database, you can define a :ref:`database router<topics-db-multi-db-"
"routing>` that implements a policy constraining the availability of "
"particular models."
msgstr ""

msgid ""
"If, as in the second example above, you've left the ``default`` database "
"empty, you must provide a database name each time you run :djadmin:"
"`migrate`. Omitting the database name would raise an error. For the second "
"example::"
msgstr ""

msgid "Using other management commands"
msgstr ""

msgid ""
"Most other ``django-admin`` commands that interact with the database operate "
"in the same way as :djadmin:`migrate` -- they only ever operate on one "
"database at a time, using ``--database`` to control the database used."
msgstr ""

msgid ""
"An exception to this rule is the :djadmin:`makemigrations` command. It "
"validates the migration history in the databases to catch problems with the "
"existing migration files (which could be caused by editing them) before "
"creating new migrations. By default, it checks only the ``default`` "
"database, but it consults the :meth:`allow_migrate` method of :ref:`routers "
"<topics-db-multi-db-routing>` if any are installed."
msgstr ""

msgid "Automatic database routing"
msgstr ""

msgid ""
"The easiest way to use multiple databases is to set up a database routing "
"scheme. The default routing scheme ensures that objects remain 'sticky' to "
"their original database (i.e., an object retrieved from the ``foo`` database "
"will be saved on the same database). The default routing scheme ensures that "
"if a database isn't specified, all queries fall back to the ``default`` "
"database."
msgstr ""

msgid ""
"You don't have to do anything to activate the default routing scheme -- it "
"is provided 'out of the box' on every Django project. However, if you want "
"to implement more interesting database allocation behaviors, you can define "
"and install your own database routers."
msgstr ""

msgid "Database routers"
msgstr ""

msgid "A database Router is a class that provides up to four methods:"
msgstr ""

msgid ""
"Suggest the database that should be used for read operations for objects of "
"type ``model``."
msgstr ""

msgid ""
"If a database operation is able to provide any additional information that "
"might assist in selecting a database, it will be provided in the ``hints`` "
"dictionary. Details on valid hints are provided :ref:`below <topics-db-multi-"
"db-hints>`."
msgstr ""

msgid "Returns ``None`` if there is no suggestion."
msgstr ""

msgid ""
"Suggest the database that should be used for writes of objects of type Model."
msgstr ""

msgid ""
"Return ``True`` if a relation between ``obj1`` and ``obj2`` should be "
"allowed, ``False`` if the relation should be prevented, or ``None`` if the "
"router has no opinion. This is purely a validation operation, used by "
"foreign key and many to many operations to determine if a relation should be "
"allowed between two objects."
msgstr ""

msgid ""
"If no router has an opinion (i.e. all routers return ``None``), only "
"relations within the same database are allowed."
msgstr ""

msgid ""
"Determine if the migration operation is allowed to run on the database with "
"alias ``db``. Return ``True`` if the operation should run, ``False`` if it "
"shouldn't run, or ``None`` if the router has no opinion."
msgstr ""

msgid ""
"The ``app_label`` positional argument is the label of the application being "
"migrated."
msgstr ""

msgid ""
"``model_name`` is set by most migration operations to the value of ``model."
"_meta.model_name`` (the lowercased version of the model ``__name__``) of the "
"model being migrated. Its value is ``None`` for the :class:`~django.db."
"migrations.operations.RunPython` and :class:`~django.db.migrations."
"operations.RunSQL` operations unless they provide it using hints."
msgstr ""

msgid ""
"``hints`` are used by certain operations to communicate additional "
"information to the router."
msgstr ""

msgid ""
"When ``model_name`` is set, ``hints`` normally contains the model class "
"under the key ``'model'``. Note that it may be a :ref:`historical model "
"<historical-models>`, and thus not have any custom attributes, methods, or "
"managers. You should only rely on ``_meta``."
msgstr ""

msgid ""
"This method can also be used to determine the availability of a model on a "
"given database."
msgstr ""

msgid ""
":djadmin:`makemigrations` always creates migrations for model changes, but "
"if ``allow_migrate()`` returns ``False``, any migration operations for the "
"``model_name`` will be silently skipped when running :djadmin:`migrate` on "
"the ``db``. Changing the behavior of ``allow_migrate()`` for models that "
"already have migrations may result in broken foreign keys, extra tables, or "
"missing tables. When :djadmin:`makemigrations` verifies the migration "
"history, it skips databases where no app is allowed to migrate."
msgstr ""

msgid ""
"A router doesn't have to provide *all* these methods -- it may omit one or "
"more of them. If one of the methods is omitted, Django will skip that router "
"when performing the relevant check."
msgstr ""

msgid "Hints"
msgstr ""

msgid ""
"The hints received by the database router can be used to decide which "
"database should receive a given request."
msgstr ""

msgid ""
"At present, the only hint that will be provided is ``instance``, an object "
"instance that is related to the read or write operation that is underway. "
"This might be the instance that is being saved, or it might be an instance "
"that is being added in a many-to-many relation. In some cases, no instance "
"hint will be provided at all. The router checks for the existence of an "
"instance hint, and determine if that hint should be used to alter routing "
"behavior."
msgstr ""

msgid "Using routers"
msgstr ""

msgid ""
"Database routers are installed using the :setting:`DATABASE_ROUTERS` "
"setting. This setting defines a list of class names, each specifying a "
"router that should be used by the master router (``django.db.router``)."
msgstr ""

msgid ""
"The master router is used by Django's database operations to allocate "
"database usage. Whenever a query needs to know which database to use, it "
"calls the master router, providing a model and a hint (if available). Django "
"then tries each router in turn until a database suggestion can be found. If "
"no suggestion can be found, it tries the current ``_state.db`` of the hint "
"instance. If a hint instance wasn't provided, or the instance doesn't "
"currently have database state, the master router will allocate the "
"``default`` database."
msgstr ""

msgid "An example"
msgstr "一个例子"

msgid "Example purposes only!"
msgstr ""

msgid ""
"This example is intended as a demonstration of how the router infrastructure "
"can be used to alter database usage. It intentionally ignores some complex "
"issues in order to demonstrate how routers are used."
msgstr ""

msgid ""
"This example won't work if any of the models in ``myapp`` contain "
"relationships to models outside of the ``other`` database. :ref:`Cross-"
"database relationships <no_cross_database_relations>` introduce referential "
"integrity problems that Django can't currently handle."
msgstr ""

msgid ""
"The primary/replica (referred to as master/slave by some databases) "
"configuration described is also flawed -- it doesn't provide any solution "
"for handling replication lag (i.e., query inconsistencies introduced because "
"of the time taken for a write to propagate to the replicas). It also doesn't "
"consider the interaction of transactions with the database utilization "
"strategy."
msgstr ""

msgid ""
"So - what does this mean in practice? Let's consider another sample "
"configuration. This one will have several databases: one for the ``auth`` "
"application, and all other apps using a primary/replica setup with two read "
"replicas. Here are the settings specifying these databases::"
msgstr ""

msgid ""
"Now we'll need to handle routing. First we want a router that knows to send "
"queries for the ``auth`` app to ``auth_db``::"
msgstr ""

msgid ""
"And we also want a router that sends all other apps to the primary/replica "
"configuration, and randomly chooses a replica to read from::"
msgstr ""

msgid ""
"Finally, in the settings file, we add the following (substituting ``path.to."
"`` with the actual Python path to the module(s) where the routers are "
"defined)::"
msgstr ""

msgid ""
"The order in which routers are processed is significant. Routers will be "
"queried in the order they are listed in the :setting:`DATABASE_ROUTERS` "
"setting. In this example, the ``AuthRouter`` is processed before the "
"``PrimaryReplicaRouter``, and as a result, decisions concerning the models "
"in ``auth`` are processed before any other decision is made. If the :setting:"
"`DATABASE_ROUTERS` setting listed the two routers in the other order, "
"``PrimaryReplicaRouter.allow_migrate()`` would be processed first. The catch-"
"all nature of the PrimaryReplicaRouter implementation would mean that all "
"models would be available on all databases."
msgstr ""

msgid "With this setup installed, lets run some Django code::"
msgstr ""

msgid ""
"This example defined a router to handle interaction with models from the "
"``auth`` app, and other routers to handle interaction with all other apps. "
"If you left your ``default`` database empty and don't want to define a catch-"
"all database router to handle all apps not otherwise specified, your routers "
"must handle the names of all apps in :setting:`INSTALLED_APPS` before you "
"migrate. See :ref:`contrib_app_multiple_databases` for information about "
"contrib apps that must be together in one database."
msgstr ""

msgid "Manually selecting a database"
msgstr ""

msgid ""
"Django also provides an API that allows you to maintain complete control "
"over database usage in your code. A manually specified database allocation "
"will take priority over a database allocated by a router."
msgstr ""

msgid "Manually selecting a database for a ``QuerySet``"
msgstr ""

msgid ""
"You can select the database for a ``QuerySet`` at any point in the "
"``QuerySet`` \"chain.\" Just call ``using()`` on the ``QuerySet`` to get "
"another ``QuerySet`` that uses the specified database."
msgstr ""

msgid ""
"``using()`` takes a single argument: the alias of the database on which you "
"want to run the query. For example::"
msgstr ""

msgid "Selecting a database for ``save()``"
msgstr ""

msgid ""
"Use the ``using`` keyword to ``Model.save()`` to specify to which database "
"the data should be saved."
msgstr ""

msgid ""
"For example, to save an object to the ``legacy_users`` database, you'd use "
"this::"
msgstr ""

msgid ""
"If you don't specify ``using``, the ``save()`` method will save into the "
"default database allocated by the routers."
msgstr ""

msgid "Moving an object from one database to another"
msgstr ""

msgid ""
"If you've saved an instance to one database, it might be tempting to use "
"``save(using=...)`` as a way to migrate the instance to a new database. "
"However, if you don't take appropriate steps, this could have some "
"unexpected consequences."
msgstr ""

msgid "Consider the following example::"
msgstr ""

msgid ""
"In statement 1, a new ``Person`` object is saved to the ``first`` database. "
"At this time, ``p`` doesn't have a primary key, so Django issues an SQL "
"``INSERT`` statement. This creates a primary key, and Django assigns that "
"primary key to ``p``."
msgstr ""

msgid ""
"When the save occurs in statement 2, ``p`` already has a primary key value, "
"and Django will attempt to use that primary key on the new database. If the "
"primary key value isn't in use in the ``second`` database, then you won't "
"have any problems -- the object will be copied to the new database."
msgstr ""

msgid ""
"However, if the primary key of ``p`` is already in use on the ``second`` "
"database, the existing object in the ``second`` database will be overridden "
"when ``p`` is saved."
msgstr ""

msgid ""
"You can avoid this in two ways. First, you can clear the primary key of the "
"instance. If an object has no primary key, Django will treat it as a new "
"object, avoiding any loss of data on the ``second`` database::"
msgstr ""

msgid ""
"The second option is to use the ``force_insert`` option to ``save()`` to "
"ensure that Django does an SQL ``INSERT``::"
msgstr ""

msgid ""
"This will ensure that the person named ``Fred`` will have the same primary "
"key on both databases. If that primary key is already in use when you try to "
"save onto the ``second`` database, an error will be raised."
msgstr ""

msgid "Selecting a database to delete from"
msgstr ""

msgid ""
"By default, a call to delete an existing object will be executed on the same "
"database that was used to retrieve the object in the first place::"
msgstr ""

msgid ""
"To specify the database from which a model will be deleted, pass a ``using`` "
"keyword argument to the ``Model.delete()`` method. This argument works just "
"like the ``using`` keyword argument to ``save()``."
msgstr ""

msgid ""
"For example, if you're migrating a user from the ``legacy_users`` database "
"to the ``new_users`` database, you might use these commands::"
msgstr ""

msgid "Using managers with multiple databases"
msgstr ""

msgid ""
"Use the ``db_manager()`` method on managers to give managers access to a non-"
"default database."
msgstr ""

msgid ""
"For example, say you have a custom manager method that touches the database "
"-- ``User.objects.create_user()``. Because ``create_user()`` is a manager "
"method, not a ``QuerySet`` method, you can't do ``User.objects."
"using('new_users').create_user()``. (The ``create_user()`` method is only "
"available on ``User.objects``, the manager, not on ``QuerySet`` objects "
"derived from the manager.) The solution is to use ``db_manager()``, like "
"this::"
msgstr ""

msgid ""
"``db_manager()`` returns a copy of the manager bound to the database you "
"specify."
msgstr ""

msgid "Using ``get_queryset()`` with multiple databases"
msgstr ""

msgid ""
"If you're overriding ``get_queryset()`` on your manager, be sure to either "
"call the method on the parent (using ``super()``) or do the appropriate "
"handling of the ``_db`` attribute on the manager (a string containing the "
"name of the database to use)."
msgstr ""

msgid ""
"For example, if you want to return a custom ``QuerySet`` class from the "
"``get_queryset`` method, you could do this::"
msgstr ""

msgid "Exposing multiple databases in Django's admin interface"
msgstr ""

msgid ""
"Django's admin doesn't have any explicit support for multiple databases. If "
"you want to provide an admin interface for a model on a database other than "
"that specified by your router chain, you'll need to write custom :class:"
"`~django.contrib.admin.ModelAdmin` classes that will direct the admin to use "
"a specific database for content."
msgstr ""

msgid ""
"``ModelAdmin`` objects have five methods that require customization for "
"multiple-database support::"
msgstr ""

msgid ""
"The implementation provided here implements a multi-database strategy where "
"all objects of a given type are stored on a specific database (e.g., all "
"``User`` objects are in the ``other`` database). If your usage of multiple "
"databases is more complex, your ``ModelAdmin`` will need to reflect that "
"strategy."
msgstr ""

msgid ""
":class:`~django.contrib.admin.InlineModelAdmin` objects can be handled in a "
"similar fashion. They require three customized methods::"
msgstr ""

msgid ""
"Once you've written your model admin definitions, they can be registered "
"with any ``Admin`` instance::"
msgstr ""

msgid ""
"This example sets up two admin sites. On the first site, the ``Author`` and "
"``Publisher`` objects are exposed; ``Publisher`` objects have a tabular "
"inline showing books published by that publisher. The second site exposes "
"just publishers, without the inlines."
msgstr ""

msgid "Using raw cursors with multiple databases"
msgstr ""

msgid ""
"If you are using more than one database you can use ``django.db."
"connections`` to obtain the connection (and cursor) for a specific database. "
"``django.db.connections`` is a dictionary-like object that allows you to "
"retrieve a specific connection using its alias::"
msgstr ""

msgid "Limitations of multiple databases"
msgstr ""

msgid "Cross-database relations"
msgstr ""

msgid ""
"Django doesn't currently provide any support for foreign key or many-to-many "
"relationships spanning multiple databases. If you have used a router to "
"partition models to different databases, any foreign key and many-to-many "
"relationships defined by those models must be internal to a single database."
msgstr ""

msgid ""
"This is because of referential integrity. In order to maintain a "
"relationship between two objects, Django needs to know that the primary key "
"of the related object is valid. If the primary key is stored on a separate "
"database, it's not possible to easily evaluate the validity of a primary key."
msgstr ""

msgid ""
"If you're using Postgres, Oracle, or MySQL with InnoDB, this is enforced at "
"the database integrity level -- database level key constraints prevent the "
"creation of relations that can't be validated."
msgstr ""

msgid ""
"However, if you're using SQLite or MySQL with MyISAM tables, there is no "
"enforced referential integrity; as a result, you may be able to 'fake' cross "
"database foreign keys. However, this configuration is not officially "
"supported by Django."
msgstr ""

msgid "Behavior of contrib apps"
msgstr ""

msgid ""
"Several contrib apps include models, and some apps depend on others. Since "
"cross-database relationships are impossible, this creates some restrictions "
"on how you can split these models across databases:"
msgstr ""

msgid ""
"each one of ``contenttypes.ContentType``, ``sessions.Session`` and ``sites."
"Site`` can be stored in any database, given a suitable router."
msgstr ""

msgid ""
"``auth`` models — ``User``, ``Group`` and ``Permission`` — are linked "
"together and linked to ``ContentType``, so they must be stored in the same "
"database as ``ContentType``."
msgstr ""

msgid ""
"``admin`` depends on ``auth``, so its models must be in the same database as "
"``auth``."
msgstr ""

msgid ""
"``flatpages`` and ``redirects`` depend on ``sites``, so their models must be "
"in the same database as ``sites``."
msgstr ""

msgid ""
"In addition, some objects are automatically created just after :djadmin:"
"`migrate` creates a table to hold them in a database:"
msgstr ""

msgid "a default ``Site``,"
msgstr ""

msgid ""
"a ``ContentType`` for each model (including those not stored in that "
"database),"
msgstr ""

msgid ""
"the ``Permission``\\s for each model (including those not stored in that "
"database)."
msgstr ""

msgid ""
"For common setups with multiple databases, it isn't useful to have these "
"objects in more than one database. Common setups include primary/replica and "
"connecting to external databases. Therefore, it's recommended to write a :"
"ref:`database router<topics-db-multi-db-routing>` that allows synchronizing "
"these three models to only one database. Use the same approach for contrib "
"and third-party apps that don't need their tables in multiple databases."
msgstr ""

msgid ""
"If you're synchronizing content types to more than one database, be aware "
"that their primary keys may not match across databases. This may result in "
"data corruption or data loss."
msgstr ""

msgid "Database access optimization"
msgstr ""

msgid ""
"Django's database layer provides various ways to help developers get the "
"most out of their databases. This document gathers together links to the "
"relevant documentation, and adds various tips, organized under a number of "
"headings that outline the steps to take when attempting to optimize your "
"database usage."
msgstr ""

msgid "Profile first"
msgstr ""

msgid ""
"As general programming practice, this goes without saying. Find out :ref:"
"`what queries you are doing and what they are costing you <faq-see-raw-sql-"
"queries>`. Use :meth:`.QuerySet.explain` to understand how specific "
"``QuerySet``\\s are executed by your database. You may also want to use an "
"external project like django-debug-toolbar_, or a tool that monitors your "
"database directly."
msgstr ""

msgid ""
"Remember that you may be optimizing for speed or memory or both, depending "
"on your requirements. Sometimes optimizing for one will be detrimental to "
"the other, but sometimes they will help each other. Also, work that is done "
"by the database process might not have the same cost (to you) as the same "
"amount of work done in your Python process. It is up to you to decide what "
"your priorities are, where the balance must lie, and profile all of these as "
"required since this will depend on your application and server."
msgstr ""

msgid ""
"With everything that follows, remember to profile after every change to "
"ensure that the change is a benefit, and a big enough benefit given the "
"decrease in readability of your code. **All** of the suggestions below come "
"with the caveat that in your circumstances the general principle might not "
"apply, or might even be reversed."
msgstr ""

msgid "Use standard DB optimization techniques"
msgstr ""

msgid "...including:"
msgstr ""

msgid ""
"Indexes_. This is a number one priority, *after* you have determined from "
"profiling what indexes should be added. Use :attr:`Field.db_index <django.db."
"models.Field.db_index>` or :attr:`Meta.index_together <django.db.models."
"Options.index_together>` to add these from Django. Consider adding indexes "
"to fields that you frequently query using :meth:`~django.db.models.query."
"QuerySet.filter()`, :meth:`~django.db.models.query.QuerySet.exclude()`, :"
"meth:`~django.db.models.query.QuerySet.order_by()`, etc. as indexes may help "
"to speed up lookups. Note that determining the best indexes is a complex "
"database-dependent topic that will depend on your particular application. "
"The overhead of maintaining an index may outweigh any gains in query speed."
msgstr ""

msgid "Appropriate use of field types."
msgstr ""

msgid ""
"We will assume you have done the obvious things above. The rest of this "
"document focuses on how to use Django in such a way that you are not doing "
"unnecessary work. This document also does not address other optimization "
"techniques that apply to all expensive operations, such as :doc:`general "
"purpose caching </topics/cache>`."
msgstr ""

msgid "Understand ``QuerySet``\\s"
msgstr ""

msgid ""
"Understanding :doc:`QuerySets </ref/models/querysets>` is vital to getting "
"good performance with simple code. In particular:"
msgstr ""

msgid "Understand ``QuerySet`` evaluation"
msgstr ""

msgid "To avoid performance problems, it is important to understand:"
msgstr ""

msgid "that :ref:`QuerySets are lazy <querysets-are-lazy>`."
msgstr ""

msgid "when :ref:`they are evaluated <when-querysets-are-evaluated>`."
msgstr ""

msgid "how :ref:`the data is held in memory <caching-and-querysets>`."
msgstr ""

msgid "Understand cached attributes"
msgstr ""

msgid ""
"As well as caching of the whole ``QuerySet``, there is caching of the result "
"of attributes on ORM objects. In general, attributes that are not callable "
"will be cached. For example, assuming the :ref:`example Weblog models "
"<queryset-model-example>`::"
msgstr ""

msgid "But in general, callable attributes cause DB lookups every time::"
msgstr ""

msgid ""
"Be careful when reading template code - the template system does not allow "
"use of parentheses, but will call callables automatically, hiding the above "
"distinction."
msgstr ""

msgid ""
"Be careful with your own custom properties - it is up to you to implement "
"caching when required, for example using the :class:`~django.utils."
"functional.cached_property` decorator."
msgstr ""

msgid "Use the ``with`` template tag"
msgstr ""

msgid ""
"To make use of the caching behavior of ``QuerySet``, you may need to use "
"the :ttag:`with` template tag."
msgstr ""

msgid "Use ``iterator()``"
msgstr ""

msgid ""
"When you have a lot of objects, the caching behavior of the ``QuerySet`` can "
"cause a large amount of memory to be used. In this case, :meth:`~django.db."
"models.query.QuerySet.iterator()` may help."
msgstr ""

msgid "Use ``explain()``"
msgstr ""

msgid ""
":meth:`.QuerySet.explain` gives you detailed information about how the "
"database executes a query, including indexes and joins that are used. These "
"details may help you find queries that could be rewritten more efficiently, "
"or identify indexes that could be added to improve performance."
msgstr ""

msgid "Do database work in the database rather than in Python"
msgstr ""

msgid "For instance:"
msgstr ""

msgid ""
"At the most basic level, use :ref:`filter and exclude <queryset-api>` to do "
"filtering in the database."
msgstr ""

msgid ""
"Use :class:`F expressions <django.db.models.F>` to filter based on other "
"fields within the same model."
msgstr ""

msgid ""
"Use :doc:`annotate to do aggregation in the database </topics/db/"
"aggregation>`."
msgstr ""

msgid "If these aren't enough to generate the SQL you need:"
msgstr ""

msgid "Use ``RawSQL``"
msgstr ""

msgid ""
"A less portable but more powerful method is the :class:`~django.db.models."
"expressions.RawSQL` expression, which allows some SQL to be explicitly added "
"to the query. If that still isn't powerful enough:"
msgstr ""

msgid "Use raw SQL"
msgstr ""

msgid ""
"Write your own :doc:`custom SQL to retrieve data or populate models </topics/"
"db/sql>`. Use ``django.db.connection.queries`` to find out what Django is "
"writing for you and start from there."
msgstr ""

msgid "Retrieve individual objects using a unique, indexed column"
msgstr ""

msgid ""
"There are two reasons to use a column with :attr:`~django.db.models.Field."
"unique` or :attr:`~django.db.models.Field.db_index` when using :meth:"
"`~django.db.models.query.QuerySet.get` to retrieve individual objects. "
"First, the query will be quicker because of the underlying database index. "
"Also, the query could run much slower if multiple objects match the lookup; "
"having a unique constraint on the column guarantees this will never happen."
msgstr ""

msgid "So using the :ref:`example Weblog models <queryset-model-example>`::"
msgstr ""

msgid "will be quicker than:"
msgstr ""

msgid ""
"because ``id`` is indexed by the database and is guaranteed to be unique."
msgstr ""

msgid "Doing the following is potentially quite slow:"
msgstr ""

msgid ""
"First of all, ``headline`` is not indexed, which will make the underlying "
"database fetch slower."
msgstr ""

msgid ""
"Second, the lookup doesn't guarantee that only one object will be returned. "
"If the query matches more than one object, it will retrieve and transfer all "
"of them from the database. This penalty could be substantial if hundreds or "
"thousands of records are returned. The penalty will be compounded if the "
"database lives on a separate server, where network overhead and latency also "
"play a factor."
msgstr ""

msgid "Retrieve everything at once if you know you will need it"
msgstr ""

msgid ""
"Hitting the database multiple times for different parts of a single 'set' of "
"data that you will need all parts of is, in general, less efficient than "
"retrieving it all in one query. This is particularly important if you have a "
"query that is executed in a loop, and could therefore end up doing many "
"database queries, when only one was needed. So:"
msgstr ""

msgid "Use ``QuerySet.select_related()`` and ``prefetch_related()``"
msgstr ""

msgid ""
"Understand :meth:`~django.db.models.query.QuerySet.select_related` and :meth:"
"`~django.db.models.query.QuerySet.prefetch_related` thoroughly, and use them:"
msgstr ""

msgid ""
"in :doc:`managers and default managers </topics/db/managers>` where "
"appropriate. Be aware when your manager is and is not used; sometimes this "
"is tricky so don't make assumptions."
msgstr ""

msgid ""
"in view code or other layers, possibly making use of :func:`~django.db."
"models.prefetch_related_objects` where needed."
msgstr ""

msgid "Don't retrieve things you don't need"
msgstr ""

msgid "Use ``QuerySet.values()`` and ``values_list()``"
msgstr ""

msgid ""
"When you just want a ``dict`` or ``list`` of values, and don't need ORM "
"model objects, make appropriate usage of :meth:`~django.db.models.query."
"QuerySet.values()`. These can be useful for replacing model objects in "
"template code - as long as the dicts you supply have the same attributes as "
"those used in the template, you are fine."
msgstr ""

msgid "Use ``QuerySet.defer()`` and ``only()``"
msgstr "使用 ``QuerySet.defer()`` 和 ``only()``"

msgid ""
"Use :meth:`~django.db.models.query.QuerySet.defer()` and :meth:`~django.db."
"models.query.QuerySet.only()` if there are database columns you know that "
"you won't need (or won't need in most cases) to avoid loading them. Note "
"that if you *do* use them, the ORM will have to go and get them in a "
"separate query, making this a pessimization if you use it inappropriately."
msgstr ""

msgid ""
"Also, be aware that there is some (small extra) overhead incurred inside "
"Django when constructing a model with deferred fields. Don't be too "
"aggressive in deferring fields without profiling as the database has to read "
"most of the non-text, non-VARCHAR data from the disk for a single row in the "
"results, even if it ends up only using a few columns. The ``defer()`` and "
"``only()`` methods are most useful when you can avoid loading a lot of text "
"data or for fields that might take a lot of processing to convert back to "
"Python. As always, profile first, then optimize."
msgstr ""

msgid "Use ``QuerySet.count()``"
msgstr "使用 ``QuerySet.exists()``"

msgid "...if you only want the count, rather than doing ``len(queryset)``."
msgstr ""

msgid "Use ``QuerySet.exists()``"
msgstr "使用 ``QuerySet.exists()``"

msgid ""
"...if you only want to find out if at least one result exists, rather than "
"``if queryset``."
msgstr ""

msgid "But:"
msgstr "但是："

msgid "Don't overuse ``count()`` and ``exists()``"
msgstr "请不要过度使用 ``count()`` 和 ``exists()``"

msgid ""
"If you are going to need other data from the QuerySet, just evaluate it."
msgstr ""

msgid ""
"For example, assuming an Email model that has a ``body`` attribute and a "
"many-to-many relation to User, the following template code is optimal:"
msgstr ""

msgid "It is optimal because:"
msgstr ""

msgid ""
"Since QuerySets are lazy, this does no database queries if 'display_inbox' "
"is False."
msgstr ""

msgid ""
"Use of :ttag:`with` means that we store ``user.emails.all`` in a variable "
"for later use, allowing its cache to be re-used."
msgstr ""

msgid ""
"The line ``{% if emails %}`` causes ``QuerySet.__bool__()`` to be called, "
"which causes the ``user.emails.all()`` query to be run on the database, and "
"at the least the first line to be turned into an ORM object. If there aren't "
"any results, it will return False, otherwise True."
msgstr ""

msgid ""
"The use of ``{{ emails|length }}`` calls ``QuerySet.__len__()``, filling out "
"the rest of the cache without doing another query."
msgstr ""

msgid "The :ttag:`for` loop iterates over the already filled cache."
msgstr ""

msgid ""
"In total, this code does either one or zero database queries. The only "
"deliberate optimization performed is the use of the :ttag:`with` tag. Using "
"``QuerySet.exists()`` or ``QuerySet.count()`` at any point would cause "
"additional queries."
msgstr ""

msgid "Use ``QuerySet.update()`` and ``delete()``"
msgstr ""

msgid ""
"Rather than retrieve a load of objects, set some values, and save them "
"individual, use a bulk SQL UPDATE statement, via :ref:`QuerySet.update() "
"<topics-db-queries-update>`. Similarly, do :ref:`bulk deletes <topics-db-"
"queries-delete>` where possible."
msgstr ""

msgid ""
"Note, however, that these bulk update methods cannot call the ``save()`` or "
"``delete()`` methods of individual instances, which means that any custom "
"behavior you have added for these methods will not be executed, including "
"anything driven from the normal database object :doc:`signals </ref/"
"signals>`."
msgstr ""

msgid "Use foreign key values directly"
msgstr ""

msgid ""
"If you only need a foreign key value, use the foreign key value that is "
"already on the object you've got, rather than getting the whole related "
"object and taking its primary key. i.e. do::"
msgstr ""

msgid "instead of::"
msgstr "替换成："

msgid "Don't order results if you don't care"
msgstr ""

msgid ""
"Ordering is not free; each field to order by is an operation the database "
"must perform. If a model has a default ordering (:attr:`Meta.ordering "
"<django.db.models.Options.ordering>`) and you don't need it, remove it on a "
"``QuerySet`` by calling :meth:`~django.db.models.query.QuerySet.order_by()` "
"with no parameters."
msgstr ""

msgid ""
"Adding an index to your database may help to improve ordering performance."
msgstr ""

msgid "Insert in bulk"
msgstr ""

msgid ""
"When creating objects, where possible, use the :meth:`~django.db.models."
"query.QuerySet.bulk_create()` method to reduce the number of SQL queries. "
"For example::"
msgstr ""

msgid "...is preferable to::"
msgstr ""

msgid ""
"Note that there are a number of :meth:`caveats to this method <django.db."
"models.query.QuerySet.bulk_create>`, so make sure it's appropriate for your "
"use case."
msgstr ""

msgid ""
"This also applies to :class:`ManyToManyFields <django.db.models."
"ManyToManyField>`, so doing::"
msgstr ""

msgid "...where ``Bands`` and ``Artists`` have a many-to-many relationship."
msgstr ""

msgid "Making queries"
msgstr "进行查询"

msgid ""
"Once you've created your :doc:`data models </topics/db/models>`, Django "
"automatically gives you a database-abstraction API that lets you create, "
"retrieve, update and delete objects. This document explains how to use this "
"API. Refer to the :doc:`data model reference </ref/models/index>` for full "
"details of all the various model lookup options."
msgstr ""

msgid ""
"Throughout this guide (and in the reference), we'll refer to the following "
"models, which comprise a Weblog application:"
msgstr ""

msgid "Creating objects"
msgstr ""

msgid ""
"To represent database-table data in Python objects, Django uses an intuitive "
"system: A model class represents a database table, and an instance of that "
"class represents a particular record in the database table."
msgstr ""

msgid ""
"To create an object, instantiate it using keyword arguments to the model "
"class, then call :meth:`~django.db.models.Model.save` to save it to the "
"database."
msgstr ""

msgid ""
"Assuming models live in a file ``mysite/blog/models.py``, here's an example::"
msgstr ""

msgid ""
"This performs an ``INSERT`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

msgid "The :meth:`~django.db.models.Model.save` method has no return value."
msgstr ""

msgid ""
":meth:`~django.db.models.Model.save` takes a number of advanced options not "
"described here. See the documentation for :meth:`~django.db.models.Model."
"save` for complete details."
msgstr ""

msgid ""
"To create and save an object in a single step, use the :meth:`~django.db."
"models.query.QuerySet.create()` method."
msgstr ""

msgid "Saving changes to objects"
msgstr ""

msgid ""
"To save changes to an object that's already in the database, use :meth:"
"`~django.db.models.Model.save`."
msgstr ""

msgid ""
"Given a ``Blog`` instance ``b5`` that has already been saved to the "
"database, this example changes its name and updates its record in the "
"database::"
msgstr ""

msgid ""
"This performs an ``UPDATE`` SQL statement behind the scenes. Django doesn't "
"hit the database until you explicitly call :meth:`~django.db.models.Model."
"save`."
msgstr ""

msgid "Saving ``ForeignKey`` and ``ManyToManyField`` fields"
msgstr ""

msgid ""
"Updating a :class:`~django.db.models.ForeignKey` field works exactly the "
"same way as saving a normal field -- simply assign an object of the right "
"type to the field in question. This example updates the ``blog`` attribute "
"of an ``Entry`` instance ``entry``, assuming appropriate instances of "
"``Entry`` and ``Blog`` are already saved to the database (so we can retrieve "
"them below)::"
msgstr ""

msgid ""
"Updating a :class:`~django.db.models.ManyToManyField` works a little "
"differently -- use the :meth:`~django.db.models.fields.related."
"RelatedManager.add` method on the field to add a record to the relation. "
"This example adds the ``Author`` instance ``joe`` to the ``entry`` object::"
msgstr ""

msgid ""
"To add multiple records to a :class:`~django.db.models.ManyToManyField` in "
"one go, include multiple arguments in the call to :meth:`~django.db.models."
"fields.related.RelatedManager.add`, like this::"
msgstr ""

msgid ""
"Django will complain if you try to assign or add an object of the wrong type."
msgstr ""

msgid "Retrieving objects"
msgstr ""

msgid ""
"To retrieve objects from your database, construct a :class:`~django.db."
"models.query.QuerySet` via a :class:`~django.db.models.Manager` on your "
"model class."
msgstr ""

msgid ""
"A :class:`~django.db.models.query.QuerySet` represents a collection of "
"objects from your database. It can have zero, one or many *filters*. Filters "
"narrow down the query results based on the given parameters. In SQL terms, "
"a :class:`~django.db.models.query.QuerySet` equates to a ``SELECT`` "
"statement, and a filter is a limiting clause such as ``WHERE`` or ``LIMIT``."
msgstr ""

msgid ""
"You get a :class:`~django.db.models.query.QuerySet` by using your model's :"
"class:`~django.db.models.Manager`. Each model has at least one :class:"
"`~django.db.models.Manager`, and it's called :attr:`~django.db.models.Model."
"objects` by default. Access it directly via the model class, like so::"
msgstr ""

msgid ""
"``Managers`` are accessible only via model classes, rather than from model "
"instances, to enforce a separation between \"table-level\" operations and "
"\"record-level\" operations."
msgstr ""

msgid ""
"The :class:`~django.db.models.Manager` is the main source of ``QuerySets`` "
"for a model. For example, ``Blog.objects.all()`` returns a :class:`~django."
"db.models.query.QuerySet` that contains all ``Blog`` objects in the database."
msgstr ""

msgid "Retrieving all objects"
msgstr ""

msgid ""
"The simplest way to retrieve objects from a table is to get all of them. To "
"do this, use the :meth:`~django.db.models.query.QuerySet.all` method on a :"
"class:`~django.db.models.Manager`::"
msgstr ""

msgid ""
"The :meth:`~django.db.models.query.QuerySet.all` method returns a :class:"
"`~django.db.models.query.QuerySet` of all the objects in the database."
msgstr ""

msgid "Retrieving specific objects with filters"
msgstr ""

msgid ""
"The :class:`~django.db.models.query.QuerySet` returned by :meth:`~django.db."
"models.query.QuerySet.all` describes all objects in the database table. "
"Usually, though, you'll need to select only a subset of the complete set of "
"objects."
msgstr ""

msgid ""
"To create such a subset, you refine the initial :class:`~django.db.models."
"query.QuerySet`, adding filter conditions. The two most common ways to "
"refine a :class:`~django.db.models.query.QuerySet` are:"
msgstr ""

msgid "``filter(**kwargs)``"
msgstr ""

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that match the given lookup parameters."
msgstr ""

msgid "``exclude(**kwargs)``"
msgstr ""

msgid ""
"Returns a new :class:`~django.db.models.query.QuerySet` containing objects "
"that do *not* match the given lookup parameters."
msgstr ""

msgid ""
"The lookup parameters (``**kwargs`` in the above function definitions) "
"should be in the format described in `Field lookups`_ below."
msgstr ""

msgid ""
"For example, to get a :class:`~django.db.models.query.QuerySet` of blog "
"entries from the year 2006, use :meth:`~django.db.models.query.QuerySet."
"filter` like so::"
msgstr ""

msgid "With the default manager class, it is the same as::"
msgstr ""

msgid "Chaining filters"
msgstr ""

msgid ""
"The result of refining a :class:`~django.db.models.query.QuerySet` is itself "
"a :class:`~django.db.models.query.QuerySet`, so it's possible to chain "
"refinements together. For example::"
msgstr ""

msgid ""
"This takes the initial :class:`~django.db.models.query.QuerySet` of all "
"entries in the database, adds a filter, then an exclusion, then another "
"filter. The final result is a :class:`~django.db.models.query.QuerySet` "
"containing all entries with a headline that starts with \"What\", that were "
"published between January 30, 2005, and the current day."
msgstr ""

msgid "Filtered ``QuerySet``\\s are unique"
msgstr ""

msgid ""
"Each time you refine a :class:`~django.db.models.query.QuerySet`, you get a "
"brand-new :class:`~django.db.models.query.QuerySet` that is in no way bound "
"to the previous :class:`~django.db.models.query.QuerySet`. Each refinement "
"creates a separate and distinct :class:`~django.db.models.query.QuerySet` "
"that can be stored, used and reused."
msgstr ""

msgid ""
"These three ``QuerySets`` are separate. The first is a base :class:`~django."
"db.models.query.QuerySet` containing all entries that contain a headline "
"starting with \"What\". The second is a subset of the first, with an "
"additional criteria that excludes records whose ``pub_date`` is today or in "
"the future. The third is a subset of the first, with an additional criteria "
"that selects only the records whose ``pub_date`` is today or in the future. "
"The initial :class:`~django.db.models.query.QuerySet` (``q1``) is unaffected "
"by the refinement process."
msgstr ""

msgid "``QuerySet``\\s are lazy"
msgstr ""

msgid ""
"``QuerySets`` are lazy -- the act of creating a :class:`~django.db.models."
"query.QuerySet` doesn't involve any database activity. You can stack filters "
"together all day long, and Django won't actually run the query until the :"
"class:`~django.db.models.query.QuerySet` is *evaluated*. Take a look at this "
"example::"
msgstr ""

msgid ""
"Though this looks like three database hits, in fact it hits the database "
"only once, at the last line (``print(q)``). In general, the results of a :"
"class:`~django.db.models.query.QuerySet` aren't fetched from the database "
"until you \"ask\" for them. When you do, the :class:`~django.db.models.query."
"QuerySet` is *evaluated* by accessing the database. For more details on "
"exactly when evaluation takes place, see :ref:`when-querysets-are-evaluated`."
msgstr ""

msgid "Retrieving a single object with ``get()``"
msgstr ""

msgid ""
":meth:`~django.db.models.query.QuerySet.filter` will always give you a :"
"class:`~django.db.models.query.QuerySet`, even if only a single object "
"matches the query - in this case, it will be a :class:`~django.db.models."
"query.QuerySet` containing a single element."
msgstr ""

msgid ""
"If you know there is only one object that matches your query, you can use "
"the :meth:`~django.db.models.query.QuerySet.get` method on a :class:`~django."
"db.models.Manager` which returns the object directly::"
msgstr ""

msgid ""
"You can use any query expression with :meth:`~django.db.models.query."
"QuerySet.get`, just like with :meth:`~django.db.models.query.QuerySet."
"filter` - again, see `Field lookups`_ below."
msgstr ""

msgid ""
"Note that there is a difference between using :meth:`~django.db.models.query."
"QuerySet.get`, and using :meth:`~django.db.models.query.QuerySet.filter` "
"with a slice of ``[0]``. If there are no results that match the query, :meth:"
"`~django.db.models.query.QuerySet.get` will raise a ``DoesNotExist`` "
"exception. This exception is an attribute of the model class that the query "
"is being performed on - so in the code above, if there is no ``Entry`` "
"object with a primary key of 1, Django will raise ``Entry.DoesNotExist``."
msgstr ""

msgid ""
"Similarly, Django will complain if more than one item matches the :meth:"
"`~django.db.models.query.QuerySet.get` query. In this case, it will raise :"
"exc:`~django.core.exceptions.MultipleObjectsReturned`, which again is an "
"attribute of the model class itself."
msgstr ""

msgid "Other ``QuerySet`` methods"
msgstr ""

msgid ""
"Most of the time you'll use :meth:`~django.db.models.query.QuerySet.all`, :"
"meth:`~django.db.models.query.QuerySet.get`, :meth:`~django.db.models.query."
"QuerySet.filter` and :meth:`~django.db.models.query.QuerySet.exclude` when "
"you need to look up objects from the database. However, that's far from all "
"there is; see the :ref:`QuerySet API Reference <queryset-api>` for a "
"complete list of all the various :class:`~django.db.models.query.QuerySet` "
"methods."
msgstr ""

msgid "Limiting ``QuerySet``\\s"
msgstr ""

msgid ""
"Use a subset of Python's array-slicing syntax to limit your :class:`~django."
"db.models.query.QuerySet` to a certain number of results. This is the "
"equivalent of SQL's ``LIMIT`` and ``OFFSET`` clauses."
msgstr ""

msgid "For example, this returns the first 5 objects (``LIMIT 5``)::"
msgstr ""

msgid "This returns the sixth through tenth objects (``OFFSET 5 LIMIT 5``)::"
msgstr ""

msgid "Negative indexing (i.e. ``Entry.objects.all()[-1]``) is not supported."
msgstr ""

msgid ""
"Generally, slicing a :class:`~django.db.models.query.QuerySet` returns a "
"new :class:`~django.db.models.query.QuerySet` -- it doesn't evaluate the "
"query. An exception is if you use the \"step\" parameter of Python slice "
"syntax. For example, this would actually execute the query in order to "
"return a list of every *second* object of the first 10::"
msgstr ""

msgid ""
"Further filtering or ordering of a sliced queryset is prohibited due to the "
"ambiguous nature of how that might work."
msgstr ""

msgid ""
"To retrieve a *single* object rather than a list (e.g. ``SELECT foo FROM bar "
"LIMIT 1``), use a simple index instead of a slice. For example, this returns "
"the first ``Entry`` in the database, after ordering entries alphabetically "
"by headline::"
msgstr ""

msgid "This is roughly equivalent to::"
msgstr ""

msgid ""
"Note, however, that the first of these will raise ``IndexError`` while the "
"second will raise ``DoesNotExist`` if no objects match the given criteria. "
"See :meth:`~django.db.models.query.QuerySet.get` for more details."
msgstr ""

msgid "Field lookups"
msgstr ""

msgid ""
"Field lookups are how you specify the meat of an SQL ``WHERE`` clause. "
"They're specified as keyword arguments to the :class:`~django.db.models."
"query.QuerySet` methods :meth:`~django.db.models.query.QuerySet.filter`, :"
"meth:`~django.db.models.query.QuerySet.exclude` and :meth:`~django.db.models."
"query.QuerySet.get`."
msgstr ""

msgid ""
"Basic lookups keyword arguments take the form ``field__lookuptype=value``. "
"(That's a double-underscore). For example::"
msgstr ""

msgid "translates (roughly) into the following SQL:"
msgstr ""

msgid "How this is possible"
msgstr ""

msgid ""
"Python has the ability to define functions that accept arbitrary name-value "
"arguments whose names and values are evaluated at runtime. For more "
"information, see :ref:`tut-keywordargs` in the official Python tutorial."
msgstr ""

msgid ""
"The field specified in a lookup has to be the name of a model field. There's "
"one exception though, in case of a :class:`~django.db.models.ForeignKey` you "
"can specify the field name suffixed with ``_id``. In this case, the value "
"parameter is expected to contain the raw value of the foreign model's "
"primary key. For example:"
msgstr ""

msgid ""
"If you pass an invalid keyword argument, a lookup function will raise "
"``TypeError``."
msgstr ""

msgid ""
"The database API supports about two dozen lookup types; a complete reference "
"can be found in the :ref:`field lookup reference <field-lookups>`. To give "
"you a taste of what's available, here's some of the more common lookups "
"you'll probably use:"
msgstr ""

msgid ":lookup:`exact`"
msgstr ""

msgid "An \"exact\" match. For example::"
msgstr ""

msgid "Would generate SQL along these lines:"
msgstr ""

msgid ""
"If you don't provide a lookup type -- that is, if your keyword argument "
"doesn't contain a double underscore -- the lookup type is assumed to be "
"``exact``."
msgstr ""

msgid "For example, the following two statements are equivalent::"
msgstr ""

msgid "This is for convenience, because ``exact`` lookups are the common case."
msgstr ""

msgid ":lookup:`iexact`"
msgstr ""

msgid "A case-insensitive match. So, the query::"
msgstr ""

msgid ""
"Would match a ``Blog`` titled ``\"Beatles Blog\"``, ``\"beatles blog\"``, or "
"even ``\"BeAtlES blOG\"``."
msgstr ""

msgid ":lookup:`contains`"
msgstr ""

msgid "Case-sensitive containment test. For example::"
msgstr ""

msgid "Roughly translates to this SQL:"
msgstr ""

msgid ""
"Note this will match the headline ``'Today Lennon honored'`` but not "
"``'today lennon honored'``."
msgstr ""

msgid "There's also a case-insensitive version, :lookup:`icontains`."
msgstr ""

msgid ":lookup:`startswith`, :lookup:`endswith`"
msgstr ""

msgid ""
"Starts-with and ends-with search, respectively. There are also case-"
"insensitive versions called :lookup:`istartswith` and :lookup:`iendswith`."
msgstr ""

msgid ""
"Again, this only scratches the surface. A complete reference can be found in "
"the :ref:`field lookup reference <field-lookups>`."
msgstr ""

msgid "Lookups that span relationships"
msgstr ""

msgid ""
"Django offers a powerful and intuitive way to \"follow\" relationships in "
"lookups, taking care of the SQL ``JOIN``\\s for you automatically, behind "
"the scenes. To span a relationship, just use the field name of related "
"fields across models, separated by double underscores, until you get to the "
"field you want."
msgstr ""

msgid ""
"This example retrieves all ``Entry`` objects with a ``Blog`` whose ``name`` "
"is ``'Beatles Blog'``::"
msgstr ""

msgid "This spanning can be as deep as you'd like."
msgstr ""

msgid ""
"It works backwards, too. To refer to a \"reverse\" relationship, just use "
"the lowercase name of the model."
msgstr ""

msgid ""
"This example retrieves all ``Blog`` objects which have at least one "
"``Entry`` whose ``headline`` contains ``'Lennon'``::"
msgstr ""

msgid ""
"If you are filtering across multiple relationships and one of the "
"intermediate models doesn't have a value that meets the filter condition, "
"Django will treat it as if there is an empty (all values are ``NULL``), but "
"valid, object there. All this means is that no error will be raised. For "
"example, in this filter::"
msgstr ""

msgid ""
"(if there was a related ``Author`` model), if there was no ``author`` "
"associated with an entry, it would be treated as if there was also no "
"``name`` attached, rather than raising an error because of the missing "
"``author``. Usually this is exactly what you want to have happen. The only "
"case where it might be confusing is if you are using :lookup:`isnull`. Thus::"
msgstr ""

msgid ""
"will return ``Blog`` objects that have an empty ``name`` on the ``author`` "
"and also those which have an empty ``author`` on the ``entry``. If you don't "
"want those latter objects, you could write::"
msgstr ""

msgid "Spanning multi-valued relationships"
msgstr ""

msgid ""
"When you are filtering an object based on a :class:`~django.db.models."
"ManyToManyField` or a reverse :class:`~django.db.models.ForeignKey`, there "
"are two different sorts of filter you may be interested in. Consider the "
"``Blog``/``Entry`` relationship (``Blog`` to ``Entry`` is a one-to-many "
"relation). We might be interested in finding blogs that have an entry which "
"has both *\"Lennon\"* in the headline and was published in 2008. Or we might "
"want to find blogs that have an entry with *\"Lennon\"* in the headline as "
"well as an entry that was published in 2008. Since there are multiple "
"entries associated with a single ``Blog``, both of these queries are "
"possible and make sense in some situations."
msgstr ""

msgid ""
"The same type of situation arises with a :class:`~django.db.models."
"ManyToManyField`. For example, if an ``Entry`` has a :class:`~django.db."
"models.ManyToManyField` called ``tags``, we might want to find entries "
"linked to tags called *\"music\"* and *\"bands\"* or we might want an entry "
"that contains a tag with a name of *\"music\"* and a status of *\"public\"*."
msgstr ""

msgid ""
"To handle both of these situations, Django has a consistent way of "
"processing :meth:`~django.db.models.query.QuerySet.filter` calls. Everything "
"inside a single :meth:`~django.db.models.query.QuerySet.filter` call is "
"applied simultaneously to filter out items matching all those requirements. "
"Successive :meth:`~django.db.models.query.QuerySet.filter` calls further "
"restrict the set of objects, but for multi-valued relations, they apply to "
"any object linked to the primary model, not necessarily those objects that "
"were selected by an earlier :meth:`~django.db.models.query.QuerySet.filter` "
"call."
msgstr ""

msgid ""
"That may sound a bit confusing, so hopefully an example will clarify. To "
"select all blogs that contain entries with both *\"Lennon\"* in the headline "
"and that were published in 2008 (the same entry satisfying both conditions), "
"we would write::"
msgstr ""

msgid ""
"To select all blogs that contain an entry with *\"Lennon\"* in the headline "
"**as well as** an entry that was published in 2008, we would write::"
msgstr ""

msgid ""
"Suppose there is only one blog that had both entries containing *\"Lennon\"* "
"and entries from 2008, but that none of the entries from 2008 contained *"
"\"Lennon\"*. The first query would not return any blogs, but the second "
"query would return that one blog."
msgstr ""

msgid ""
"In the second example, the first filter restricts the queryset to all those "
"blogs linked to entries with *\"Lennon\"* in the headline. The second filter "
"restricts the set of blogs *further* to those that are also linked to "
"entries that were published in 2008. The entries selected by the second "
"filter may or may not be the same as the entries in the first filter. We are "
"filtering the ``Blog`` items with each filter statement, not the ``Entry`` "
"items."
msgstr ""

msgid ""
"The behavior of :meth:`~django.db.models.query.QuerySet.filter` for queries "
"that span multi-value relationships, as described above, is not implemented "
"equivalently for :meth:`~django.db.models.query.QuerySet.exclude`. Instead, "
"the conditions in a single :meth:`~django.db.models.query.QuerySet.exclude` "
"call will not necessarily refer to the same item."
msgstr ""

msgid ""
"For example, the following query would exclude blogs that contain *both* "
"entries with *\"Lennon\"* in the headline *and* entries published in 2008::"
msgstr ""

msgid ""
"However, unlike the behavior when using :meth:`~django.db.models.query."
"QuerySet.filter`, this will not limit blogs based on entries that satisfy "
"both conditions. In order to do that, i.e. to select all blogs that do not "
"contain entries published with *\"Lennon\"* that were published in 2008, you "
"need to make two queries::"
msgstr ""

msgid "Filters can reference fields on the model"
msgstr ""

msgid ""
"In the examples given so far, we have constructed filters that compare the "
"value of a model field with a constant. But what if you want to compare the "
"value of a model field with another field on the same model?"
msgstr ""

msgid ""
"Django provides :class:`F expressions <django.db.models.F>` to allow such "
"comparisons. Instances of ``F()`` act as a reference to a model field within "
"a query. These references can then be used in query filters to compare the "
"values of two different fields on the same model instance."
msgstr ""

msgid ""
"For example, to find a list of all blog entries that have had more comments "
"than pingbacks, we construct an ``F()`` object to reference the pingback "
"count, and use that ``F()`` object in the query::"
msgstr ""

msgid ""
"Django supports the use of addition, subtraction, multiplication, division, "
"modulo, and power arithmetic with ``F()`` objects, both with constants and "
"with other ``F()`` objects. To find all the blog entries with more than "
"*twice* as many comments as pingbacks, we modify the query::"
msgstr ""

msgid ""
"To find all the entries where the rating of the entry is less than the sum "
"of the pingback count and comment count, we would issue the query::"
msgstr ""

msgid ""
"You can also use the double underscore notation to span relationships in an "
"``F()`` object. An ``F()`` object with a double underscore will introduce "
"any joins needed to access the related object. For example, to retrieve all "
"the entries where the author's name is the same as the blog name, we could "
"issue the query::"
msgstr ""

msgid ""
"For date and date/time fields, you can add or subtract a :class:`~datetime."
"timedelta` object. The following would return all entries that were modified "
"more than 3 days after they were published::"
msgstr ""

msgid ""
"The ``F()`` objects support bitwise operations by ``.bitand()``, ``."
"bitor()``, ``.bitrightshift()``, and ``.bitleftshift()``. For example::"
msgstr ""

msgid "The ``pk`` lookup shortcut"
msgstr ""

msgid ""
"For convenience, Django provides a ``pk`` lookup shortcut, which stands for "
"\"primary key\"."
msgstr ""

msgid ""
"In the example ``Blog`` model, the primary key is the ``id`` field, so these "
"three statements are equivalent::"
msgstr ""

msgid ""
"The use of ``pk`` isn't limited to ``__exact`` queries -- any query term can "
"be combined with ``pk`` to perform a query on the primary key of a model::"
msgstr ""

msgid ""
"``pk`` lookups also work across joins. For example, these three statements "
"are equivalent::"
msgstr ""

msgid "Escaping percent signs and underscores in ``LIKE`` statements"
msgstr ""

msgid ""
"The field lookups that equate to ``LIKE`` SQL statements (``iexact``, "
"``contains``, ``icontains``, ``startswith``, ``istartswith``, ``endswith`` "
"and ``iendswith``) will automatically escape the two special characters used "
"in ``LIKE`` statements -- the percent sign and the underscore. (In a "
"``LIKE`` statement, the percent sign signifies a multiple-character wildcard "
"and the underscore signifies a single-character wildcard.)"
msgstr ""

msgid ""
"This means things should work intuitively, so the abstraction doesn't leak. "
"For example, to retrieve all the entries that contain a percent sign, just "
"use the percent sign as any other character::"
msgstr ""

msgid ""
"Django takes care of the quoting for you; the resulting SQL will look "
"something like this:"
msgstr ""

msgid ""
"Same goes for underscores. Both percentage signs and underscores are handled "
"for you transparently."
msgstr ""

msgid "Caching and ``QuerySet``\\s"
msgstr ""

msgid ""
"Each :class:`~django.db.models.query.QuerySet` contains a cache to minimize "
"database access. Understanding how it works will allow you to write the most "
"efficient code."
msgstr ""

msgid ""
"In a newly created :class:`~django.db.models.query.QuerySet`, the cache is "
"empty. The first time a :class:`~django.db.models.query.QuerySet` is "
"evaluated -- and, hence, a database query happens -- Django saves the query "
"results in the :class:`~django.db.models.query.QuerySet`’s cache and returns "
"the results that have been explicitly requested (e.g., the next element, if "
"the :class:`~django.db.models.query.QuerySet` is being iterated over). "
"Subsequent evaluations of the :class:`~django.db.models.query.QuerySet` "
"reuse the cached results."
msgstr ""

msgid ""
"Keep this caching behavior in mind, because it may bite you if you don't use "
"your :class:`~django.db.models.query.QuerySet`\\s correctly. For example, "
"the following will create two :class:`~django.db.models.query.QuerySet`\\s, "
"evaluate them, and throw them away::"
msgstr ""

msgid ""
"That means the same database query will be executed twice, effectively "
"doubling your database load. Also, there's a possibility the two lists may "
"not include the same database records, because an ``Entry`` may have been "
"added or deleted in the split second between the two requests."
msgstr ""

msgid ""
"To avoid this problem, simply save the :class:`~django.db.models.query."
"QuerySet` and reuse it::"
msgstr ""

msgid "When ``QuerySet``\\s are not cached"
msgstr ""

msgid ""
"Querysets do not always cache their results.  When evaluating only *part* of "
"the queryset, the cache is checked, but if it is not populated then the "
"items returned by the subsequent query are not cached. Specifically, this "
"means that :ref:`limiting the queryset <limiting-querysets>` using an array "
"slice or an index will not populate the cache."
msgstr ""

msgid ""
"For example, repeatedly getting a certain index in a queryset object will "
"query the database each time::"
msgstr ""

msgid ""
"However, if the entire queryset has already been evaluated, the cache will "
"be checked instead::"
msgstr ""

msgid ""
"Here are some examples of other actions that will result in the entire "
"queryset being evaluated and therefore populate the cache::"
msgstr ""

msgid ""
"Simply printing the queryset will not populate the cache. This is because "
"the call to ``__repr__()`` only returns a slice of the entire queryset."
msgstr ""

msgid "Complex lookups with ``Q`` objects"
msgstr ""

msgid ""
"Keyword argument queries -- in :meth:`~django.db.models.query.QuerySet."
"filter`, etc. -- are \"AND\"ed together. If you need to execute more complex "
"queries (for example, queries with ``OR`` statements), you can use :class:`Q "
"objects <django.db.models.Q>`."
msgstr ""

msgid ""
"A :class:`Q object <django.db.models.Q>` (``django.db.models.Q``) is an "
"object used to encapsulate a collection of keyword arguments. These keyword "
"arguments are specified as in \"Field lookups\" above."
msgstr ""

msgid "For example, this ``Q`` object encapsulates a single ``LIKE`` query::"
msgstr ""

msgid ""
"``Q`` objects can be combined using the ``&`` and ``|`` operators. When an "
"operator is used on two ``Q`` objects, it yields a new ``Q`` object."
msgstr ""

msgid ""
"For example, this statement yields a single ``Q`` object that represents the "
"\"OR\" of two ``\"question__startswith\"`` queries::"
msgstr ""

msgid "This is equivalent to the following SQL ``WHERE`` clause::"
msgstr ""

msgid ""
"You can compose statements of arbitrary complexity by combining ``Q`` "
"objects with the ``&`` and ``|`` operators and use parenthetical grouping. "
"Also, ``Q`` objects can be negated using the ``~`` operator, allowing for "
"combined lookups that combine both a normal query and a negated (``NOT``) "
"query::"
msgstr ""

msgid ""
"Each lookup function that takes keyword-arguments (e.g. :meth:`~django.db."
"models.query.QuerySet.filter`, :meth:`~django.db.models.query.QuerySet."
"exclude`, :meth:`~django.db.models.query.QuerySet.get`) can also be passed "
"one or more ``Q`` objects as positional (not-named) arguments. If you "
"provide multiple ``Q`` object arguments to a lookup function, the arguments "
"will be \"AND\"ed together. For example::"
msgstr ""

msgid "... roughly translates into the SQL::"
msgstr ""

msgid ""
"Lookup functions can mix the use of ``Q`` objects and keyword arguments. All "
"arguments provided to a lookup function (be they keyword arguments or ``Q`` "
"objects) are \"AND\"ed together. However, if a ``Q`` object is provided, it "
"must precede the definition of any keyword arguments. For example::"
msgstr ""

msgid "... would be a valid query, equivalent to the previous example; but::"
msgstr ""

msgid "... would not be valid."
msgstr ""

msgid ""
"The `OR lookups examples`_ in the Django unit tests show some possible uses "
"of ``Q``."
msgstr ""

msgid "Comparing objects"
msgstr ""

msgid ""
"To compare two model instances, just use the standard Python comparison "
"operator, the double equals sign: ``==``. Behind the scenes, that compares "
"the primary key values of two models."
msgstr ""

msgid ""
"Using the ``Entry`` example above, the following two statements are "
"equivalent::"
msgstr ""

msgid ""
"If a model's primary key isn't called ``id``, no problem. Comparisons will "
"always use the primary key, whatever it's called. For example, if a model's "
"primary key field is called ``name``, these two statements are equivalent::"
msgstr ""

msgid "Deleting objects"
msgstr ""

msgid ""
"The delete method, conveniently, is named :meth:`~django.db.models.Model."
"delete`. This method immediately deletes the object and returns the number "
"of objects deleted and a dictionary with the number of deletions per object "
"type. Example::"
msgstr ""

msgid ""
"You can also delete objects in bulk. Every :class:`~django.db.models.query."
"QuerySet` has a :meth:`~django.db.models.query.QuerySet.delete` method, "
"which deletes all members of that :class:`~django.db.models.query.QuerySet`."
msgstr ""

msgid ""
"For example, this deletes all ``Entry`` objects with a ``pub_date`` year of "
"2005::"
msgstr ""

msgid ""
"Keep in mind that this will, whenever possible, be executed purely in SQL, "
"and so the ``delete()`` methods of individual object instances will not "
"necessarily be called during the process. If you've provided a custom "
"``delete()`` method on a model class and want to ensure that it is called, "
"you will need to \"manually\" delete instances of that model (e.g., by "
"iterating over a :class:`~django.db.models.query.QuerySet` and calling "
"``delete()`` on each object individually) rather than using the bulk :meth:"
"`~django.db.models.query.QuerySet.delete` method of a :class:`~django.db."
"models.query.QuerySet`."
msgstr ""

msgid ""
"When Django deletes an object, by default it emulates the behavior of the "
"SQL constraint ``ON DELETE CASCADE`` -- in other words, any objects which "
"had foreign keys pointing at the object to be deleted will be deleted along "
"with it. For example::"
msgstr ""

msgid ""
"This cascade behavior is customizable via the :attr:`~django.db.models."
"ForeignKey.on_delete` argument to the :class:`~django.db.models.ForeignKey`."
msgstr ""

msgid ""
"Note that :meth:`~django.db.models.query.QuerySet.delete` is the only :class:"
"`~django.db.models.query.QuerySet` method that is not exposed on a :class:"
"`~django.db.models.Manager` itself. This is a safety mechanism to prevent "
"you from accidentally requesting ``Entry.objects.delete()``, and deleting "
"*all* the entries. If you *do* want to delete all the objects, then you have "
"to explicitly request a complete query set::"
msgstr ""

msgid "Copying model instances"
msgstr ""

msgid ""
"Although there is no built-in method for copying model instances, it is "
"possible to easily create new instance with all fields' values copied. In "
"the simplest case, you can just set ``pk`` to ``None``. Using our blog "
"example::"
msgstr ""

msgid ""
"Things get more complicated if you use inheritance. Consider a subclass of "
"``Blog``::"
msgstr ""

msgid ""
"Due to how inheritance works, you have to set both ``pk`` and ``id`` to "
"None::"
msgstr ""

msgid ""
"This process doesn't copy relations that aren't part of the model's database "
"table. For example, ``Entry`` has a ``ManyToManyField`` to ``Author``. After "
"duplicating an entry, you must set the many-to-many relations for the new "
"entry::"
msgstr ""

msgid ""
"For a ``OneToOneField``, you must duplicate the related object and assign it "
"to the new object's field to avoid violating the one-to-one unique "
"constraint. For example, assuming ``entry`` is already duplicated as above::"
msgstr ""

msgid "Updating multiple objects at once"
msgstr ""

msgid ""
"Sometimes you want to set a field to a particular value for all the objects "
"in a :class:`~django.db.models.query.QuerySet`. You can do this with the :"
"meth:`~django.db.models.query.QuerySet.update` method. For example::"
msgstr ""

msgid ""
"You can only set non-relation fields and :class:`~django.db.models."
"ForeignKey` fields using this method. To update a non-relation field, "
"provide the new value as a constant. To update :class:`~django.db.models."
"ForeignKey` fields, set the new value to be the new model instance you want "
"to point to. For example::"
msgstr ""

msgid ""
"The ``update()`` method is applied instantly and returns the number of rows "
"matched by the query (which may not be equal to the number of rows updated "
"if some rows already have the new value). The only restriction on the :class:"
"`~django.db.models.query.QuerySet` being updated is that it can only access "
"one database table: the model's main table. You can filter based on related "
"fields, but you can only update columns in the model's main table. Example::"
msgstr ""

msgid ""
"Be aware that the ``update()`` method is converted directly to an SQL "
"statement. It is a bulk operation for direct updates. It doesn't run any :"
"meth:`~django.db.models.Model.save` methods on your models, or emit the "
"``pre_save`` or ``post_save`` signals (which are a consequence of calling :"
"meth:`~django.db.models.Model.save`), or honor the :attr:`~django.db.models."
"DateField.auto_now` field option. If you want to save every item in a :class:"
"`~django.db.models.query.QuerySet` and make sure that the :meth:`~django.db."
"models.Model.save` method is called on each instance, you don't need any "
"special function to handle that. Just loop over them and call :meth:`~django."
"db.models.Model.save`::"
msgstr ""

msgid ""
"Calls to update can also use :class:`F expressions <django.db.models.F>` to "
"update one field based on the value of another field in the model. This is "
"especially useful for incrementing counters based upon their current value. "
"For example, to increment the pingback count for every entry in the blog::"
msgstr ""

msgid ""
"However, unlike ``F()`` objects in filter and exclude clauses, you can't "
"introduce joins when you use ``F()`` objects in an update -- you can only "
"reference fields local to the model being updated. If you attempt to "
"introduce a join with an ``F()`` object, a ``FieldError`` will be raised::"
msgstr ""

msgid "Related objects"
msgstr ""

msgid ""
"When you define a relationship in a model (i.e., a :class:`~django.db.models."
"ForeignKey`, :class:`~django.db.models.OneToOneField`, or :class:`~django.db."
"models.ManyToManyField`), instances of that model will have a convenient API "
"to access the related object(s)."
msgstr ""

msgid ""
"Using the models at the top of this page, for example, an ``Entry`` object "
"``e`` can get its associated ``Blog`` object by accessing the ``blog`` "
"attribute: ``e.blog``."
msgstr ""

msgid ""
"(Behind the scenes, this functionality is implemented by Python "
"descriptors_. This shouldn't really matter to you, but we point it out here "
"for the curious.)"
msgstr ""

msgid ""
"Django also creates API accessors for the \"other\" side of the relationship "
"-- the link from the related model to the model that defines the "
"relationship. For example, a ``Blog`` object ``b`` has access to a list of "
"all related ``Entry`` objects via the ``entry_set`` attribute: ``b.entry_set."
"all()``."
msgstr ""

msgid ""
"All examples in this section use the sample ``Blog``, ``Author`` and "
"``Entry`` models defined at the top of this page."
msgstr ""

msgid "One-to-many relationships"
msgstr ""

msgid "Forward"
msgstr ""

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of that "
"model will have access to the related (foreign) object via a simple "
"attribute of the model."
msgstr ""

msgid ""
"You can get and set via a foreign-key attribute. As you may expect, changes "
"to the foreign key aren't saved to the database until you call :meth:"
"`~django.db.models.Model.save`. Example::"
msgstr ""

msgid ""
"If a :class:`~django.db.models.ForeignKey` field has ``null=True`` set (i."
"e., it allows ``NULL`` values), you can assign ``None`` to remove the "
"relation. Example::"
msgstr ""

msgid ""
"Forward access to one-to-many relationships is cached the first time the "
"related object is accessed. Subsequent accesses to the foreign key on the "
"same object instance are cached. Example::"
msgstr ""

msgid ""
"Note that the :meth:`~django.db.models.query.QuerySet.select_related` :class:"
"`~django.db.models.query.QuerySet` method recursively prepopulates the cache "
"of all one-to-many relationships ahead of time. Example::"
msgstr ""

msgid "Following relationships \"backward\""
msgstr ""

msgid ""
"If a model has a :class:`~django.db.models.ForeignKey`, instances of the "
"foreign-key model will have access to a :class:`~django.db.models.Manager` "
"that returns all instances of the first model. By default, this :class:"
"`~django.db.models.Manager` is named ``FOO_set``, where ``FOO`` is the "
"source model name, lowercased. This :class:`~django.db.models.Manager` "
"returns ``QuerySets``, which can be filtered and manipulated as described in "
"the \"Retrieving objects\" section above."
msgstr ""

msgid ""
"You can override the ``FOO_set`` name by setting the :attr:`~django.db."
"models.ForeignKey.related_name` parameter in the :class:`~django.db.models."
"ForeignKey` definition. For example, if the ``Entry`` model was altered to "
"``blog = ForeignKey(Blog, on_delete=models.CASCADE, "
"related_name='entries')``, the above example code would look like this::"
msgstr ""

msgid "Using a custom reverse manager"
msgstr ""

msgid ""
"By default the :class:`~django.db.models.fields.related.RelatedManager` used "
"for reverse relations is a subclass of the :ref:`default manager <manager-"
"names>` for that model. If you would like to specify a different manager for "
"a given query you can use the following syntax::"
msgstr ""

msgid ""
"If ``EntryManager`` performed default filtering in its ``get_queryset()`` "
"method, that filtering would apply to the ``all()`` call."
msgstr ""

msgid ""
"Of course, specifying a custom reverse manager also enables you to call its "
"custom methods::"
msgstr ""

msgid "Additional methods to handle related objects"
msgstr ""

msgid ""
"In addition to the :class:`~django.db.models.query.QuerySet` methods defined "
"in \"Retrieving objects\" above, the :class:`~django.db.models.ForeignKey` :"
"class:`~django.db.models.Manager` has additional methods used to handle the "
"set of related objects. A synopsis of each is below, and complete details "
"can be found in the :doc:`related objects reference </ref/models/relations>`."
msgstr ""

msgid "``add(obj1, obj2, ...)``"
msgstr ""

msgid "Adds the specified model objects to the related object set."
msgstr "将特定的模型对象加入关联对象集合。"

msgid "``create(**kwargs)``"
msgstr ""

msgid ""
"Creates a new object, saves it and puts it in the related object set. "
"Returns the newly created object."
msgstr ""

msgid "``remove(obj1, obj2, ...)``"
msgstr ""

msgid "Removes the specified model objects from the related object set."
msgstr ""

msgid "``clear()``"
msgstr ""

msgid "Removes all objects from the related object set."
msgstr ""

msgid "``set(objs)``"
msgstr ""

msgid "Replace the set of related objects."
msgstr ""

msgid ""
"To assign the members of a related set, use the ``set()`` method with an "
"iterable of object instances. For example, if ``e1`` and ``e2`` are "
"``Entry`` instances::"
msgstr ""

msgid ""
"If the ``clear()`` method is available, any pre-existing objects will be "
"removed from the ``entry_set`` before all objects in the iterable (in this "
"case, a list) are added to the set. If the ``clear()`` method is *not* "
"available, all objects in the iterable will be added without removing any "
"existing elements."
msgstr ""

msgid ""
"Each \"reverse\" operation described in this section has an immediate effect "
"on the database. Every addition, creation and deletion is immediately and "
"automatically saved to the database."
msgstr ""

msgid ""
"Both ends of a many-to-many relationship get automatic API access to the "
"other end. The API works similar to a \"backward\" one-to-many relationship, "
"above."
msgstr ""

msgid ""
"One difference is in the attribute naming: The model that defines the :class:"
"`~django.db.models.ManyToManyField` uses the attribute name of that field "
"itself, whereas the \"reverse\" model uses the lowercased model name of the "
"original model, plus ``'_set'`` (just like reverse one-to-many "
"relationships)."
msgstr ""

msgid "An example makes this easier to understand::"
msgstr ""

msgid ""
"Like :class:`~django.db.models.ForeignKey`, :class:`~django.db.models."
"ManyToManyField` can specify :attr:`~django.db.models.ManyToManyField."
"related_name`. In the above example, if the :class:`~django.db.models."
"ManyToManyField` in ``Entry`` had specified ``related_name='entries'``, then "
"each ``Author`` instance would have an ``entries`` attribute instead of "
"``entry_set``."
msgstr ""

msgid ""
"Another difference from one-to-many relationships is that in addition to "
"model instances,  the ``add()``, ``set()``, and ``remove()`` methods on many-"
"to-many relationships accept primary key values. For example, if ``e1`` and "
"``e2`` are ``Entry`` instances, then these ``set()`` calls work identically::"
msgstr ""

msgid ""
"One-to-one relationships are very similar to many-to-one relationships. If "
"you define a :class:`~django.db.models.OneToOneField` on your model, "
"instances of that model will have access to the related object via a simple "
"attribute of the model."
msgstr ""

msgid ""
"The difference comes in \"reverse\" queries. The related model in a one-to-"
"one relationship also has access to a :class:`~django.db.models.Manager` "
"object, but that :class:`~django.db.models.Manager` represents a single "
"object, rather than a collection of objects::"
msgstr ""

msgid ""
"If no object has been assigned to this relationship, Django will raise a "
"``DoesNotExist`` exception."
msgstr ""

msgid ""
"Instances can be assigned to the reverse relationship in the same way as you "
"would assign the forward relationship::"
msgstr ""

msgid "How are the backward relationships possible?"
msgstr ""

msgid ""
"Other object-relational mappers require you to define relationships on both "
"sides. The Django developers believe this is a violation of the DRY (Don't "
"Repeat Yourself) principle, so Django only requires you to define the "
"relationship on one end."
msgstr ""

msgid ""
"But how is this possible, given that a model class doesn't know which other "
"model classes are related to it until those other model classes are loaded?"
msgstr ""

msgid ""
"The answer lies in the :data:`app registry <django.apps.apps>`. When Django "
"starts, it imports each application listed in :setting:`INSTALLED_APPS`, and "
"then the ``models`` module inside each application. Whenever a new model "
"class is created, Django adds backward-relationships to any related models. "
"If the related models haven't been imported yet, Django keeps tracks of the "
"relationships and adds them when the related models eventually are imported."
msgstr ""

msgid ""
"For this reason, it's particularly important that all the models you're "
"using be defined in applications listed in :setting:`INSTALLED_APPS`. "
"Otherwise, backwards relations may not work properly."
msgstr ""

msgid "Queries over related objects"
msgstr ""

msgid ""
"Queries involving related objects follow the same rules as queries involving "
"normal value fields. When specifying the value for a query to match, you may "
"use either an object instance itself, or the primary key value for the "
"object."
msgstr ""

msgid ""
"For example, if you have a Blog object ``b`` with ``id=5``, the following "
"three queries would be identical::"
msgstr ""

msgid "Falling back to raw SQL"
msgstr ""

msgid ""
"If you find yourself needing to write an SQL query that is too complex for "
"Django's database-mapper to handle, you can fall back on writing SQL by "
"hand. Django has a couple of options for writing raw SQL queries; see :doc:`/"
"topics/db/sql`."
msgstr ""

msgid ""
"Finally, it's important to note that the Django database layer is merely an "
"interface to your database. You can access your database via other tools, "
"programming languages or database frameworks; there's nothing Django-"
"specific about your database."
msgstr ""

msgid "Search"
msgstr "搜索"

msgid ""
"A common task for web applications is to search some data in the database "
"with user input. In a simple case, this could be filtering a list of objects "
"by a category. A more complex use case might require searching with "
"weighting, categorization, highlighting, multiple languages, and so on. This "
"document explains some of the possible use cases and the tools you can use."
msgstr ""

msgid "We'll refer to the same models used in :doc:`/topics/db/queries`."
msgstr ""

msgid "Use Cases"
msgstr ""

msgid "Standard textual queries"
msgstr ""

msgid ""
"Text-based fields have a selection of simple matching operations. For "
"example, you may wish to allow lookup up an author like so::"
msgstr ""

msgid ""
"This is a very fragile solution as it requires the user to know an exact "
"substring of the author's name. A better approach could be a case-"
"insensitive match (:lookup:`icontains`), but this is only marginally better."
msgstr ""

msgid "A database's more advanced comparison functions"
msgstr ""

msgid ""
"If you're using PostgreSQL, Django provides :doc:`a selection of database "
"specific tools </ref/contrib/postgres/search>` to allow you to leverage more "
"complex querying options. Other databases have different selections of "
"tools, possibly via plugins or user-defined functions. Django doesn't "
"include any support for them at this time. We'll use some examples from "
"PostgreSQL to demonstrate the kind of functionality databases may have."
msgstr ""

msgid "Searching in other databases"
msgstr ""

msgid ""
"All of the searching tools provided by :mod:`django.contrib.postgres` are "
"constructed entirely on public APIs such as :doc:`custom lookups </ref/"
"models/lookups>` and :doc:`database functions </ref/models/database-"
"functions>`. Depending on your database, you should be able to construct "
"queries to allow similar APIs. If there are specific things which cannot be "
"achieved this way, please open a ticket."
msgstr ""

msgid ""
"In the above example, we determined that a case insensitive lookup would be "
"more useful. When dealing with non-English names, a further improvement is "
"to use :lookup:`unaccented comparison <unaccent>`::"
msgstr ""

msgid ""
"This shows another issue, where we are matching against a different spelling "
"of the name. In this case we have an asymmetry though - a search for "
"``Helen`` will pick up ``Helena`` or ``Hélène``, but not the reverse. "
"Another option would be to use a :lookup:`trigram_similar` comparison, which "
"compares sequences of letters."
msgstr ""

msgid ""
"Now we have a different problem - the longer name of \"Helena Bonham Carter"
"\" doesn't show up as it is much longer. Trigram searches consider all "
"combinations of three letters, and compares how many appear in both search "
"and source strings. For the longer name, there are more combinations which "
"appear in the source string so it is no longer considered a close match."
msgstr ""

msgid ""
"The correct choice of comparison functions here depends on your particular "
"data set, for example the language(s) used and the type of text being "
"searched. All of the examples we've seen are on short strings where the user "
"is likely to enter something close (by varying definitions) to the source "
"data."
msgstr ""

msgid "Document-based search"
msgstr ""

msgid ""
"Simple database operations are too simple an approach when you start "
"considering large blocks of text. Whereas the examples above can be thought "
"of as operations on a string of characters, full text search looks at the "
"actual words. Depending on the system used, it's likely to use some of the "
"following ideas:"
msgstr ""

msgid "Ignoring \"stop words\" such as \"a\", \"the\", \"and\"."
msgstr ""

msgid "Stemming words, so that \"pony\" and \"ponies\" are considered similar."
msgstr ""

msgid ""
"Weighting words based on different criteria such as how frequently they "
"appear in the text, or the importance of the fields, such as the title or "
"keywords, that they appear in."
msgstr ""

msgid ""
"There are many alternatives for using searching software, some of the most "
"prominent are Elastic_ and Solr_. These are full document-based search "
"solutions. To use them with data from Django models, you'll need a layer "
"which translates your data into a textual document, including back-"
"references to the database ids. When a search using the engine returns a "
"certain document, you can then look it up in the database. There are a "
"variety of third-party libraries which are designed to help with this "
"process."
msgstr ""

msgid "PostgreSQL support"
msgstr ""

msgid ""
"PostgreSQL has its own full text search implementation built-in. While not "
"as powerful as some other search engines, it has the advantage of being "
"inside your database and so can easily be combined with other relational "
"queries such as categorization."
msgstr ""

msgid ""
"The :mod:`django.contrib.postgres` module provides some helpers to make "
"these queries. For example, a simple query might be to select all the blog "
"entries which mention \"cheese\"::"
msgstr ""

msgid "You can also filter on a combination of fields and on related models::"
msgstr ""

msgid ""
"See the ``contrib.postgres`` :doc:`/ref/contrib/postgres/search` document "
"for complete details."
msgstr ""

msgid "Performing raw SQL queries"
msgstr ""

msgid ""
"Django gives you two ways of performing raw SQL queries: you can use :meth:"
"`Manager.raw()` to `perform raw queries and return model instances`__, or "
"you can avoid the model layer entirely and `execute custom SQL directly`__."
msgstr ""

msgid "Explore the ORM before using raw SQL!"
msgstr ""

msgid ""
"The Django ORM provides many tools to express queries without writing raw "
"SQL. For example:"
msgstr ""

msgid "The :doc:`QuerySet API </ref/models/querysets>` is extensive."
msgstr ""

msgid ""
"You can :meth:`annotate <.QuerySet.annotate>` and :doc:`aggregate </topics/"
"db/aggregation>` using many built-in :doc:`database functions </ref/models/"
"database-functions>`. Beyond those, you can create :doc:`custom query "
"expressions </ref/models/expressions/>`."
msgstr ""

msgid ""
"Before using raw SQL, explore :doc:`the ORM </topics/db/index>`. Ask on |"
"django-users| or the `#django IRC channel <irc://irc.freenode.net/django>`_ "
"to see if the ORM supports your use case."
msgstr ""

msgid ""
"You should be very careful whenever you write raw SQL. Every time you use "
"it, you should properly escape any parameters that the user can control by "
"using ``params`` in order to protect against SQL injection attacks. Please "
"read more about :ref:`SQL injection protection <sql-injection-protection>`."
msgstr ""

msgid "Performing raw queries"
msgstr ""

msgid ""
"The ``raw()`` manager method can be used to perform raw SQL queries that "
"return model instances:"
msgstr ""

msgid ""
"This method takes a raw SQL query, executes it, and returns a ``django.db."
"models.query.RawQuerySet`` instance. This ``RawQuerySet`` instance can be "
"iterated over just like a normal :class:`~django.db.models.query.QuerySet` "
"to provide object instances."
msgstr ""

msgid ""
"This is best illustrated with an example. Suppose you have the following "
"model::"
msgstr ""

msgid "You could then execute custom SQL like so::"
msgstr ""

msgid ""
"Of course, this example isn't very exciting -- it's exactly the same as "
"running ``Person.objects.all()``. However, ``raw()`` has a bunch of other "
"options that make it very powerful."
msgstr ""

msgid "Model table names"
msgstr ""

msgid "Where did the name of the ``Person`` table come from in that example?"
msgstr ""

msgid ""
"By default, Django figures out a database table name by joining the model's "
"\"app label\" -- the name you used in ``manage.py startapp`` -- to the "
"model's class name, with an underscore between them. In the example we've "
"assumed that the ``Person`` model lives in an app named ``myapp``, so its "
"table would be ``myapp_person``."
msgstr ""

msgid ""
"For more details check out the documentation for the :attr:`~Options."
"db_table` option, which also lets you manually set the database table name."
msgstr ""

msgid ""
"No checking is done on the SQL statement that is passed in to ``.raw()``. "
"Django expects that the statement will return a set of rows from the "
"database, but does nothing to enforce that. If the query does not return "
"rows, a (possibly cryptic) error will result."
msgstr ""

msgid ""
"If you are performing queries on MySQL, note that MySQL's silent type "
"coercion may cause unexpected results when mixing types. If you query on a "
"string type column, but with an integer value, MySQL will coerce the types "
"of all values in the table to an integer before performing the comparison. "
"For example, if your table contains the values ``'abc'``, ``'def'`` and you "
"query for ``WHERE mycolumn=0``, both rows will match. To prevent this, "
"perform the correct typecasting before using the value in a query."
msgstr ""

msgid "Mapping query fields to model fields"
msgstr ""

msgid ""
"``raw()`` automatically maps fields in the query to fields on the model."
msgstr ""

msgid ""
"The order of fields in your query doesn't matter. In other words, both of "
"the following queries work identically::"
msgstr ""

msgid ""
"Matching is done by name. This means that you can use SQL's ``AS`` clauses "
"to map fields in the query to model fields. So if you had some other table "
"that had ``Person`` data in it, you could easily map it into ``Person`` "
"instances::"
msgstr ""

msgid ""
"As long as the names match, the model instances will be created correctly."
msgstr ""

msgid ""
"Alternatively, you can map fields in the query to model fields using the "
"``translations`` argument to ``raw()``. This is a dictionary mapping names "
"of fields in the query to names of fields on the model. For example, the "
"above query could also be written::"
msgstr ""

msgid "Index lookups"
msgstr ""

msgid ""
"``raw()`` supports indexing, so if you need only the first result you can "
"write::"
msgstr ""

msgid ""
"However, the indexing and slicing are not performed at the database level. "
"If you have a large number of ``Person`` objects in your database, it is "
"more efficient to limit the query at the SQL level::"
msgstr ""

msgid "Deferring model fields"
msgstr ""

msgid "Fields may also be left out::"
msgstr ""

msgid ""
"The ``Person`` objects returned by this query will be deferred model "
"instances (see :meth:`~django.db.models.query.QuerySet.defer()`). This means "
"that the fields that are omitted from the query will be loaded on demand. "
"For example::"
msgstr ""

msgid ""
"From outward appearances, this looks like the query has retrieved both the "
"first name and last name. However, this example actually issued 3 queries. "
"Only the first names were retrieved by the raw() query -- the last names "
"were both retrieved on demand when they were printed."
msgstr ""

msgid ""
"There is only one field that you can't leave out - the primary key field. "
"Django uses the primary key to identify model instances, so it must always "
"be included in a raw query. An ``InvalidQuery`` exception will be raised if "
"you forget to include the primary key."
msgstr ""

msgid "Adding annotations"
msgstr ""

msgid ""
"You can also execute queries containing fields that aren't defined on the "
"model. For example, we could use `PostgreSQL's age() function`__ to get a "
"list of people with their ages calculated by the database::"
msgstr ""

msgid ""
"You can often avoid using raw SQL to compute annotations by instead using a :"
"ref:`Func() expression <func-expressions>`."
msgstr ""

msgid "Passing parameters into ``raw()``"
msgstr ""

msgid ""
"If you need to perform parameterized queries, you can use the ``params`` "
"argument to ``raw()``::"
msgstr ""

msgid ""
"``params`` is a list or dictionary of parameters. You'll use ``%s`` "
"placeholders in the query string for a list, or ``%(key)s`` placeholders for "
"a dictionary (where ``key`` is replaced by a dictionary key, of course), "
"regardless of your database engine.  Such placeholders will be replaced with "
"parameters from the ``params`` argument."
msgstr ""

msgid ""
"Dictionary params are not supported with the SQLite backend; with this "
"backend, you must pass parameters as a list."
msgstr ""

msgid ""
"**Do not use string formatting on raw queries or quote placeholders in your "
"SQL strings!**"
msgstr ""

msgid "It's tempting to write the above query as::"
msgstr ""

msgid ""
"You might also think you should write your query like this (with quotes "
"around ``%s``)::"
msgstr ""

msgid "**Don't make either of these mistakes.**"
msgstr ""

msgid ""
"As discussed in :ref:`sql-injection-protection`, using the ``params`` "
"argument and leaving the placeholders unquoted protects you from `SQL "
"injection attacks`__, a common exploit where attackers inject arbitrary SQL "
"into your database. If you use string interpolation or quote the "
"placeholder, you're at risk for SQL injection."
msgstr ""

msgid "Executing custom SQL directly"
msgstr ""

msgid ""
"Sometimes even :meth:`Manager.raw` isn't quite enough: you might need to "
"perform queries that don't map cleanly to models, or directly execute "
"``UPDATE``, ``INSERT``, or ``DELETE`` queries."
msgstr ""

msgid ""
"In these cases, you can always access the database directly, routing around "
"the model layer entirely."
msgstr ""

msgid ""
"The object ``django.db.connection`` represents the default database "
"connection. To use the database connection, call ``connection.cursor()`` to "
"get a cursor object. Then, call ``cursor.execute(sql, [params])`` to execute "
"the SQL and ``cursor.fetchone()`` or ``cursor.fetchall()`` to return the "
"resulting rows."
msgstr ""

msgid ""
"To protect against SQL injection, you must not include quotes around the ``"
"%s`` placeholders in the SQL string."
msgstr ""

msgid ""
"Note that if you want to include literal percent signs in the query, you "
"have to double them in the case you are passing parameters::"
msgstr ""

msgid ""
"If you are using :doc:`more than one database </topics/db/multi-db>`, you "
"can use ``django.db.connections`` to obtain the connection (and cursor) for "
"a specific database. ``django.db.connections`` is a dictionary-like object "
"that allows you to retrieve a specific connection using its alias::"
msgstr ""

msgid ""
"By default, the Python DB API will return results without their field names, "
"which means you end up with a ``list`` of values, rather than a ``dict``. At "
"a small performance and memory cost, you can return results as a ``dict`` by "
"using something like this::"
msgstr ""

msgid ""
"Another option is to use :func:`collections.namedtuple` from the Python "
"standard library. A ``namedtuple`` is a tuple-like object that has fields "
"accessible by attribute lookup; it's also indexable and iterable. Results "
"are immutable and accessible by field names or indices, which might be "
"useful::"
msgstr ""

msgid "Here is an example of the difference between the three::"
msgstr ""

msgid "Connections and cursors"
msgstr ""

msgid ""
"``connection`` and ``cursor`` mostly implement the standard Python DB-API "
"described in :pep:`249` — except when it comes to :doc:`transaction handling "
"</topics/db/transactions>`."
msgstr ""

msgid ""
"If you're not familiar with the Python DB-API, note that the SQL statement "
"in ``cursor.execute()`` uses placeholders, ``\"%s\"``, rather than adding "
"parameters directly within the SQL. If you use this technique, the "
"underlying database library will automatically escape your parameters as "
"necessary."
msgstr ""

msgid ""
"Also note that Django expects the ``\"%s\"`` placeholder, *not* the ``\"?"
"\"`` placeholder, which is used by the SQLite Python bindings. This is for "
"the sake of consistency and sanity."
msgstr ""

msgid "Using a cursor as a context manager::"
msgstr ""

msgid "is equivalent to::"
msgstr "相当于::"

msgid "Calling stored procedures"
msgstr ""

msgid ""
"Calls a database stored procedure with the given name. A sequence "
"(``params``) or dictionary (``kparams``) of input parameters may be "
"provided. Most databases don't support ``kparams``. Of Django's built-in "
"backends, only Oracle supports it."
msgstr ""

msgid "For example, given this stored procedure in an Oracle database:"
msgstr ""

msgid "This will call it::"
msgstr ""

msgid "The ``kparams`` argument was added."
msgstr ""

msgid "Tablespaces"
msgstr ""

msgid ""
"A common paradigm for optimizing performance in database systems is the use "
"of `tablespaces`_ to organize disk layout."
msgstr ""

msgid ""
"Django does not create the tablespaces for you. Please refer to your "
"database engine's documentation for details on creating and managing "
"tablespaces."
msgstr ""

msgid "Declaring tablespaces for tables"
msgstr ""

msgid ""
"A tablespace can be specified for the table generated by a model by "
"supplying the :attr:`~django.db.models.Options.db_tablespace` option inside "
"the model's ``class Meta``. This option also affects tables automatically "
"created for :class:`~django.db.models.ManyToManyField`\\ s in the model."
msgstr ""

msgid ""
"You can use the :setting:`DEFAULT_TABLESPACE` setting to specify a default "
"value for :attr:`~django.db.models.Options.db_tablespace`. This is useful "
"for setting a tablespace for the built-in Django apps and other applications "
"whose code you cannot control."
msgstr ""

msgid "Declaring tablespaces for indexes"
msgstr ""

msgid ""
"You can pass the :attr:`~django.db.models.Index.db_tablespace` option to an "
"``Index`` constructor to specify the name of a tablespace to use for the "
"index. For single field indexes, you can pass the :attr:`~django.db.models."
"Field.db_tablespace` option to a ``Field`` constructor to specify an "
"alternate tablespace for the field's column index. If the column doesn't "
"have an index, the option is ignored."
msgstr ""

msgid ""
"You can use the :setting:`DEFAULT_INDEX_TABLESPACE` setting to specify a "
"default value for :attr:`~django.db.models.Field.db_tablespace`."
msgstr ""

msgid ""
"If :attr:`~django.db.models.Field.db_tablespace` isn't specified and you "
"didn't set :setting:`DEFAULT_INDEX_TABLESPACE`, the index is created in the "
"same tablespace as the tables."
msgstr ""

msgid ""
"In this example, the tables generated by the ``TablespaceExample`` model (i."
"e. the model table and the many-to-many table) would be stored in the "
"``tables`` tablespace. The index for the name field and the indexes on the "
"many-to-many table would be stored in the ``indexes`` tablespace. The "
"``data`` field would also generate an index, but no tablespace for it is "
"specified, so it would be stored in the model tablespace ``tables`` by "
"default. The index for the ``shortcut`` field would be stored in the "
"``other_indexes`` tablespace."
msgstr ""

msgid "Database support"
msgstr ""

msgid "PostgreSQL and Oracle support tablespaces. SQLite and MySQL don't."
msgstr ""

msgid ""
"When you use a backend that lacks support for tablespaces, Django ignores "
"all tablespace-related options."
msgstr ""

msgid "Database transactions"
msgstr "数据库事务"

msgid ""
"Django gives you a few ways to control how database transactions are managed."
msgstr "Django 提供多种方式控制数据库事务。"

msgid "Managing database transactions"
msgstr "管理数据库事务"

msgid "Django's default transaction behavior"
msgstr "Django 默认的事务行为"

msgid ""
"Django's default behavior is to run in autocommit mode. Each query is "
"immediately committed to the database, unless a transaction is active. :ref:"
"`See below for details <autocommit-details>`."
msgstr ""
"Django 默认的事务行为是自动提交。除非事务正在执行，每个查询将会马上自动提交到"
"数据库。 :ref:`详见 <autocommit-details>`."

msgid ""
"Django uses transactions or savepoints automatically to guarantee the "
"integrity of ORM operations that require multiple queries, especially :ref:"
"`delete() <topics-db-queries-delete>` and :ref:`update() <topics-db-queries-"
"update>` queries."
msgstr ""
"Django 自动使用事务或还原点，以确保需多次查询的 ORM 操作的一致性，特别是 :"
"ref:`delete() <topics-db-queries-delete>` 和 :ref:`update() <topics-db-"
"queries-update>` 操作."

msgid ""
"Django's :class:`~django.test.TestCase` class also wraps each test in a "
"transaction for performance reasons."
msgstr ""
"由于性能原因，Django 的 :class:`~django.test.TestCase` 类同样将每个测试用事务"
"封装起来。"

msgid "Tying transactions to HTTP requests"
msgstr "连结事务与 HTTP 请求"

msgid ""
"A common way to handle transactions on the web is to wrap each request in a "
"transaction. Set :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` to "
"``True`` in the configuration of each database for which you want to enable "
"this behavior."
msgstr ""
"在 Web 里，处理事务比较常用的方式是将每个请求封装在一个事务中。 在你想启用该"
"行为的数据库中，把配置中的参数 :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` 设置为 ``True``。"

msgid ""
"It works like this. Before calling a view function, Django starts a "
"transaction. If the response is produced without problems, Django commits "
"the transaction. If the view produces an exception, Django rolls back the "
"transaction."
msgstr ""
"它是这样工作的：在调用试图方法前，Django 先生成一个事务。如果响应能正常生成，"
"Django 会提交该事务。而如果视图出现异常，Django 则会回滚该事务。"

msgid ""
"You may perform subtransactions using savepoints in your view code, "
"typically with the :func:`atomic` context manager. However, at the end of "
"the view, either all or none of the changes will be committed."
msgstr ""
"你可以在你的视图代码中使用还原点执行子事务，一般会使用 :func:`atomic 上下文管"
"理器。但是，在视图结束时，要么所有的更改都被提交，要么所有的更改都不被提交。"

msgid ""
"While the simplicity of this transaction model is appealing, it also makes "
"it inefficient when traffic increases. Opening a transaction for every view "
"has some overhead. The impact on performance depends on the query patterns "
"of your application and on how well your database handles locking."
msgstr ""

msgid "Per-request transactions and streaming responses"
msgstr ""

msgid ""
"When a view returns a :class:`~django.http.StreamingHttpResponse`, reading "
"the contents of the response will often execute code to generate the "
"content. Since the view has already returned, such code runs outside of the "
"transaction."
msgstr ""

msgid ""
"Generally speaking, it isn't advisable to write to the database while "
"generating a streaming response, since there's no sensible way to handle "
"errors after starting to send the response."
msgstr ""

msgid ""
"In practice, this feature simply wraps every view function in the :func:"
"`atomic` decorator described below."
msgstr ""

msgid ""
"Note that only the execution of your view is enclosed in the transactions. "
"Middleware runs outside of the transaction, and so does the rendering of "
"template responses."
msgstr ""

msgid ""
"When :setting:`ATOMIC_REQUESTS <DATABASE-ATOMIC_REQUESTS>` is enabled, it's "
"still possible to prevent views from running in a transaction."
msgstr ""

msgid ""
"This decorator will negate the effect of :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>` for a given view::"
msgstr ""

msgid "It only works if it's applied to the view itself."
msgstr ""

msgid "Controlling transactions explicitly"
msgstr ""

msgid "Django provides a single API to control database transactions."
msgstr ""

msgid ""
"Atomicity is the defining property of database transactions. ``atomic`` "
"allows us to create a block of code within which the atomicity on the "
"database is guaranteed. If the block of code is successfully completed, the "
"changes are committed to the database. If there is an exception, the changes "
"are rolled back."
msgstr ""

msgid ""
"``atomic`` blocks can be nested. In this case, when an inner block completes "
"successfully, its effects can still be rolled back if an exception is raised "
"in the outer block at a later point."
msgstr ""

msgid "``atomic`` is usable both as a :py:term:`decorator`::"
msgstr ""

msgid "and as a :py:term:`context manager`::"
msgstr ""

msgid ""
"Wrapping ``atomic`` in a try/except block allows for natural handling of "
"integrity errors::"
msgstr ""

msgid ""
"In this example, even if ``generate_relationships()`` causes a database "
"error by breaking an integrity constraint, you can execute queries in "
"``add_children()``, and the changes from ``create_parent()`` are still "
"there. Note that any operations attempted in ``generate_relationships()`` "
"will already have been rolled back safely when ``handle_exception()`` is "
"called, so the exception handler can also operate on the database if "
"necessary."
msgstr ""

msgid "Avoid catching exceptions inside ``atomic``!"
msgstr ""

msgid ""
"When exiting an ``atomic`` block, Django looks at whether it's exited "
"normally or with an exception to determine whether to commit or roll back. "
"If you catch and handle exceptions inside an ``atomic`` block, you may hide "
"from Django the fact that a problem has happened. This can result in "
"unexpected behavior."
msgstr ""

msgid ""
"This is mostly a concern for :exc:`~django.db.DatabaseError` and its "
"subclasses such as :exc:`~django.db.IntegrityError`. After such an error, "
"the transaction is broken and Django will perform a rollback at the end of "
"the ``atomic`` block. If you attempt to run database queries before the "
"rollback happens, Django will raise a :class:`~django.db.transaction."
"TransactionManagementError`. You may also encounter this behavior when an "
"ORM-related signal handler raises an exception."
msgstr ""

msgid ""
"The correct way to catch database errors is around an ``atomic`` block as "
"shown above. If necessary, add an extra ``atomic`` block for this purpose. "
"This pattern has another advantage: it delimits explicitly which operations "
"will be rolled back if an exception occurs."
msgstr ""

msgid ""
"If you catch exceptions raised by raw SQL queries, Django's behavior is "
"unspecified and database-dependent."
msgstr ""

msgid ""
"You may need to manually revert model state when rolling back a transaction."
msgstr ""

msgid ""
"The values of a model's fields won't be reverted when a transaction rollback "
"happens. This could lead to an inconsistent model state unless you manually "
"restore the original field values."
msgstr ""

msgid ""
"For example, given ``MyModel`` with an ``active`` field, this snippet "
"ensures that the ``if obj.active`` check at the end uses the correct value "
"if updating ``active`` to ``True`` fails in the transaction::"
msgstr ""

msgid ""
"In order to guarantee atomicity, ``atomic`` disables some APIs. Attempting "
"to commit, roll back, or change the autocommit state of the database "
"connection within an ``atomic`` block will raise an exception."
msgstr ""

msgid ""
"``atomic`` takes a ``using`` argument which should be the name of a "
"database. If this argument isn't provided, Django uses the ``\"default\"`` "
"database."
msgstr ""

msgid "Under the hood, Django's transaction management code:"
msgstr ""

msgid "opens a transaction when entering the outermost ``atomic`` block;"
msgstr ""

msgid "creates a savepoint when entering an inner ``atomic`` block;"
msgstr ""

msgid "releases or rolls back to the savepoint when exiting an inner block;"
msgstr ""

msgid "commits or rolls back the transaction when exiting the outermost block."
msgstr ""

msgid ""
"You can disable the creation of savepoints for inner blocks by setting the "
"``savepoint`` argument to ``False``. If an exception occurs, Django will "
"perform the rollback when exiting the first parent block with a savepoint if "
"there is one, and the outermost block otherwise. Atomicity is still "
"guaranteed by the outer transaction. This option should only be used if the "
"overhead of savepoints is noticeable. It has the drawback of breaking the "
"error handling described above."
msgstr ""

msgid ""
"You may use ``atomic`` when autocommit is turned off. It will only use "
"savepoints, even for the outermost block."
msgstr ""

msgid "Performance considerations"
msgstr ""

msgid ""
"Open transactions have a performance cost for your database server. To "
"minimize this overhead, keep your transactions as short as possible. This is "
"especially important if you're using :func:`atomic` in long-running "
"processes, outside of Django's request / response cycle."
msgstr ""

msgid "Autocommit"
msgstr ""

msgid "Why Django uses autocommit"
msgstr ""

msgid ""
"In the SQL standards, each SQL query starts a transaction, unless one is "
"already active. Such transactions must then be explicitly committed or "
"rolled back."
msgstr ""

msgid ""
"This isn't always convenient for application developers. To alleviate this "
"problem, most databases provide an autocommit mode. When autocommit is "
"turned on and no transaction is active, each SQL query gets wrapped in its "
"own transaction. In other words, not only does each such query start a "
"transaction, but the transaction also gets automatically committed or rolled "
"back, depending on whether the query succeeded."
msgstr ""

msgid ""
":pep:`249`, the Python Database API Specification v2.0, requires autocommit "
"to be initially turned off. Django overrides this default and turns "
"autocommit on."
msgstr ""

msgid ""
"To avoid this, you can :ref:`deactivate the transaction management "
"<deactivate-transaction-management>`, but it isn't recommended."
msgstr ""
"为了避免这种情况，你可以参考 deactivate the transaction "
"management<deactivate-transaction-management> ，但并不推荐这样做。"

msgid "Deactivating transaction management"
msgstr "停用事务管理"

msgid ""
"You can totally disable Django's transaction management for a given database "
"by setting :setting:`AUTOCOMMIT <DATABASE-AUTOCOMMIT>` to ``False`` in its "
"configuration. If you do this, Django won't enable autocommit, and won't "
"perform any commits. You'll get the regular behavior of the underlying "
"database library."
msgstr ""

msgid ""
"This requires you to commit explicitly every transaction, even those started "
"by Django or by third-party libraries. Thus, this is best used in situations "
"where you want to run your own transaction-controlling middleware or do "
"something really strange."
msgstr ""

msgid "Performing actions after commit"
msgstr "提交后"

msgid ""
"Sometimes you need to perform an action related to the current database "
"transaction, but only if the transaction successfully commits. Examples "
"might include a `Celery`_ task, an email notification, or a cache "
"invalidation."
msgstr ""

msgid ""
"Django provides the :func:`on_commit` function to register callback "
"functions that should be executed after a transaction is successfully "
"committed:"
msgstr ""
" Django 提供了函数  :func:`on_commit` ，允许注册一个回调函数，以便事务成功提"
"交后执行。"

msgid "Pass any function (that takes no arguments) to :func:`on_commit`::"
msgstr "将任意函数（无参数）传递给 :func:`on_commit`::"

msgid "You can also wrap your function in a lambda::"
msgstr "你也可以使用 lambda:: 包装函数"

msgid ""
"The function you pass in will be called immediately after a hypothetical "
"database write made where ``on_commit()`` is called would be successfully "
"committed."
msgstr ""

msgid ""
"If you call ``on_commit()`` while there isn't an active transaction, the "
"callback will be executed immediately."
msgstr "无任何活动事务时调用 ``on_commit()`` ，则回调函数会立即执行。"

msgid ""
"If that hypothetical database write is instead rolled back (typically when "
"an unhandled exception is raised in an :func:`atomic` block), your function "
"will be discarded and never called."
msgstr ""

msgid "Savepoints"
msgstr ""

msgid ""
"Savepoints (i.e. nested :func:`atomic` blocks) are handled correctly. That "
"is, an :func:`on_commit` callable registered after a savepoint (in a nested :"
"func:`atomic` block) will be called after the outer transaction is "
"committed, but not if a rollback to that savepoint or any previous savepoint "
"occurred during the transaction::"
msgstr ""

msgid ""
"On the other hand, when a savepoint is rolled back (due to an exception "
"being raised), the inner callable will not be called::"
msgstr ""

msgid "Order of execution"
msgstr "执行顺序"

msgid ""
"On-commit functions for a given transaction are executed in the order they "
"were registered."
msgstr "事务提交后的的回调函数执行顺序与当初注册时的顺序一致。"

msgid "Exception handling"
msgstr "异常处理"

msgid ""
"If one on-commit function within a given transaction raises an uncaught "
"exception, no later registered functions in that same transaction will run. "
"This is, of course, the same behavior as if you'd executed the functions "
"sequentially yourself without :func:`on_commit`."
msgstr ""

msgid "Timing of execution"
msgstr ""

msgid ""
"Your callbacks are executed *after* a successful commit, so a failure in a "
"callback will not cause the transaction to roll back. They are executed "
"conditionally upon the success of the transaction, but they are not *part* "
"of the transaction. For the intended use cases (mail notifications, Celery "
"tasks, etc.), this should be fine. If it's not (if your follow-up action is "
"so critical that its failure should mean the failure of the transaction "
"itself), then you don't want to use the :func:`on_commit` hook. Instead, you "
"may want `two-phase commit`_ such as the `psycopg Two-Phase Commit protocol "
"support`_ and the `optional Two-Phase Commit Extensions in the Python DB-API "
"specification`_."
msgstr ""

msgid ""
"Callbacks are not run until autocommit is restored on the connection "
"following the commit (because otherwise any queries done in a callback would "
"open an implicit transaction, preventing the connection from going back into "
"autocommit mode)."
msgstr ""

msgid ""
"When in autocommit mode and outside of an :func:`atomic` block, the function "
"will run immediately, not on commit."
msgstr ""

msgid ""
"On-commit functions only work with :ref:`autocommit mode <managing-"
"autocommit>` and the :func:`atomic` (or :setting:`ATOMIC_REQUESTS <DATABASE-"
"ATOMIC_REQUESTS>`) transaction API. Calling :func:`on_commit` when "
"autocommit is disabled and you are not within an atomic block will result in "
"an error."
msgstr ""

msgid "Use in tests"
msgstr ""

msgid ""
"Django's :class:`~django.test.TestCase` class wraps each test in a "
"transaction and rolls back that transaction after each test, in order to "
"provide test isolation. This means that no transaction is ever actually "
"committed, thus your :func:`on_commit` callbacks will never be run. If you "
"need to test the results of an :func:`on_commit` callback, use a :class:"
"`~django.test.TransactionTestCase` instead."
msgstr ""

msgid "Why no rollback hook?"
msgstr "为什么没有事务回滚钩子？"

msgid ""
"A rollback hook is harder to implement robustly than a commit hook, since a "
"variety of things can cause an implicit rollback."
msgstr ""
"事务回滚钩子相比事务提交钩子更难实现，因为各种各样的情况都可能造成隐式回滚。"

msgid ""
"For instance, if your database connection is dropped because your process "
"was killed without a chance to shut down gracefully, your rollback hook will "
"never run."
msgstr ""

msgid ""
"The solution is simple: instead of doing something during the atomic block "
"(transaction) and then undoing it if the transaction fails, use :func:"
"`on_commit` to delay doing it in the first place until after the transaction "
"succeeds. It's a lot easier to undo something you never did in the first "
"place!"
msgstr ""
"解决方法很简单，与其在执行事务时（原子操作）进行某项操作，当事务执行失败后再"
"取消这项操作，不如使用 :func:`on_commit` 来延迟该项操作，直到事务成功后再进行"
"操作。毕竟事务成功后你才能确保之后的操作是有意义的。"

msgid "Low-level APIs"
msgstr ""

msgid ""
"Always prefer :func:`atomic` if possible at all. It accounts for the "
"idiosyncrasies of each database and prevents invalid operations."
msgstr ""

msgid ""
"The low level APIs are only useful if you're implementing your own "
"transaction management."
msgstr ""

msgid ""
"Django provides a straightforward API in the :mod:`django.db.transaction` "
"module to manage the autocommit state of each database connection."
msgstr ""
" Django 在模块 :mod:`django.db.transaction` 中提供了一个直接的 API 去管理不同"
"数据库的自动提交情况。"

msgid ""
"These functions take a ``using`` argument which should be the name of a "
"database. If it isn't provided, Django uses the ``\"default\"`` database."
msgstr ""
"这些函数使接受一个  ``using`` 参数表示所要操作的数据库。如果未提供，则   "
"Django 使用 ``\"default\"`` 数据库。"

msgid ""
"Autocommit is initially turned on. If you turn it off, it's your "
"responsibility to restore it."
msgstr "自动提交默认为开启，如果你将它关闭，自己承担后果。"

msgid ""
"Once you turn autocommit off, you get the default behavior of your database "
"adapter, and Django won't help you. Although that behavior is specified in :"
"pep:`249`, implementations of adapters aren't always consistent with one "
"another. Review the documentation of the adapter you're using carefully."
msgstr ""
"一旦你关闭了自动提交， Django 将无法帮助你，数据库将会按照你使用的数据库适配"
"器的默认行为进行操作。虽然适配器的标准经过了 :pep:`249` 详细规定，但不同适配"
"器的实现方式并不总是一致的。你需要谨慎地查看你所使用的适配器的文档。"

msgid ""
"You must ensure that no transaction is active, usually by issuing a :func:"
"`commit` or a :func:`rollback`, before turning autocommit back on."
msgstr ""
"在关闭自动提交之前，你必须确保当前没有活动的事务，通常你可以执行 :func:"
"`commit` 或者 :func:`rollback` 函数以达到该条件。"

msgid ""
"Django will refuse to turn autocommit off when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"当一个原子 :func:`atomic` 事务处于活动状态时， Django 将会拒绝关闭自动提交的"
"请求，因为这样会破坏原子性。"

msgid "Transactions"
msgstr "事务"

msgid ""
"A transaction is an atomic set of database queries. Even if your program "
"crashes, the database guarantees that either all the changes will be "
"applied, or none of them."
msgstr ""
"事务是指具有原子性的一系列数据库操作。即使你的程序崩溃，数据库也会确保这些操"
"作要么全部完成要么全部都未执行。"

msgid ""
"Django doesn't provide an API to start a transaction. The expected way to "
"start a transaction is to disable autocommit with :func:`set_autocommit`."
msgstr ""
" Django 并没有提供一个直接的 API 来创建一个事务，如果需要手动创建一个事务必须"
"通过 :func:`set_autocommit` 函数关闭自动提交。"

msgid ""
"Once you're in a transaction, you can choose either to apply the changes "
"you've performed until this point with :func:`commit`, or to cancel them "
"with :func:`rollback`. These functions are defined in :mod:`django.db."
"transaction`."
msgstr ""

msgid ""
"Django will refuse to commit or to rollback when an :func:`atomic` block is "
"active, because that would break atomicity."
msgstr ""
"当一个原子 :func:`atomic` 事务处于活动状态时， Django 将会拒绝进行事务提交或"
"者事务回滚，因为这样会破坏原子性。"

msgid ""
"A savepoint is a marker within a transaction that enables you to roll back "
"part of a transaction, rather than the full transaction. Savepoints are "
"available with the SQLite, PostgreSQL, Oracle, and MySQL (when using the "
"InnoDB storage engine) backends. Other backends provide the savepoint "
"functions, but they're empty operations -- they don't actually do anything."
msgstr ""

msgid ""
"Savepoints aren't especially useful if you are using autocommit, the default "
"behavior of Django. However, once you open a transaction with :func:"
"`atomic`, you build up a series of database operations awaiting a commit or "
"rollback. If you issue a rollback, the entire transaction is rolled back. "
"Savepoints provide the ability to perform a fine-grained rollback, rather "
"than the full rollback that would be performed by ``transaction.rollback()``."
msgstr ""

msgid ""
"When the :func:`atomic` decorator is nested, it creates a savepoint to allow "
"partial commit or rollback. You're strongly encouraged to use :func:`atomic` "
"rather than the functions described below, but they're still part of the "
"public API, and there's no plan to deprecate them."
msgstr ""

msgid ""
"Each of these functions takes a ``using`` argument which should be the name "
"of a database for which the behavior applies.  If no ``using`` argument is "
"provided then the ``\"default\"`` database is used."
msgstr ""

msgid ""
"Savepoints are controlled by three functions in :mod:`django.db.transaction`:"
msgstr ""

msgid ""
"Creates a new savepoint. This marks a point in the transaction that is known "
"to be in a \"good\" state. Returns the savepoint ID (``sid``)."
msgstr ""

msgid ""
"Releases savepoint ``sid``. The changes performed since the savepoint was "
"created become part of the transaction."
msgstr ""

msgid "Rolls back the transaction to savepoint ``sid``."
msgstr ""

msgid ""
"These functions do nothing if savepoints aren't supported or if the database "
"is in autocommit mode."
msgstr ""

msgid "In addition, there's a utility function:"
msgstr ""

msgid "Resets the counter used to generate unique savepoint IDs."
msgstr ""

msgid "The following example demonstrates the use of savepoints::"
msgstr ""

msgid ""
"Savepoints may be used to recover from a database error by performing a "
"partial rollback. If you're doing this inside an :func:`atomic` block, the "
"entire block will still be rolled back, because it doesn't know you've "
"handled the situation at a lower level! To prevent this, you can control the "
"rollback behavior with the following functions."
msgstr ""

msgid ""
"Setting the rollback flag to ``True`` forces a rollback when exiting the "
"innermost atomic block. This may be useful to trigger a rollback without "
"raising an exception."
msgstr ""

msgid ""
"Setting it to ``False`` prevents such a rollback. Before doing that, make "
"sure you've rolled back the transaction to a known-good savepoint within the "
"current atomic block! Otherwise you're breaking atomicity and data "
"corruption may occur."
msgstr ""

msgid "Database-specific notes"
msgstr ""

msgid "Savepoints in SQLite"
msgstr ""

msgid ""
"While SQLite supports savepoints, a flaw in the design of the :mod:`sqlite3` "
"module makes them hardly usable."
msgstr ""

msgid ""
"When autocommit is enabled, savepoints don't make sense. When it's "
"disabled, :mod:`sqlite3` commits implicitly before savepoint statements. (In "
"fact, it commits before any statement other than ``SELECT``, ``INSERT``, "
"``UPDATE``, ``DELETE`` and ``REPLACE``.) This bug has two consequences:"
msgstr ""

msgid ""
"The low level APIs for savepoints are only usable inside a transaction ie. "
"inside an :func:`atomic` block."
msgstr ""

msgid "It's impossible to use :func:`atomic` when autocommit is turned off."
msgstr ""

msgid "Transactions in MySQL"
msgstr ""

msgid ""
"If you're using MySQL, your tables may or may not support transactions; it "
"depends on your MySQL version and the table types you're using. (By \"table "
"types,\" we mean something like \"InnoDB\" or \"MyISAM\".) MySQL transaction "
"peculiarities are outside the scope of this article, but the MySQL site has "
"`information on MySQL transactions`_."
msgstr ""

msgid ""
"If your MySQL setup does *not* support transactions, then Django will always "
"function in autocommit mode: statements will be executed and committed as "
"soon as they're called. If your MySQL setup *does* support transactions, "
"Django will handle transactions as explained in this document."
msgstr ""

msgid "Handling exceptions within PostgreSQL transactions"
msgstr ""

msgid ""
"This section is relevant only if you're implementing your own transaction "
"management. This problem cannot occur in Django's default mode and :func:"
"`atomic` handles it automatically."
msgstr ""

msgid ""
"Inside a transaction, when a call to a PostgreSQL cursor raises an exception "
"(typically ``IntegrityError``), all subsequent SQL in the same transaction "
"will fail with the error \"current transaction is aborted, queries ignored "
"until end of transaction block\". While simple use of ``save()`` is unlikely "
"to raise an exception in PostgreSQL, there are more advanced usage patterns "
"which might, such as saving objects with unique fields, saving using the "
"force_insert/force_update flag, or invoking custom SQL."
msgstr ""

msgid "There are several ways to recover from this sort of error."
msgstr ""

msgid "Transaction rollback"
msgstr ""

msgid "The first option is to roll back the entire transaction. For example::"
msgstr ""

msgid ""
"Calling ``transaction.rollback()`` rolls back the entire transaction. Any "
"uncommitted database operations will be lost. In this example, the changes "
"made by ``a.save()`` would be lost, even though that operation raised no "
"error itself."
msgstr ""

msgid "Savepoint rollback"
msgstr ""

msgid ""
"You can use :ref:`savepoints <topics-db-transactions-savepoints>` to control "
"the extent of a rollback. Before performing a database operation that could "
"fail, you can set or update the savepoint; that way, if the operation fails, "
"you can roll back the single offending operation, rather than the entire "
"transaction. For example::"
msgstr ""

msgid ""
"In this example, ``a.save()`` will not be undone in the case where ``b."
"save()`` raises an exception."
msgstr ""

msgid "Sending email"
msgstr ""

msgid ""
"Although Python makes sending email relatively easy via the :mod:`smtplib` "
"module, Django provides a couple of light wrappers over it. These wrappers "
"are provided to make sending email extra quick, to make it easy to test "
"email sending during development, and to provide support for platforms that "
"can't use SMTP."
msgstr ""

msgid "The code lives in the ``django.core.mail`` module."
msgstr ""

msgid "In two lines::"
msgstr ""

msgid ""
"Mail is sent using the SMTP host and port specified in the :setting:"
"`EMAIL_HOST` and :setting:`EMAIL_PORT` settings. The :setting:"
"`EMAIL_HOST_USER` and :setting:`EMAIL_HOST_PASSWORD` settings, if set, are "
"used to authenticate to the SMTP server, and the :setting:`EMAIL_USE_TLS` "
"and :setting:`EMAIL_USE_SSL` settings control whether a secure connection is "
"used."
msgstr ""

msgid ""
"The character set of email sent with ``django.core.mail`` will be set to the "
"value of your :setting:`DEFAULT_CHARSET` setting."
msgstr ""

msgid "``send_mail()``"
msgstr ""

msgid ""
"The simplest way to send email is using ``django.core.mail.send_mail()``."
msgstr ""

msgid ""
"The ``subject``, ``message``, ``from_email`` and ``recipient_list`` "
"parameters are required."
msgstr ""

msgid "``subject``: A string."
msgstr ""

msgid "``message``: A string."
msgstr ""

msgid "``from_email``: A string."
msgstr ""

msgid ""
"``recipient_list``: A list of strings, each an email address. Each member of "
"``recipient_list`` will see the other recipients in the \"To:\" field of the "
"email message."
msgstr ""

msgid ""
"``fail_silently``: A boolean. When it's ``False``, ``send_mail()`` will "
"raise an :exc:`smtplib.SMTPException` if an error occurs. See the :mod:"
"`smtplib` docs for a list of possible exceptions, all of which are "
"subclasses of :exc:`~smtplib.SMTPException`."
msgstr ""

msgid ""
"``auth_user``: The optional username to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_USER` setting."
msgstr ""

msgid ""
"``auth_password``: The optional password to use to authenticate to the SMTP "
"server. If this isn't provided, Django will use the value of the :setting:"
"`EMAIL_HOST_PASSWORD` setting."
msgstr ""

msgid ""
"``connection``: The optional email backend to use to send the mail. If "
"unspecified, an instance of the default backend will be used. See the "
"documentation on :ref:`Email backends <topic-email-backends>` for more "
"details."
msgstr ""

msgid ""
"``html_message``: If ``html_message`` is provided, the resulting email will "
"be a :mimetype:`multipart/alternative` email with ``message`` as the :"
"mimetype:`text/plain` content type and ``html_message`` as the :mimetype:"
"`text/html` content type."
msgstr ""

msgid ""
"The return value will be the number of successfully delivered messages "
"(which can be ``0`` or ``1`` since it can only send one message)."
msgstr ""

msgid "``send_mass_mail()``"
msgstr ""

msgid ""
"``django.core.mail.send_mass_mail()`` is intended to handle mass emailing."
msgstr ""

msgid "``datatuple`` is a tuple in which each element is in this format::"
msgstr ""

msgid ""
"``fail_silently``, ``auth_user`` and ``auth_password`` have the same "
"functions as in :meth:`~django.core.mail.send_mail()`."
msgstr ""

msgid ""
"Each separate element of ``datatuple`` results in a separate email message. "
"As in :meth:`~django.core.mail.send_mail()`, recipients in the same "
"``recipient_list`` will all see the other addresses in the email messages' "
"\"To:\" field."
msgstr ""

msgid ""
"For example, the following code would send two different messages to two "
"different sets of recipients; however, only one connection to the mail "
"server would be opened::"
msgstr ""

msgid "The return value will be the number of successfully delivered messages."
msgstr ""

msgid "``send_mass_mail()`` vs. ``send_mail()``"
msgstr ""

msgid ""
"The main difference between :meth:`~django.core.mail.send_mass_mail()` and :"
"meth:`~django.core.mail.send_mail()` is that :meth:`~django.core.mail."
"send_mail()` opens a connection to the mail server each time it's executed, "
"while :meth:`~django.core.mail.send_mass_mail()` uses a single connection "
"for all of its messages. This makes :meth:`~django.core.mail."
"send_mass_mail()` slightly more efficient."
msgstr ""

msgid "``mail_admins()``"
msgstr ""

msgid ""
"``django.core.mail.mail_admins()`` is a shortcut for sending an email to the "
"site admins, as defined in the :setting:`ADMINS` setting."
msgstr ""

msgid ""
"``mail_admins()`` prefixes the subject with the value of the :setting:"
"`EMAIL_SUBJECT_PREFIX` setting, which is ``\"[Django] \"`` by default."
msgstr ""

msgid ""
"The \"From:\" header of the email will be the value of the :setting:"
"`SERVER_EMAIL` setting."
msgstr ""

msgid "This method exists for convenience and readability."
msgstr ""

msgid ""
"If ``html_message`` is provided, the resulting email will be a :mimetype:"
"`multipart/alternative` email with ``message`` as the :mimetype:`text/plain` "
"content type and ``html_message`` as the :mimetype:`text/html` content type."
msgstr ""

msgid "``mail_managers()``"
msgstr ""

msgid ""
"``django.core.mail.mail_managers()`` is just like ``mail_admins()``, except "
"it sends an email to the site managers, as defined in the :setting:"
"`MANAGERS` setting."
msgstr ""

msgid "Examples"
msgstr "示例"

msgid ""
"This sends a single email to john@example.com and jane@example.com, with "
"them both appearing in the \"To:\"::"
msgstr ""

msgid ""
"This sends a message to john@example.com and jane@example.com, with them "
"both receiving a separate email::"
msgstr ""

msgid "Preventing header injection"
msgstr ""

msgid ""
"`Header injection`_ is a security exploit in which an attacker inserts extra "
"email headers to control the \"To:\" and \"From:\" in email messages that "
"your scripts generate."
msgstr ""

msgid ""
"The Django email functions outlined above all protect against header "
"injection by forbidding newlines in header values. If any ``subject``, "
"``from_email`` or ``recipient_list`` contains a newline (in either Unix, "
"Windows or Mac style), the email function (e.g. :meth:`~django.core.mail."
"send_mail()`) will raise ``django.core.mail.BadHeaderError`` (a subclass of "
"``ValueError``) and, hence, will not send the email. It's your "
"responsibility to validate all data before passing it to the email functions."
msgstr ""

msgid ""
"If a ``message`` contains headers at the start of the string, the headers "
"will simply be printed as the first bit of the email message."
msgstr ""

msgid ""
"Here's an example view that takes a ``subject``, ``message`` and "
"``from_email`` from the request's POST data, sends that to admin@example.com "
"and redirects to \"/contact/thanks/\" when it's done::"
msgstr ""

msgid "The ``EmailMessage`` class"
msgstr ""

msgid ""
"Django's :meth:`~django.core.mail.send_mail()` and :meth:`~django.core.mail."
"send_mass_mail()` functions are actually thin wrappers that make use of the :"
"class:`~django.core.mail.EmailMessage` class."
msgstr ""

msgid ""
"Not all features of the :class:`~django.core.mail.EmailMessage` class are "
"available through the :meth:`~django.core.mail.send_mail()` and related "
"wrapper functions. If you wish to use advanced features, such as BCC'ed "
"recipients, file attachments, or multi-part email, you'll need to create :"
"class:`~django.core.mail.EmailMessage` instances directly."
msgstr ""

msgid ""
"This is a design feature. :meth:`~django.core.mail.send_mail()` and related "
"functions were originally the only interface Django provided. However, the "
"list of parameters they accepted was slowly growing over time. It made sense "
"to move to a more object-oriented design for email messages and retain the "
"original functions only for backwards compatibility."
msgstr ""

msgid ""
":class:`~django.core.mail.EmailMessage` is responsible for creating the "
"email message itself. The :ref:`email backend <topic-email-backends>` is "
"then responsible for sending the email."
msgstr ""

msgid ""
"For convenience, :class:`~django.core.mail.EmailMessage` provides a simple "
"``send()`` method for sending a single email. If you need to send multiple "
"messages, the email backend API :ref:`provides an alternative <topics-"
"sending-multiple-emails>`."
msgstr ""

msgid "``EmailMessage`` Objects"
msgstr ""

msgid ""
"The :class:`~django.core.mail.EmailMessage` class is initialized with the "
"following parameters (in the given order, if positional arguments are used). "
"All parameters are optional and can be set at any time prior to calling the "
"``send()`` method."
msgstr ""

msgid "``subject``: The subject line of the email."
msgstr ""

msgid "``body``: The body text. This should be a plain text message."
msgstr ""

msgid ""
"``from_email``: The sender's address. Both ``fred@example.com`` and ``Fred "
"<fred@example.com>`` forms are legal. If omitted, the :setting:"
"`DEFAULT_FROM_EMAIL` setting is used."
msgstr ""

msgid "``to``: A list or tuple of recipient addresses."
msgstr ""

msgid ""
"``bcc``: A list or tuple of addresses used in the \"Bcc\" header when "
"sending the email."
msgstr ""

msgid ""
"``connection``: An email backend instance. Use this parameter if you want to "
"use the same connection for multiple messages. If omitted, a new connection "
"is created when ``send()`` is called."
msgstr ""

msgid ""
"``attachments``: A list of attachments to put on the message. These can be "
"either :class:`~email.mime.base.MIMEBase` instances, or ``(filename, "
"content, mimetype)`` triples."
msgstr ""

msgid ""
"``headers``: A dictionary of extra headers to put on the message. The keys "
"are the header name, values are the header values. It's up to the caller to "
"ensure header names and values are in the correct format for an email "
"message. The corresponding attribute is ``extra_headers``."
msgstr ""

msgid ""
"``cc``: A list or tuple of recipient addresses used in the \"Cc\" header "
"when sending the email."
msgstr ""

msgid ""
"``reply_to``: A list or tuple of recipient addresses used in the \"Reply-To"
"\" header when sending the email."
msgstr ""

msgid "The class has the following methods:"
msgstr ""

msgid ""
"``send(fail_silently=False)`` sends the message. If a connection was "
"specified when the email was constructed, that connection will be used. "
"Otherwise, an instance of the default backend will be instantiated and used. "
"If the keyword argument ``fail_silently`` is ``True``, exceptions raised "
"while sending the message will be quashed. An empty list of recipients will "
"not raise an exception."
msgstr ""

msgid ""
"``message()`` constructs a ``django.core.mail.SafeMIMEText`` object (a "
"subclass of Python's :class:`~email.mime.text.MIMEText` class) or a ``django."
"core.mail.SafeMIMEMultipart`` object holding the message to be sent. If you "
"ever need to extend the :class:`~django.core.mail.EmailMessage` class, "
"you'll probably want to override this method to put the content you want "
"into the MIME object."
msgstr ""

msgid ""
"``recipients()`` returns a list of all the recipients of the message, "
"whether they're recorded in the ``to``, ``cc`` or ``bcc`` attributes. This "
"is another method you might need to override when subclassing, because the "
"SMTP server needs to be told the full list of recipients when the message is "
"sent. If you add another way to specify recipients in your class, they need "
"to be returned from this method as well."
msgstr ""

msgid ""
"``attach()`` creates a new file attachment and adds it to the message. There "
"are two ways to call ``attach()``:"
msgstr ""

msgid ""
"You can pass it a single argument that is a :class:`~email.mime.base."
"MIMEBase` instance. This will be inserted directly into the resulting "
"message."
msgstr ""

msgid ""
"Alternatively, you can pass ``attach()`` three arguments: ``filename``, "
"``content`` and ``mimetype``. ``filename`` is the name of the file "
"attachment as it will appear in the email, ``content`` is the data that will "
"be contained inside the attachment and ``mimetype`` is the optional MIME "
"type for the attachment. If you omit ``mimetype``, the MIME content type "
"will be guessed from the filename of the attachment."
msgstr ""

msgid ""
"If you specify a ``mimetype`` of ``message/rfc822``, it will also accept :"
"class:`django.core.mail.EmailMessage` and :py:class:`email.message.Message`."
msgstr ""

msgid ""
"For a ``mimetype`` starting with ``text/``, content is expected to be a "
"string. Binary data will be decoded using UTF-8, and if that fails, the MIME "
"type will be changed to ``application/octet-stream`` and the data will be "
"attached unchanged."
msgstr ""

msgid ""
"In addition, ``message/rfc822`` attachments will no longer be base64-encoded "
"in violation of :rfc:`2046#section-5.2.1`, which can cause issues with "
"displaying the attachments in `Evolution`__ and `Thunderbird`__."
msgstr ""

msgid ""
"``attach_file()`` creates a new attachment using a file from your "
"filesystem. Call it with the path of the file to attach and, optionally, the "
"MIME type to use for the attachment. If the MIME type is omitted, it will be "
"guessed from the filename. The simplest use would be::"
msgstr ""

msgid ""
"For MIME types starting with ``text/``, binary data is handled as in "
"``attach()``."
msgstr ""

msgid "Sending alternative content types"
msgstr ""

msgid ""
"It can be useful to include multiple versions of the content in an email; "
"the classic example is to send both text and HTML versions of a message. "
"With Django's email library, you can do this using the "
"``EmailMultiAlternatives`` class. This subclass of :class:`~django.core.mail."
"EmailMessage` has an ``attach_alternative()`` method for including extra "
"versions of the message body in the email. All the other methods (including "
"the class initialization) are inherited directly from :class:`~django.core."
"mail.EmailMessage`."
msgstr ""

msgid "To send a text and HTML combination, you could write::"
msgstr ""

msgid ""
"By default, the MIME type of the ``body`` parameter in an :class:`~django."
"core.mail.EmailMessage` is ``\"text/plain\"``. It is good practice to leave "
"this alone, because it guarantees that any recipient will be able to read "
"the email, regardless of their mail client. However, if you are confident "
"that your recipients can handle an alternative content type, you can use the "
"``content_subtype`` attribute on the :class:`~django.core.mail.EmailMessage` "
"class to change the main content type. The major type will always be ``\"text"
"\"``, but you can change the subtype. For example::"
msgstr ""

msgid "Email backends"
msgstr ""

msgid "The actual sending of an email is handled by the email backend."
msgstr ""

msgid "The email backend class has the following methods:"
msgstr ""

msgid "``open()`` instantiates a long-lived email-sending connection."
msgstr ""

msgid "``close()`` closes the current email-sending connection."
msgstr ""

msgid ""
"``send_messages(email_messages)`` sends a list of :class:`~django.core.mail."
"EmailMessage` objects. If the connection is not open, this call will "
"implicitly open the connection, and close the connection afterwards. If the "
"connection is already open, it will be left open after mail has been sent."
msgstr ""

msgid ""
"It can also be used as a context manager, which will automatically call "
"``open()`` and ``close()`` as needed::"
msgstr ""

msgid "Obtaining an instance of an email backend"
msgstr ""

msgid ""
"The :meth:`get_connection` function in ``django.core.mail`` returns an "
"instance of the email backend that you can use."
msgstr ""

msgid ""
"By default, a call to ``get_connection()`` will return an instance of the "
"email backend specified in :setting:`EMAIL_BACKEND`. If you specify the "
"``backend`` argument, an instance of that backend will be instantiated."
msgstr ""

msgid ""
"The ``fail_silently`` argument controls how the backend should handle "
"errors. If ``fail_silently`` is True, exceptions during the email sending "
"process will be silently ignored."
msgstr ""

msgid ""
"All other arguments are passed directly to the constructor of the email "
"backend."
msgstr ""

msgid ""
"Django ships with several email sending backends. With the exception of the "
"SMTP backend (which is the default), these backends are only useful during "
"testing and development. If you have special email sending requirements, you "
"can :ref:`write your own email backend <topic-custom-email-backend>`."
msgstr ""

msgid "SMTP backend"
msgstr ""

msgid "This is the default backend. Email will be sent through a SMTP server."
msgstr ""

msgid ""
"The value for each argument is retrieved from the matching setting if the "
"argument is ``None``:"
msgstr ""

msgid "``host``: :setting:`EMAIL_HOST`"
msgstr ""

msgid "``port``: :setting:`EMAIL_PORT`"
msgstr ""

msgid "``username``: :setting:`EMAIL_HOST_USER`"
msgstr ""

msgid "``password``: :setting:`EMAIL_HOST_PASSWORD`"
msgstr ""

msgid "``use_tls``: :setting:`EMAIL_USE_TLS`"
msgstr ""

msgid "``use_ssl``: :setting:`EMAIL_USE_SSL`"
msgstr ""

msgid "``timeout``: :setting:`EMAIL_TIMEOUT`"
msgstr ""

msgid "``ssl_keyfile``: :setting:`EMAIL_SSL_KEYFILE`"
msgstr ""

msgid "``ssl_certfile``: :setting:`EMAIL_SSL_CERTFILE`"
msgstr ""

msgid ""
"The SMTP backend is the default configuration inherited by Django. If you "
"want to specify it explicitly, put the following in your settings::"
msgstr ""

msgid ""
"If unspecified, the default ``timeout`` will be the one provided by :func:"
"`socket.getdefaulttimeout()`, which defaults to ``None`` (no timeout)."
msgstr ""

msgid "Console backend"
msgstr ""

msgid ""
"Instead of sending out real emails the console backend just writes the "
"emails that would be sent to the standard output. By default, the console "
"backend writes to ``stdout``. You can use a different stream-like object by "
"providing the ``stream`` keyword argument when constructing the connection."
msgstr ""

msgid "To specify this backend, put the following in your settings::"
msgstr ""

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development."
msgstr ""

msgid "File backend"
msgstr ""

msgid ""
"The file backend writes emails to a file. A new file is created for each new "
"session that is opened on this backend. The directory to which the files are "
"written is either taken from the :setting:`EMAIL_FILE_PATH` setting or from "
"the ``file_path`` keyword when creating a connection with :meth:`~django."
"core.mail.get_connection`."
msgstr ""

msgid "In-memory backend"
msgstr ""

msgid ""
"The ``'locmem'`` backend stores messages in a special attribute of the "
"``django.core.mail`` module. The ``outbox`` attribute is created when the "
"first message is sent. It's a list with an :class:`~django.core.mail."
"EmailMessage` instance for each message that would be sent."
msgstr ""

msgid ""
"This backend is not intended for use in production -- it is provided as a "
"convenience that can be used during development and testing."
msgstr ""

msgid "Dummy backend"
msgstr ""

msgid ""
"As the name suggests the dummy backend does nothing with your messages. To "
"specify this backend, put the following in your settings::"
msgstr ""

msgid "Defining a custom email backend"
msgstr ""

msgid ""
"If you need to change how emails are sent you can write your own email "
"backend. The :setting:`EMAIL_BACKEND` setting in your settings file is then "
"the Python import path for your backend class."
msgstr ""

msgid ""
"Custom email backends should subclass ``BaseEmailBackend`` that is located "
"in the ``django.core.mail.backends.base`` module. A custom email backend "
"must implement the ``send_messages(email_messages)`` method. This method "
"receives a list of :class:`~django.core.mail.EmailMessage` instances and "
"returns the number of successfully delivered messages. If your backend has "
"any concept of a persistent session or connection, you should also implement "
"the ``open()`` and ``close()`` methods. Refer to ``smtp.EmailBackend`` for a "
"reference implementation."
msgstr ""

msgid "Sending multiple emails"
msgstr ""

msgid ""
"Establishing and closing an SMTP connection (or any other network "
"connection, for that matter) is an expensive process. If you have a lot of "
"emails to send, it makes sense to reuse an SMTP connection, rather than "
"creating and destroying a connection every time you want to send an email."
msgstr ""

msgid "There are two ways you tell an email backend to reuse a connection."
msgstr ""

msgid ""
"Firstly, you can use the ``send_messages()`` method. ``send_messages()`` "
"takes a list of :class:`~django.core.mail.EmailMessage` instances (or "
"subclasses), and sends them all using a single connection."
msgstr ""

msgid ""
"For example, if you have a function called ``get_notification_email()`` that "
"returns a list of :class:`~django.core.mail.EmailMessage` objects "
"representing some periodic email you wish to send out, you could send these "
"emails using a single call to send_messages::"
msgstr ""

msgid ""
"In this example, the call to ``send_messages()`` opens a connection on the "
"backend, sends the list of messages, and then closes the connection again."
msgstr ""

msgid ""
"The second approach is to use the ``open()`` and ``close()`` methods on the "
"email backend to manually control the connection. ``send_messages()`` will "
"not manually open or close the connection if it is already open, so if you "
"manually open the connection, you can control when it is closed. For "
"example::"
msgstr ""

msgid "Configuring email for development"
msgstr ""

msgid ""
"There are times when you do not want Django to send emails at all. For "
"example, while developing a website, you probably don't want to send out "
"thousands of emails -- but you may want to validate that emails will be sent "
"to the right people under the right conditions, and that those emails will "
"contain the correct content."
msgstr ""

msgid ""
"The easiest way to configure email for local development is to use the :ref:"
"`console <topic-email-console-backend>` email backend. This backend "
"redirects all email to stdout, allowing you to inspect the content of mail."
msgstr ""

msgid ""
"The :ref:`file <topic-email-file-backend>` email backend can also be useful "
"during development -- this backend dumps the contents of every SMTP "
"connection to a file that can be inspected at your leisure."
msgstr ""

msgid ""
"Another approach is to use a \"dumb\" SMTP server that receives the emails "
"locally and displays them to the terminal, but does not actually send "
"anything. Python has a built-in way to accomplish this with a single "
"command::"
msgstr ""

msgid ""
"This command will start a simple SMTP server listening on port 1025 of "
"localhost. This server simply prints to standard output all email headers "
"and the email body. You then only need to set the :setting:`EMAIL_HOST` and :"
"setting:`EMAIL_PORT` accordingly. For a more detailed discussion of SMTP "
"server options, see the Python documentation for the :mod:`smtpd` module."
msgstr ""

msgid ""
"For information about unit-testing the sending of emails in your "
"application, see the :ref:`topics-testing-email` section of the testing "
"documentation."
msgstr ""

msgid "External packages"
msgstr ""

msgid ""
"Django ships with a variety of extra, optional tools that solve common "
"problems (``contrib.*``). For easier maintenance and to trim the size of the "
"codebase, a few of those applications have been moved out to separate "
"projects."
msgstr ""

msgid "Localflavor"
msgstr ""

msgid ""
"``django-localflavor`` is a collection of utilities for particular countries "
"and cultures."
msgstr ""

msgid "`GitHub <https://github.com/django/django-localflavor>`__"
msgstr ""

msgid "`Documentation <https://django-localflavor.readthedocs.io/>`__"
msgstr ""

msgid "`PyPI <https://pypi.org/project/django-localflavor/>`__"
msgstr ""

msgid "Comments"
msgstr "注释(Comments)"

msgid ""
"``django-contrib-comments`` can be used to attach comments to any model, so "
"you can use it for comments on blog entries, photos, book chapters, or "
"anything else. Most users will be better served with a custom solution, or a "
"hosted product like Disqus."
msgstr ""

msgid "`GitHub <https://github.com/django/django-contrib-comments>`__"
msgstr ""

msgid "`Documentation <https://django-contrib-comments.readthedocs.io/>`__"
msgstr ""

msgid "`PyPI <https://pypi.org/project/django-contrib-comments/>`__"
msgstr ""

msgid "Formtools"
msgstr ""

msgid ""
"``django-formtools`` is a collection of assorted utilities to work with "
"forms."
msgstr ""

msgid "`GitHub <https://github.com/django/django-formtools>`__"
msgstr ""

msgid "`Documentation <https://django-formtools.readthedocs.io/>`__"
msgstr ""

msgid "`PyPI <https://pypi.org/project/django-formtools/>`__"
msgstr ""

msgid "Managing files"
msgstr ""

msgid ""
"This document describes Django's file access APIs for files such as those "
"uploaded by a user. The lower level APIs are general enough that you could "
"use them for other purposes. If you want to handle \"static files\" (JS, "
"CSS, etc.), see :doc:`/howto/static-files/index`."
msgstr ""

msgid ""
"By default, Django stores files locally, using the :setting:`MEDIA_ROOT` "
"and :setting:`MEDIA_URL` settings. The examples below assume that you're "
"using these defaults."
msgstr ""

msgid ""
"However, Django provides ways to write custom `file storage systems`_ that "
"allow you to completely customize where and how Django stores files. The "
"second half of this document describes how these storage systems work."
msgstr ""

msgid "Using files in models"
msgstr ""

msgid ""
"When you use a :class:`~django.db.models.FileField` or :class:`~django.db."
"models.ImageField`, Django provides a set of APIs you can use to deal with "
"that file."
msgstr ""

msgid ""
"Consider the following model, using an :class:`~django.db.models.ImageField` "
"to store a photo::"
msgstr ""

msgid ""
"Any ``Car`` instance will have a ``photo`` attribute that you can use to get "
"at the details of the attached photo::"
msgstr ""

msgid ""
"This object -- ``car.photo`` in the example -- is a ``File`` object, which "
"means it has all the methods and attributes described below."
msgstr ""

msgid ""
"The file is saved as part of saving the model in the database, so the actual "
"file name used on disk cannot be relied on until after the model has been "
"saved."
msgstr ""

msgid ""
"For example, you can change the file name by setting the file's :attr:"
"`~django.core.files.File.name` to a path relative to the file storage's "
"location (:setting:`MEDIA_ROOT` if you are using the default :class:`~django."
"core.files.storage.FileSystemStorage`)::"
msgstr ""

msgid "The ``File`` object"
msgstr ""

msgid ""
"Internally, Django uses a :class:`django.core.files.File` instance any time "
"it needs to represent a file."
msgstr ""

msgid ""
"Most of the time you'll simply use a ``File`` that Django's given you (i.e. "
"a file attached to a model as above, or perhaps an uploaded file)."
msgstr ""

msgid ""
"If you need to construct a ``File`` yourself, the easiest way is to create "
"one using a Python built-in ``file`` object::"
msgstr ""

msgid ""
"Now you can use any of the documented attributes and methods of the :class:"
"`~django.core.files.File` class."
msgstr ""

msgid ""
"Be aware that files created in this way are not automatically closed. The "
"following approach may be used to close files automatically::"
msgstr ""

msgid ""
"Closing files is especially important when accessing file fields in a loop "
"over a large number of objects. If files are not manually closed after "
"accessing them, the risk of running out of file descriptors may arise. This "
"may lead to the following error::"
msgstr ""

msgid "File storage"
msgstr ""

msgid ""
"Behind the scenes, Django delegates decisions about how and where to store "
"files to a file storage system. This is the object that actually understands "
"things like file systems, opening and reading files, etc."
msgstr ""

msgid ""
"Django's default file storage is given by the :setting:"
"`DEFAULT_FILE_STORAGE` setting; if you don't explicitly provide a storage "
"system, this is the one that will be used."
msgstr ""

msgid ""
"See below for details of the built-in default file storage system, and see :"
"doc:`/howto/custom-file-storage` for information on writing your own file "
"storage system."
msgstr ""

msgid "Storage objects"
msgstr ""

msgid ""
"Though most of the time you'll want to use a ``File`` object (which "
"delegates to the proper storage for that file), you can use file storage "
"systems directly. You can create an instance of some custom file storage "
"class, or -- often more useful -- you can use the global default storage "
"system::"
msgstr ""

msgid "See :doc:`/ref/files/storage` for the file storage API."
msgstr ""

msgid "The built-in filesystem storage class"
msgstr ""

msgid ""
"Django ships with a :class:`django.core.files.storage.FileSystemStorage` "
"class which implements basic local filesystem file storage."
msgstr ""

msgid ""
"For example, the following code will store uploaded files under ``/media/"
"photos`` regardless of what your :setting:`MEDIA_ROOT` setting is::"
msgstr ""

msgid ""
":doc:`Custom storage systems </howto/custom-file-storage>` work the same "
"way: you can pass them in as the ``storage`` argument to a :class:`~django."
"db.models.FileField`."
msgstr ""

msgid "Formsets"
msgstr "表单集"

msgid ""
"A formset is a layer of abstraction to work with multiple forms on the same "
"page. It can be best compared to a data grid. Let's say you have the "
"following form::"
msgstr ""
"formset是一个抽象层，它可以在同一页面上处理多个表单的。它最适合被比喻成网格数"
"据。我们假设您有以下表单::"

msgid ""
"You might want to allow the user to create several articles at once. To "
"create a formset out of an ``ArticleForm`` you would do::"
msgstr ""
"您可能想允许用户一次创建多篇文章。 要创建一个 ``ArticleForm`` 的formset，您可"
"以这样做::"

msgid ""
"You now have created a formset named ``ArticleFormSet``. The formset gives "
"you the ability to iterate over the forms in the formset and display them as "
"you would with a regular form::"
msgstr ""
"现在您已经创建了一个名为 ``ArticleFormSet`` 的表单集。它能让你遍历formset中的"
"表单，并像使用常规表单一样显示它们::"

msgid ""
"As you can see it only displayed one empty form. The number of empty forms "
"that is displayed is controlled by the ``extra`` parameter. By default, :"
"func:`~django.forms.formsets.formset_factory` defines one extra form; the "
"following example will display two blank forms::"
msgstr ""
"如您所见，它只显示了一个空的表单。参数 ``extra`` 控制显示表单的数量。:func:"
"`~django.forms.formsets.formset_factory` 默认只定义一个表单；下面的例子将展示"
"两个空白表单::"

msgid ""
"Iterating over the ``formset`` will render the forms in the order they were "
"created. You can change this order by providing an alternate implementation "
"for the ``__iter__()`` method."
msgstr ""
"通过遍历 ``formset`` ，然后按他们创建的顺序渲染表单。您也可以通过替换 "
"``__iter__()`` 方法来改变顺序。"

msgid ""
"Formsets can also be indexed into, which returns the corresponding form. If "
"you override ``__iter__``, you will need to also override ``__getitem__`` to "
"have matching behavior."
msgstr ""
"表单集也可以被索引然后返回对应的表单。如果您已经覆盖了 ``__iter__`` ，则还需"
"覆盖  ``__getitem__`` 让它具备匹配行为。"

msgid "Using initial data with a formset"
msgstr "使用formset的初始数据"

msgid ""
"Initial data is what drives the main usability of a formset. As shown above "
"you can define the number of extra forms. What this means is that you are "
"telling the formset how many additional forms to show in addition to the "
"number of forms it generates from the initial data. Let's take a look at an "
"example::"
msgstr ""
"初始数据驱动着formset的主要能力。如上所示，您可以定义额外表单的数量。也就是"
"说，您告诉formset，除了要生成初始数据所需数量的表单外，还要显示多少额外的表"
"单。我们来看下例子::"

msgid ""
"There are now a total of three forms showing above. One for the initial data "
"that was passed in and two extra forms. Also note that we are passing in a "
"list of dictionaries as the initial data."
msgstr ""
"现在上面显示了三张表单。一张是传了初始数据的，另外两张是额外的。需要注意的"
"是，我们通过传递一个字典列表来作为初始数据。"

msgid ""
"If you use an ``initial`` for displaying a formset, you should pass the same "
"``initial`` when processing that formset's submission so that the formset "
"can detect which forms were changed by the user. For example, you might have "
"something like: ``ArticleFormSet(request.POST, initial=[...])``."
msgstr ""
"如果您使用了 ``initial`` 来显示formset，那么您需要在处理formset提交时传入相同"
"的 ``initial`` ，以便formset检测用户更改了哪些表单。例如，您可能有这样的： "
"``ArticleFormSet(request.POST, initial=[...])`` 。"

msgid ""
":ref:`Creating formsets from models with model formsets <model-formsets>`."
msgstr ":ref:`创建模型表单集 <model-formsets>`。"

msgid "Limiting the maximum number of forms"
msgstr "限制表单的最大数量"

msgid ""
"The ``max_num`` parameter to :func:`~django.forms.formsets.formset_factory` "
"gives you the ability to limit the number of forms the formset will display::"
msgstr ""
":func:`~django.forms.formsets.formset_factory` 的参数 ``max_num`` 让您可以控"
"制表单集将要显示的表单数量::"

msgid ""
"If the value of ``max_num`` is greater than the number of existing items in "
"the initial data, up to ``extra`` additional blank forms will be added to "
"the formset, so long as the total number of forms does not exceed "
"``max_num``. For example, if ``extra=2`` and ``max_num=2`` and the formset "
"is initialized with one ``initial`` item, a form for the initial item and "
"one blank form will be displayed."
msgstr ""
"如果 ``max_num`` 的值大于初始数据现有数量，那空白表单可显示的数量取决于 "
"``extra`` 的数量，只要总表单数不超过 ``max_num`` 。例如， ``extra=2`` ， "
"``max_num=2`` 并且formset有一个 ``initial`` 初始化项，则会显示一张初始化表单"
"和一张空白表单。"

msgid ""
"If the number of items in the initial data exceeds ``max_num``, all initial "
"data forms will be displayed regardless of the value of ``max_num`` and no "
"extra forms will be displayed. For example, if ``extra=3`` and ``max_num=1`` "
"and the formset is initialized with two initial items, two forms with the "
"initial data will be displayed."
msgstr ""
"如果初始数据项的数量超过 ``max_num`` ，那么 ``max_num`` 的值会被无视，所有初"
"始数据表单都会显示，并且也不会有额外的表单显示。例如，假设 ``extra=3`` ， "
"``max_num=1`` 并且formset有两个初始化项，那么只会显示两张有初始化数据的表单。"

msgid ""
"A ``max_num`` value of ``None`` (the default) puts a high limit on the "
"number of forms displayed (1000). In practice this is equivalent to no limit."
msgstr ""
"``max_num`` 的值 ``None`` (默认值)，它限制最多显示(1000)张表单，其实这相当于"
"没有限制。"

msgid ""
"By default, ``max_num`` only affects how many forms are displayed and does "
"not affect validation.  If ``validate_max=True`` is passed to the :func:"
"`~django.forms.formsets.formset_factory`, then ``max_num`` will affect "
"validation.  See :ref:`validate_max`."
msgstr ""
"``max_num`` 默认只影响显示多少数量的表单而不影响验证。如果将 "
"``validate_max=True`` 传给 :func:`~django.forms.formsets.formset_factory`，那"
"么 ``max_num`` 将会影响验证。参见 :ref:`validate_max` 。"

msgid "Formset validation"
msgstr "Formset验证"

msgid ""
"Validation with a formset is almost identical to a regular ``Form``. There "
"is an ``is_valid`` method on the formset to provide a convenient way to "
"validate all forms in the formset::"
msgstr ""
"formset的验证与常规 ``Form`` 几乎相同。formset提供了一个 ``is_valid`` 方法以"
"便验证formset内所有表单::"

msgid ""
"We passed in no data to the formset which is resulting in a valid form. The "
"formset is smart enough to ignore extra forms that were not changed. If we "
"provide an invalid article::"
msgstr ""
"我们传了空数据给formset，并被给了一个有效的结果。formset足够聪明去忽略那些没"
"有变动的额外表单。如果我们提供了一篇无效的文章::"

msgid ""
"As we can see, ``formset.errors`` is a list whose entries correspond to the "
"forms in the formset. Validation was performed for each of the two forms, "
"and the expected error message appears for the second item."
msgstr ""
"正如我们看到的，``formset.errors`` 是一张列表，它的内容对应着formset中表单。"
"两张表都进行了验证，并且第二项中出现了预期的错误消息。"

msgid ""
"Just like when using a normal ``Form``, each field in a formset's forms may "
"include HTML attributes such as ``maxlength`` for browser validation. "
"However, form fields of formsets won't include the ``required`` attribute as "
"that validation may be incorrect when adding and deleting forms."
msgstr ""
"和使用普通 ``Form`` 一样，formset表单中的每个字段都可能包含HTML属性，例如用于"
"浏览器验证的 ``maxlength`` 。但是由于表单添加、删除的时候会影响属性 "
"``required`` 的验证，表单集中的表单不会包含此属性。"

msgid ""
"To check how many errors there are in the formset, we can use the "
"``total_error_count`` method::"
msgstr "我们可以使用 ``total_error_count`` 方法来检查formset中有多少错误::"

msgid ""
"We can also check if form data differs from the initial data (i.e. the form "
"was sent without any data)::"
msgstr "我们还可以检查表单数据与初始数据的区别(即表单没有发送任何数据)::"

msgid "Understanding the ``ManagementForm``"
msgstr "理解 ``ManagementForm`` "

msgid ""
"You may have noticed the additional data (``form-TOTAL_FORMS``, ``form-"
"INITIAL_FORMS`` and ``form-MAX_NUM_FORMS``) that was required in the "
"formset's data above. This data is required for the ``ManagementForm``. This "
"form is used by the formset to manage the collection of forms contained in "
"the formset. If you don't provide this management data, an exception will be "
"raised::"
msgstr ""
"您可能已经注意到上面formset中有些必要的数据( ``form-TOTAL_FORMS`` ,  ``form-"
"INITIAL_FORMS`` 以及 ``form-MAX_NUM_FORMS`` )。这些数据是 ``ManagementForm`` "
"所必须的。它被formset用来管理formset中所有表单。如果你不提供这些管理数据，则"
"会引发一场::"

msgid ""
"It is used to keep track of how many form instances are being displayed. If "
"you are adding new forms via JavaScript, you should increment the count "
"fields in this form as well. On the other hand, if you are using JavaScript "
"to allow deletion of existing objects, then you need to ensure the ones "
"being removed are properly marked for deletion by including ``form-#-"
"DELETE`` in the ``POST`` data. It is expected that all forms are present in "
"the ``POST`` data regardless."
msgstr ""
"它被用来跟踪显示了多少个表单实例。如果您通过JavaScript添加新表单，那您同样需"
"要增加相应内容到那些数量字段中，另一方面，如果您允许通过JavaScript来删除已存"
"在对象，那么您需确认被移除的对象已经被标记在 ``form-#-DELETE`` 中并被放到 "
"``POST`` 内。无论如何，所有表单都要确保在 ``POST`` 数据中。"

msgid ""
"The management form is available as an attribute of the formset itself. When "
"rendering a formset in a template, you can include all the management data "
"by rendering ``{{ my_formset.management_form }}`` (substituting the name of "
"your formset as appropriate)."
msgstr ""
"管理表单以formset的一项属性而存在。在模板中渲染formset时，你可以使用 "
"``{{ my_formset.management_form }}``  (将my_formset替换为自己的formset名称)渲"
"染出所有管理表单的数据。"

msgid "``total_form_count`` and ``initial_form_count``"
msgstr " ``total_form_count`` 和 ``initial_form_count`` "

msgid ""
"``BaseFormSet`` has a couple of methods that are closely related to the "
"``ManagementForm``, ``total_form_count`` and ``initial_form_count``."
msgstr ""
"``BaseFormSet`` 有一对与 ``ManagementForm`` 密切相关的方法， "
"``total_form_count``  和  ``initial_form_count`` 。"

msgid ""
"``total_form_count`` returns the total number of forms in this formset. "
"``initial_form_count`` returns the number of forms in the formset that were "
"pre-filled, and is also used to determine how many forms are required. You "
"will probably never need to override either of these methods, so please be "
"sure you understand what they do before doing so."
msgstr ""
"``total_form_count`` 返回该formset内表单的总和。 ``initial_form_count`` 返回"
"该formset内预填充的表单数量，同时用于定义需要多少表单。你可能永远不会重写这两"
"个方法，因此在使用之前请理解它们的用途。"

msgid "``empty_form``"
msgstr "``empty_form``"

msgid ""
"``BaseFormSet`` provides an additional attribute ``empty_form`` which "
"returns a form instance with a prefix of ``__prefix__`` for easier use in "
"dynamic forms with JavaScript."
msgstr ""
"``BaseFormSet``有一项属性``empty_form``，它返回一个以``__prefix__`` 为前缀的"
"表单实例，这是为了方便在动态表单中配合JavaScript使用。"

msgid "Custom formset validation"
msgstr "自定义formset验证"

msgid ""
"A formset has a ``clean`` method similar to the one on a ``Form`` class. "
"This is where you define your own validation that works at the formset "
"level::"
msgstr ""
"formset有个与 ``Form`` 类相似的 ``clean`` 方法。您可以在这里定义自己的验证规"
"则，它会在formset层面进行验证。"

msgid ""
"The formset ``clean`` method is called after all the ``Form.clean`` methods "
"have been called. The errors will be found using the ``non_form_errors()`` "
"method on the formset."
msgstr ""
"formset的 ``clean`` 方法会在所有 ``Form.clean`` 方法调用完之后被调用。可以使"
"用formset的 ``non_form_errors()`` 方法来查看错误信息。"

msgid "Validating the number of forms in a formset"
msgstr "验证formset中表单的数量"

msgid ""
"Django provides a couple ways to validate the minimum or maximum number of "
"submitted forms. Applications which need more customizable validation of the "
"number of forms should use custom formset validation."
msgstr ""
"Django提供了一对方法来验证已提交的表单的最小和最大数量。如果要对应用程序进行"
"更多的可定制验证，那需要使用自定义formset验证。"

msgid "``validate_max``"
msgstr "``validate_max``"

msgid ""
"If ``validate_max=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is less than or equal to "
"``max_num``."
msgstr ""
"如果方法 :func:`~django.forms.formsets.formset_factory` 有设置参数 "
"``validate_max=True`` ，验证还会检查数据集内表单的数量，减去那些被标记为删除"
"的表单数量，剩余数量需小于等于 ``max_num`` 。"

msgid ""
"``validate_max=True`` validates against ``max_num`` strictly even if "
"``max_num`` was exceeded because the amount of initial data supplied was "
"excessive."
msgstr ""
"即使因为提供的初始数据量过大而超过了 ``max_num`` 所定义的，"
"``validate_max=True`` 还是会严格针对 ``max_num`` 进行验证。"

msgid ""
"Regardless of ``validate_max``, if the number of forms in a data set exceeds "
"``max_num`` by more than 1000, then the form will fail to validate as if "
"``validate_max`` were set, and additionally only the first 1000 forms above "
"``max_num`` will be validated.  The remainder will be truncated entirely.  "
"This is to protect against memory exhaustion attacks using forged POST "
"requests."
msgstr ""
"如果数据集中表单的数量超过了 ``max_num`` 定义的且大于1000，那么即使你设置了 "
"``validate_max`` ，这个验证也会无效，另外只有在 ``max_num`` 内的前1000张表单"
"会被验证。其余部分将被完全截断。这是为了抵御使用伪造POST请求的内存耗尽攻击。"

msgid "``validate_min``"
msgstr "``validate_min``"

msgid ""
"If ``validate_min=True`` is passed to :func:`~django.forms.formsets."
"formset_factory`, validation will also check that the number of forms in the "
"data set, minus those marked for deletion, is greater than or equal to "
"``min_num``."
msgstr ""
"如果方法 :func:`~django.forms.formsets.formset_factory` 有传参数 "
"``validate_min=True`` ，还会验证数据集中的表单的数量减去那些被标记为删除的表"
"单数量是否大于或等于 ``min_num`` 定义的数量。"

msgid "Dealing with ordering and deletion of forms"
msgstr "处理表单的排序和删除"

msgid ""
"The :func:`~django.forms.formsets.formset_factory` provides two optional "
"parameters ``can_order`` and ``can_delete`` to help with ordering of forms "
"in formsets and deletion of forms from a formset."
msgstr ""
"方法 :func:`~django.forms.formsets.formset_factory` 提供了两个可选参数 "
"``can_order`` 和 ``can_delete`` 来协助处理formset中表单的排序和删除。"

msgid "``can_order``"
msgstr "``can_order``"

msgid "Default: ``False``"
msgstr "默认值： ``False``"

msgid "Lets you create a formset with the ability to order::"
msgstr "让你创建能排序的formset::"

msgid ""
"This adds an additional field to each form. This new field is named "
"``ORDER`` and is an ``forms.IntegerField``. For the forms that came from the "
"initial data it automatically assigned them a numeric value. Let's look at "
"what will happen when the user changes these values::"
msgstr ""
"它给每个表单添加了一个额外的字段。这是一个名称是 ``ORDER`` 且类型为 ``forms."
"IntegerField`` 的字段。对于初始数据中的表单，它会自动为它们分配一个数值。我们"
"来看看当用户更改这些值时会发生什么情况::"

msgid "``can_delete``"
msgstr "``can_delete``"

msgid ""
"Lets you create a formset with the ability to select forms for deletion::"
msgstr "让你创建能删除指定表单的formset::"

msgid ""
"Similar to ``can_order`` this adds a new field to each form named ``DELETE`` "
"and is a ``forms.BooleanField``. When data comes through marking any of the "
"delete fields you can access them with ``deleted_forms``::"
msgstr ""
"和参数 ``can_order`` 类似，它创建了一个名为 ``DELETE`` 且类型是 ``forms."
"BooleanField`` 的字段。您可以使用 ``deleted_forms`` 访问那些被标记为删除的数"
"据。"

msgid ""
"If you are using a :class:`ModelFormSet<django.forms.models."
"BaseModelFormSet>`, model instances for deleted forms will be deleted when "
"you call ``formset.save()``."
msgstr ""
"如果你使用 :class:`ModelFormSet<django.forms.models.BaseModelFormSet>` ，那些"
"标记为删除的表单模型实例会在调用 ``formset.save()`` 时被删除。"

msgid ""
"If you call ``formset.save(commit=False)``, objects will not be deleted "
"automatically.  You'll need to call ``delete()`` on each of the :attr:"
"`formset.deleted_objects <django.forms.models.BaseModelFormSet."
"deleted_objects>` to actually delete them::"
msgstr ""
"如果您调用调用 ``formset.save(commit=False)`` ，对象将不会被自动删除。您需要"
"在每个 :attr:`formset.deleted_objects <django.forms.models.BaseModelFormSet."
"deleted_objects>`  上调用 ``delete()`` 来真正删除他们::"

msgid ""
"On the other hand, if you are using a plain ``FormSet``, it's up to you to "
"handle ``formset.deleted_forms``, perhaps in your formset's ``save()`` "
"method, as there's no general notion of what it means to delete a form."
msgstr ""
"另一方面，如果您使用的是普通的 ``FormSet`` ，那需要您自己去处理 ``formset."
"deleted_forms`` ，可能写在formset的 ``save()`` 方法中，因为对于阐述删除一张表"
"单还没有一个通用的概念。"

msgid "Adding additional fields to a formset"
msgstr "给一个formset添加额外字段"

msgid ""
"If you need to add additional fields to the formset this can be easily "
"accomplished. The formset base class provides an ``add_fields`` method. You "
"can simply override this method to add your own fields or even redefine the "
"default fields/attributes of the order and deletion fields::"
msgstr ""
"如果你想往formset中添加额外的字段，这相当简单。formset的基类提供了一个 "
"``add_fields`` 的方法。您可以简单的通过覆盖这个方法来添加您自己的字段，甚至可"
"以重新定义默认字段或者那些排序的和被标记为删除的字段的属性。"

msgid "Passing custom parameters to formset forms"
msgstr "传递自定义参数到formset表单"

msgid ""
"Sometimes your form class takes custom parameters, like ``MyArticleForm``. "
"You can pass this parameter when instantiating the formset::"
msgstr ""
"有时候您的表单类需要自定义参数，比如 ``MyArticleForm`` 。您可以在formset实例"
"化的时候传递这个参数::"

msgid ""
"The ``form_kwargs`` may also depend on the specific form instance. The "
"formset base class provides a ``get_form_kwargs`` method. The method takes a "
"single argument - the index of the form in the formset. The index is "
"``None`` for the :ref:`empty_form`::"
msgstr ""
"``form_kwargs`` 也可能依赖于特定的表单实例。formset基类提供了一个 "
"``get_form_kwargs`` 方法。该方法只接收一个参数——formset中表单的序列。对于 :"
"ref:`empty_form` ，它的序列是 ``None`` ::"

msgid "Customizing a formset's prefix"
msgstr "自定义formset的前缀"

msgid ""
"In the rendered HTML, formsets include a prefix on each field's name. By "
"default, the prefix is ``'form'``, but it can be customized using the "
"formset's ``prefix`` argument."
msgstr ""
"在已渲染的HTML页面中，表单集中的每个字段都包含一个前缀。这个前缀默认是 "
"``'form'`` ，但可以使用formset的 ``prefix`` 参数来自定义。"

msgid "For example, in the default case, you might see:"
msgstr "例如，在默认情况下，您可能会看到::"

msgid "But with ``ArticleFormset(prefix='article')`` that becomes:"
msgstr "但使用 ``ArticleFormset(prefix='article')`` 的话就会变为："

msgid ""
"This is useful if you want to :ref:`use more than one formset in a view "
"<multiple-formsets-in-view>`."
msgstr ""
"如果您想 :ref:`在视图中使用多个formset <multiple-formsets-in-view> ` ，这个参"
"数会很有用。"

msgid "Using a formset in views and templates"
msgstr "在视图和模板中使用formset"

msgid ""
"Using a formset inside a view is as easy as using a regular ``Form`` class. "
"The only thing you will want to be aware of is making sure to use the "
"management form inside the template. Let's look at a sample view::"
msgstr ""
"在视图中使用formset与使用常规的 ``Form`` 类一样简单。您唯一需要注意的是确保要"
"在模板中使用管理表单。我们来看一个示例视图::"

msgid "The ``manage_articles.html`` template might look like this:"
msgstr "模板 ``manage_articles.html`` 可能如下所示："

msgid ""
"However there's a slight shortcut for the above by letting the formset "
"itself deal with the management form:"
msgstr "但是对于上面让formset自己处理管理表单，还有个小小的捷径："

msgid "The above ends up calling the ``as_table`` method on the formset class."
msgstr "上面代码最后在formset类中调用了 ``as_table`` 方法。"

msgid "Manually rendered ``can_delete`` and ``can_order``"
msgstr "手动渲染 ``can_delete`` 和 ``can_order`` "

msgid ""
"If you manually render fields in the template, you can render ``can_delete`` "
"parameter with ``{{ form.DELETE }}``:"
msgstr ""
"如果您在模板中手动渲染字段，您可以用 ``{{ form.DELETE }}`` 来渲染参数 "
"``can_delete`` 。"

msgid ""
"Similarly, if the formset has the ability to order (``can_order=True``), it "
"is possible to render it with ``{{ form.ORDER }}``."
msgstr ""
"同样，如果formset能排序( ``can_order=True`` )，可以用 ``{{ form.ORDER }}`` 来"
"渲染它。"

msgid "Using more than one formset in a view"
msgstr "在视图中使用多个formset"

msgid ""
"You are able to use more than one formset in a view if you like. Formsets "
"borrow much of its behavior from forms. With that said you are able to use "
"``prefix`` to prefix formset form field names with a given value to allow "
"more than one formset to be sent to a view without name clashing. Lets take "
"a look at how this might be accomplished::"
msgstr ""
"如果您想，您可以在视图中使用多个formset。表单集从表单上借鉴了很多行为。像之前"
"说的，您可以使用参数 ``prefix`` 来给formset中表单的字段附上前缀，以避免多个"
"formset的数据传到同一个视图而引起名称冲突。让我们来看下这是如何实现的::"

msgid ""
"You would then render the formsets as normal. It is important to point out "
"that you need to pass ``prefix`` on both the POST and non-POST cases so that "
"it is rendered and processed correctly."
msgstr ""
"然后您就可以像平时那样渲染表单集。需要指出的是，您需要同时在POST和非POST情况"
"下传递 ``prefix`` ，以便它能被正确渲染和处理。"

msgid ""
"Each formset's :ref:`prefix <formset-prefix>` replaces the default ``form`` "
"prefix that's added to each field's ``name`` and ``id`` HTML attributes."
msgstr ""
"每个formset的 :ref:`prefix <formset-prefix>` 会替换添加到每个字段的 ``name`` "
"和 ``id`` HTML属性的默认 ``form`` 前缀。"

msgid "Working with forms"
msgstr "使用表单"

msgid "About this document"
msgstr "关于本页文档"

msgid ""
"This document provides an introduction to the basics of web forms and how "
"they are handled in Django. For a more detailed look at specific areas of "
"the forms API, see :doc:`/ref/forms/api`, :doc:`/ref/forms/fields`, and :doc:"
"`/ref/forms/validation`."
msgstr ""
"本页文档介绍了Web表单的基本内容以及它们在Django中是如何处理的。想更详细的了解"
"表单的API，参见 :doc:`/ref/forms/api` ， :doc:`/ref/forms/fields` ，以及 :"
"doc:`/ref/forms/validation` 。"

msgid ""
"Unless you're planning to build websites and applications that do nothing "
"but publish content, and don't accept input from your visitors, you're going "
"to need to understand and use forms."
msgstr ""
"除非您计划搭建的网站和应用只发布内容且不接收访问者的输入，否则您就需要理解和"
"使用表单。"

msgid ""
"Django provides a range of tools and libraries to help you build forms to "
"accept input from site visitors, and then process and respond to the input."
msgstr ""
"Django提供了一系列的工具和库来帮助您构建表单来接收网站访客的输入，然后处理以"
"及响应这些输入。"

msgid "HTML forms"
msgstr "HTML表单"

msgid ""
"In HTML, a form is a collection of elements inside ``<form>...</form>`` that "
"allow a visitor to do things like enter text, select options, manipulate "
"objects or controls, and so on, and then send that information back to the "
"server."
msgstr ""
"在HTML中，表单是在 ``<form>...</form>`` 中的一些元素，它允许访客做一些类似输"
"入文本、选择选项、操作对象或空间等动作，然后发送这些信息到服务端。"

msgid ""
"Some of these form interface elements - text input or checkboxes - are "
"fairly simple and are built into HTML itself. Others are much more complex; "
"an interface that pops up a date picker or allows you to move a slider or "
"manipulate controls will typically use JavaScript and CSS as well as HTML "
"form ``<input>`` elements to achieve these effects."
msgstr ""
"一些表单界面元素（文本框或复选框）非常简单并内置在HTML中。其他会复杂些；像弹"
"出日期选择或者允许您移动滑块或者操作控件，一般通过使用JavaScript，CSS以及HTML"
"表单中的 ``<input>`` 元素来实现这些效果。"

msgid "As well as its ``<input>`` elements, a form must specify two things:"
msgstr "和它的元素 ``<input>`` 一样，表单必须指定两样东西："

msgid ""
"*where*: the URL to which the data corresponding to the user's input should "
"be returned"
msgstr "*何地*：负责响应用户输入数据的URL地址"

msgid "*how*: the HTTP method the data should be returned by"
msgstr "*如何*：数据请求使用的HTTP方法。"

msgid ""
"As an example, the login form for the Django admin contains several "
"``<input>`` elements: one of ``type=\"text\"`` for the username, one of "
"``type=\"password\"`` for the password, and one of ``type=\"submit\"`` for "
"the \"Log in\" button. It also contains some hidden text fields that the "
"user doesn't see, which Django uses to determine what to do next."
msgstr ""
"例如，Django admin的登录表单包含了一些 ``<input>`` 元素：用户名用 ``type="
"\"text\"`` ，密码用 ``type=\"password\"`` ，登录按钮用 ``type=\"submit\"`` 。"
"它还包含一些用户看不到的隐藏文本字段，Django用它们来决定下一步行为。"

msgid ""
"It also tells the browser that the form data should be sent to the URL "
"specified in the ``<form>``’s ``action`` attribute - ``/admin/`` - and that "
"it should be sent using the HTTP mechanism specified by the ``method`` "
"attribute - ``post``."
msgstr ""
"它还告诉浏览器表单数据应该发往 ``<form>`` 的 ``action`` 属性指定的URL—— ``/"
"admin/`` ，并且应该使用它的 ``method`` 属性指定的HTTP方法—— ``post`` 。"

msgid ""
"When the ``<input type=\"submit\" value=\"Log in\">`` element is triggered, "
"the data is returned to ``/admin/``."
msgstr ""
"当 ``<input type=\"submit\" value=\"Log in\">`` 元素被触发的时候，数据会发送"
"到 ``/admin/`` 。"

msgid "``GET`` and ``POST``"
msgstr "``GET`` 和 ``POST``"

msgid ""
"``GET`` and ``POST`` are the only HTTP methods to use when dealing with "
"forms."
msgstr "处理表单时只会用到 ``GET`` 和 ``POST`` 两种HTTP方法。"

msgid ""
"Django's login form is returned using the ``POST`` method, in which the "
"browser bundles up the form data, encodes it for transmission, sends it to "
"the server, and then receives back its response."
msgstr ""
"Django的登录表单使用 ``POST`` 方法传输数据，在这个方法中浏览器会封装表单数"
"据，为了传输会进行编码，然后发送到服务端并接收它的响应。"

msgid ""
"``GET``, by contrast, bundles the submitted data into a string, and uses "
"this to compose a URL. The URL contains the address where the data must be "
"sent, as well as the data keys and values. You can see this in action if you "
"do a search in the Django documentation, which will produce a URL of the "
"form ``https://docs.djangoproject.com/search/?q=forms&release=1``."
msgstr ""
"相比之下，``GET`` 方法将提交的数据捆绑到一个字符串中，并用它来组成一个URL。该"
"URL包含了数据要发送的地址以及一些键值对应的数据。如果您在Django文档中进行一次"
"搜索，就会看到这点，它会生成一个形似 ``https://docs.djangoproject.com/"
"search/?q=forms&release=1`` 的URL。 "

msgid "``GET`` and ``POST`` are typically used for different purposes."
msgstr "``GET`` 和 ``POST`` 通常用于不同的目的。"

msgid ""
"Any request that could be used to change the state of the system - for "
"example, a request that makes changes in the database - should use ``POST``. "
"``GET`` should be used only for requests that do not affect the state of the "
"system."
msgstr ""
"任何可能用于更改系统状态的请求应该使用 ``POST`` —— 比如一个更改数据库的请求。"
"``GET`` 应该只被用于不会影响系统状态的请求。"

msgid ""
"``GET`` would also be unsuitable for a password form, because the password "
"would appear in the URL, and thus, also in browser history and server logs, "
"all in plain text. Neither would it be suitable for large quantities of "
"data, or for binary data, such as an image. A Web application that uses "
"``GET`` requests for admin forms is a security risk: it can be easy for an "
"attacker to mimic a form's request to gain access to sensitive parts of the "
"system. ``POST``, coupled with other protections like Django's :doc:`CSRF "
"protection </ref/csrf/>` offers more control over access."
msgstr ""
"``GET`` 方法也不适合密码表单，因为密码会出现在URL中，于是也会出现在浏览器的历"
"史记录以及服务器的日志中，而且都是以纯文本的形式。它也不适合处理大量的数据或"
"者二进制数据，比如一张图片。在WEB应用的管理表单中使用 ``GET`` 请求具有安全隐"
"患：攻击者很容易通过模拟请求来访问系统的敏感数据。 ``POST`` 方法通过与其他像"
"Django的 :doc:`CSRF protection </ref/csrf/>` 这样的保护措施配合使用，能对访问"
"提供更多的控制。"

msgid ""
"On the other hand, ``GET`` is suitable for things like a web search form, "
"because the URLs that represent a ``GET`` request can easily be bookmarked, "
"shared, or resubmitted."
msgstr ""
"另一方面， ``GET`` 方法适用于诸如网页搜索表单这样的内容，因为这类呈现为一个 "
"``GET`` 请求的URL很容易被存为书签、分享或重新提交。"

msgid "Django's role in forms"
msgstr "Django在表单中的角色"

msgid ""
"Handling forms is a complex business. Consider Django's admin, where "
"numerous items of data of several different types may need to be prepared "
"for display in a form, rendered as HTML, edited using a convenient "
"interface, returned to the server, validated and cleaned up, and then saved "
"or passed on for further processing."
msgstr ""
"处理表单是一件挺复杂的事情。想想看Django的admin，许多不同类型的数据可能需要在"
"一张表单中准备显示，渲染成HTML，使用方便的界面进行编辑，传到服务器，验证和清"
"理数据，然后保存或跳过进行下一步处理。"

msgid ""
"Django's form functionality can simplify and automate vast portions of this "
"work, and can also do it more securely than most programmers would be able "
"to do in code they wrote themselves."
msgstr ""
"Django的表单功能可以简化和自动化上述工作的大部分内容，并且也能比大多数程序员"
"自己编写代码去实现来的更安全些。"

msgid "Django handles three distinct parts of the work involved in forms:"
msgstr "Django会处理涉及表单的三个不同部分："

msgid "preparing and restructuring data to make it ready for rendering"
msgstr "准备并重组数据，以便下一步的渲染"

msgid "creating HTML forms for the data"
msgstr "为数据创建HTML 表单"

msgid "receiving and processing submitted forms and data from the client"
msgstr "接收并处理客户端提交的表单及数据"

msgid ""
"It is *possible* to write code that does all of this manually, but Django "
"can take care of it all for you."
msgstr "您 *可以* 手动编写代码来实现，但Django 可以帮你完成所有这些工作。"

msgid "Forms in Django"
msgstr "Django 中的表单"

msgid ""
"We've described HTML forms briefly, but an HTML ``<form>`` is just one part "
"of the machinery required."
msgstr ""
"我们已经简单的描述过了HTML 表单，但是一个HTML ``<form>`` 只是其所需的一部分。"

msgid ""
"In the context of a Web application, 'form' might refer to that HTML "
"``<form>``, or to the Django :class:`Form` that produces it, or to the "
"structured data returned when it is submitted, or to the end-to-end working "
"collection of these parts."
msgstr ""
"Web应用中所说的'表单'，可能指的是HTML ``<form>`` ，或者是生成了它的Django :"
"class:`Form` ，再或者是提交时返回的结构化数据，亦或是这些端到端作业的合集。"

msgid "The Django :class:`Form` class"
msgstr "Django的 :class:`Form` 类"

msgid ""
"At the heart of this system of components is Django's :class:`Form` class. "
"In much the same way that a Django model describes the logical structure of "
"an object, its behavior, and the way its parts are represented to us, a :"
"class:`Form` class describes a form and determines how it works and appears."
msgstr ""
"Django表单系统的核心组件是 :class:`Form` 类。它与Django模型描述对象的逻辑结"
"构、行为以及它呈现给我们内容的形式的方式大致相同， :class:`Form` 类描述一张表"
"单并决定它如何工作及呈现。"

msgid ""
"In a similar way that a model class's fields map to database fields, a form "
"class's fields map to HTML form ``<input>`` elements. (A :class:`ModelForm` "
"maps a model class's fields to HTML form ``<input>`` elements via a :class:"
"`Form`; this is what the Django admin is based upon.)"
msgstr ""
"类似于模型类的字段映射到数据库字段的方式，表单类的字段会映射到HTML表单的 "
"``<input>`` 元素。 :class:`ModelForm` 通过 :class:`Form` 映射模型类的字段到"
"HTML表单的 ``<input>`` 元素，Django admin就基于此。"

msgid ""
"A form's fields are themselves classes; they manage form data and perform "
"validation when a form is submitted. A :class:`DateField` and a :class:"
"`FileField` handle very different kinds of data and have to do different "
"things with it."
msgstr ""
"表单字段本身也是类；他们管理表单数据并在提交表单时执行验证。 :class:"
"`DateField` 和 :class:`FileField` 处理的数据类型差别很大，所以必须用来处理不"
"同的字段。"

msgid ""
"A form field is represented to a user in the browser as an HTML \"widget\" - "
"a piece of user interface machinery. Each field type has an appropriate "
"default :doc:`Widget class </ref/forms/widgets/>`, but these can be "
"overridden as required."
msgstr ""
"在浏览器中，表单字段以HTML“控件”（用户界面的一个片段）的形式展现给我们。每个"
"字段类型都有与之相匹配的 :doc:`控件类 </ref/forms/widgets/>` ，但必要时可以覆"
"盖。"

msgid "Instantiating, processing, and rendering forms"
msgstr "实例化、处理和渲染表单"

msgid "When rendering an object in Django, we generally:"
msgstr "在Django中渲染一个对象的时候，我们通常："

msgid "get hold of it in the view (fetch it from the database, for example)"
msgstr "在视图中获取它（例如从数据库中取出）"

msgid "pass it to the template context"
msgstr "将它传递给模板上下文"

msgid "expand it to HTML markup using template variables"
msgstr "使用模板变量将它扩展为HTML标记"

msgid ""
"Rendering a form in a template involves nearly the same work as rendering "
"any other kind of object, but there are some key differences."
msgstr ""
"在模板中渲染表单几乎与渲染任何其他类型的对象的一样，但是存在一些关键性的差"
"异。"

msgid ""
"In the case of a model instance that contained no data, it would rarely if "
"ever be useful to do anything with it in a template. On the other hand, it "
"makes perfect sense to render an unpopulated form - that's what we do when "
"we want the user to populate it."
msgstr ""
"如果模型实例不包含数据，在模板中对它做任何处理几乎没什么用。但完全有理由用来"
"渲染一张空表单——当我们希望用户来填充的时候就会这么做。"

msgid ""
"So when we handle a model instance in a view, we typically retrieve it from "
"the database. When we're dealing with a form we typically instantiate it in "
"the view."
msgstr ""
"所以当我们在视图中处理模型实例时，我们一般从数据库中获取它。当我们处理表单"
"时，我们一般在视图中实例化它。"

msgid ""
"When we instantiate a form, we can opt to leave it empty or pre-populate it, "
"for example with:"
msgstr "当我们实例化表单时，我们可以选择让它为空或者对它预先填充，例如使用："

msgid ""
"data from a saved model instance (as in the case of admin forms for editing)"
msgstr "来自已保存的模型实例的数据（例如在管理编辑表单的情况下）"

msgid "data that we have collated from other sources"
msgstr "我们从其他来源获取的数据"

msgid "data received from a previous HTML form submission"
msgstr "从前面一个HTML 表单提交过来的数据"

msgid ""
"The last of these cases is the most interesting, because it's what makes it "
"possible for users not just to read a website, but to send information back "
"to it too."
msgstr ""
"最后一种情况最有趣，因为这使得用户不仅可以阅读网站，而且还可以将信息发回给"
"它。"

msgid "Building a form"
msgstr "构建一张表单"

msgid "The work that needs to be done"
msgstr "需要完成的工作"

msgid ""
"Suppose you want to create a simple form on your website, in order to obtain "
"the user's name. You'd need something like this in your template:"
msgstr ""
"假设您希望在您的网站上创建一张简易的表单，用来获取用户的名字。您需要在模板中"
"使用类似代码："

msgid ""
"This tells the browser to return the form data to the URL ``/your-name/``, "
"using the ``POST`` method. It will display a text field, labeled \"Your name:"
"\", and a button marked \"OK\". If the template context contains a "
"``current_name`` variable, that will be used to pre-fill the ``your_name`` "
"field."
msgstr ""
"这告诉浏览器将表单数据返回给URL ``/your-name/`` ，并使用 ``POST`` 方法。它将"
"显示一个标签为 \"Your name:\" 的文本字段，以及一个 \"OK\" 按钮。如果模板上下"
"文包含一个 ``current_name`` 变量，它会被预填充到 ``your_name`` 字段。"

msgid ""
"You'll need a view that renders the template containing the HTML form, and "
"that can supply the ``current_name`` field as appropriate."
msgstr ""
"您需要一个视图来渲染这个包含HTML表单的模板，并能适当提供 ``current_name`` 字"
"段。"

msgid ""
"When the form is submitted, the ``POST`` request which is sent to the server "
"will contain the form data."
msgstr "提交表单时，发送给服务器的 ``POST`` 请求将包含表单数据。"

msgid ""
"Now you'll also need a view corresponding to that ``/your-name/`` URL which "
"will find the appropriate key/value pairs in the request, and then process "
"them."
msgstr ""
"现在，您还需要一个与该 ``/your-name/`` URL相对应的视图，该视图将在请求中找到"
"相应的键/值对，然后对其进行处理。"

msgid ""
"This is a very simple form. In practice, a form might contain dozens or "
"hundreds of fields, many of which might need to be pre-populated, and we "
"might expect the user to work through the edit-submit cycle several times "
"before concluding the operation."
msgstr ""
"这是一张非常简单的表单。实际应用中，一张表单可能包含数十上百的字段，其中许多"
"可能需要预填充，并且我们可能希望用户在结束操作前需要多次来回编辑-提交。"

msgid ""
"We might require some validation to occur in the browser, even before the "
"form is submitted; we might want to use much more complex fields, that allow "
"the user to do things like pick dates from a calendar and so on."
msgstr ""
"我们可能需要在浏览器中进行一些验证，甚至在表单提交之前；我们可能希望使用更复"
"杂的字段 ，以允许用户做类似日期选择等操作。"

msgid ""
"At this point it's much easier to get Django to do most of this work for us."
msgstr "此刻，我们很容易通过使用Django来完成以上大部分工作。"

msgid "Building a form in Django"
msgstr "在Django 中构建一张表单"

msgid "The :class:`Form` class"
msgstr " :class:`Form` 类"

msgid ""
"We already know what we want our HTML form to look like. Our starting point "
"for it in Django is this:"
msgstr ""
"我们已经很清楚想要的HTML表单看起来会是什么样子。首先，在Django中这样做："

msgid ""
"This defines a :class:`Form` class with a single field (``your_name``). "
"We've applied a human-friendly label to the field, which will appear in the "
"``<label>`` when it's rendered (although in this case, the :attr:`~Field."
"label` we specified is actually the same one that would be generated "
"automatically if we had omitted it)."
msgstr ""
"它定义了一个只包含一个字段（ ``your_name`` ）的  :class:`Form` 类。我们已经为"
"这个字段提供了友好的标签，当它渲染后会显示在 ``<label>`` 中（在这种情况下，如"
"果我们省略之前指定的  :attr:`~Field.label` ，它还是会自动生成一个一样的标"
"签）。"

msgid ""
"The field's maximum allowable length is defined by :attr:`~CharField."
"max_length`. This does two things. It puts a ``maxlength=\"100\"`` on the "
"HTML ``<input>`` (so the browser should prevent the user from entering more "
"than that number of characters in the first place). It also means that when "
"Django receives the form back from the browser, it will validate the length "
"of the data."
msgstr ""
"字段的最大长度由 :attr:`~CharField.max_length` 来定义。它做了两件事情。首先它"
"在HTML的 ``<input>`` 上增加了 ``maxlength=\"100\"`` （这样浏览器会在第一时间"
"阻止用户输入超过这个数量的字符串）。其次它还会在Django收到浏览器传过来的表单"
"时，对数据长度进行验证（也就是服务器端验证）。"

msgid ""
"A :class:`Form` instance has an :meth:`~Form.is_valid()` method, which runs "
"validation routines for all its fields. When this method is called, if all "
"fields contain valid data, it will:"
msgstr ""
" :class:`Form` 实例有一个 :meth:`~Form.is_valid()` 方法，它会对所有它的字段进"
"行验证。当这个方法被调用时且所有字段都包含有效的数据，将："

msgid "return ``True``"
msgstr "返回 ``True`` "

msgid "place the form's data in its :attr:`~Form.cleaned_data` attribute."
msgstr "将表单的数据放到它的属性 :attr:`~Form.cleaned_data` 中。"

msgid "The whole form, when rendered for the first time, will look like:"
msgstr "这样整个表单在第一次渲染时，会显示如下："

msgid ""
"Note that it **does not** include the ``<form>`` tags, or a submit button. "
"We'll have to provide those ourselves in the template."
msgstr ""
"注意它 **没有** 包含 ``<form>`` 标签和提交按钮。我们必须自己在模板中提供。"

msgid "The view"
msgstr "视图"

msgid ""
"Form data sent back to a Django website is processed by a view, generally "
"the same view which published the form. This allows us to reuse some of the "
"same logic."
msgstr ""
"发回Django网站的表单数据由视图来处理，一般和发布这个表单用的是同一个视图。这"
"允许我们重用一些相同的逻辑。"

msgid ""
"To handle the form we need to instantiate it in the view for the URL where "
"we want it to be published:"
msgstr "为了处理表单，我们需要将它实例化到我们希望发布的URL的对应的视图中："

msgid ""
"If we arrive at this view with a ``GET`` request, it will create an empty "
"form instance and place it in the template context to be rendered. This is "
"what we can expect to happen the first time we visit the URL."
msgstr ""
"如果我们访问这个视图用的是 ``GET`` 请求，它会创建一个空的表单实例并将其放置在"
"模板上下文中进行渲染。这是我们在首次访问这个URL时能预料到会发生的情况。"

msgid ""
"If the form is submitted using a ``POST`` request, the view will once again "
"create a form instance and populate it with data from the request: ``form = "
"NameForm(request.POST)`` This is called \"binding data to the form\" (it is "
"now a *bound* form)."
msgstr ""
"如果表单提交用的是 ``POST`` 请求，那么该视图将再次创建一个表单实例并使用请求"
"中的数据填充它： ``form = NameForm(request.POST)`` 这叫“绑定数据到表单” （现"
"在它是一张 *绑定的* 表单）。"

msgid ""
"We call the form's ``is_valid()`` method; if it's not ``True``, we go back "
"to the template with the form. This time the form is no longer empty "
"(*unbound*) so the HTML form will be populated with the data previously "
"submitted, where it can be edited and corrected as required."
msgstr ""
"我们调用表单的 ``is_valid()`` 方法；如果不为 ``True`` ，我们带着表单返回到模"
"板。这次表单不再为空（ *未绑定* ），所以HTML表单将用之前提交的数据进行填充，"
"放到可以根据需要进行编辑和修正的位置。"

msgid ""
"If ``is_valid()`` is ``True``, we'll now be able to find all the validated "
"form data in its ``cleaned_data`` attribute. We can use this data to update "
"the database or do other processing before sending an HTTP redirect to the "
"browser telling it where to go next."
msgstr ""
"如果 ``is_valid()`` 为 ``True`` ，我们就能在其 ``cleaned_data`` 属性中找到所"
"有通过验证的表单数据。我们可以在发送一个HTTP重定向告诉浏览器下一步去向之前用"
"这些数据更新数据库或者做其他处理。"

msgid "The template"
msgstr "模板"

msgid ""
"We don't need to do much in our ``name.html`` template. The simplest example "
"is:"
msgstr "我们没有必要在模板 ``name.html`` 中做过多的操作。举个最简单的例子："

msgid ""
"All the form's fields and their attributes will be unpacked into HTML markup "
"from that ``{{ form }}`` by Django's template language."
msgstr ""
"所有的表单字段及其属性都将通过Django模板语言从 ``{{ form }}`` 中被解包成HTML"
"标记。"

msgid "Forms and Cross Site Request Forgery protection"
msgstr "表格和跨站请求伪造保护"

msgid ""
"Django ships with an easy-to-use :doc:`protection against Cross Site Request "
"Forgeries </ref/csrf>`. When submitting a form via ``POST`` with CSRF "
"protection enabled you must use the :ttag:`csrf_token` template tag as in "
"the preceding example. However, since CSRF protection is not directly tied "
"to forms in templates, this tag is omitted from the following examples in "
"this document."
msgstr ""
"Django自带一个简单易用的 :doc:`跨站请求伪造防护 </ref/csrf>` 。当通过 "
"``POST`` 方法提交一张启用了CSRF防护的表单时，您必须使用上例中这样的模板标签 :"
"ttag:`csrf_token` 。但是，由于CSRF防护在模板中没有与表单直接绑定，因此这个标"
"签在本页文档之后的示例中都将被忽略。"

msgid "HTML5 input types and browser validation"
msgstr "HTML5输入类型和浏览器验证"

msgid ""
"If your form includes a :class:`~django.forms.URLField`, an :class:`~django."
"forms.EmailField` or any integer field type, Django will use the ``url``, "
"``email`` and ``number`` HTML5 input types. By default, browsers may apply "
"their own validation on these fields, which may be stricter than Django's "
"validation. If you would like to disable this behavior, set the `novalidate` "
"attribute on the ``form`` tag, or specify a different widget on the field, "
"like :class:`TextInput`."
msgstr ""
"如果您的表单包含 :class:`~django.forms.URLField` ， :class:`~django.forms."
"EmailField` 或者其他整数字段类型，Django将使用  ``url`` ， ``email`` 和 "
"``number`` HTML5输入类型。默认情况下，浏览器可能会在这些字段上应用他们自己的"
"验证，这也许比Django的验证更加严格。如果您想禁用这个行为，请在 ``form`` 标签"
"上设置 `novalidate` 属性，或者在字段上指定一个不同的控件，比如 :class:"
"`TextInput` 。"

msgid ""
"We now have a working web form, described by a Django :class:`Form`, "
"processed by a view, and rendered as an HTML ``<form>``."
msgstr ""
"现在我们有了一个可以工作的web表单，它通过一张Django :class:`Form` 描述，由一"
"个视图来处理并渲染成一个HTML ``<form>`` 。"

msgid ""
"That's all you need to get started, but the forms framework puts a lot more "
"at your fingertips. Once you understand the basics of the process described "
"above, you should be prepared to understand other features of the forms "
"system and ready to learn a bit more about the underlying machinery."
msgstr ""
"以上是您入门需要了解的所有内容，但是表单框架提供了更多垂手可得的内容。一旦您"
"理解了上述过程的基础知识，您应该再了解下表单系统的其他功能，然后学习更多的底"
"层机制。"

msgid "More about Django :class:`Form` classes"
msgstr "详解Django :class:`Form` 类"

msgid ""
"All form classes are created as subclasses of either :class:`django.forms."
"Form` or :class:`django.forms.ModelForm`. You can think of ``ModelForm`` as "
"a subclass of ``Form``. ``Form`` and ``ModelForm`` actually inherit common "
"functionality from a (private) ``BaseForm`` class, but this implementation "
"detail is rarely important."
msgstr ""
"所有表单类都作为 :class:`django.forms.Form` 或者 :class:`django.forms."
"ModelForm` 的子类来创建。您可以把 ``ModelForm`` 想象成 ``Form`` 的子类。实际"
"上 ``Form`` 和 ``ModelForm`` 从（私有） ``BaseForm`` 类继承了通用功能，但是这"
"个实现细节不怎么重要。"

msgid "Models and Forms"
msgstr "模型和表单"

msgid ""
"In fact if your form is going to be used to directly add or edit a Django "
"model, a :doc:`ModelForm </topics/forms/modelforms>` can save you a great "
"deal of time, effort, and code, because it will build a form, along with the "
"appropriate fields and their attributes, from a ``Model`` class."
msgstr ""
"实际上，如果您的表单是要直接用来添加或编辑Django模型，用 :doc:`ModelForm </"
"topics/forms/modelforms>` ，可以省时、省力、省代码，因为它会根据 ``Model`` 类"
"构建一张对应字段及其属性的表单。"

msgid "Bound and unbound form instances"
msgstr "绑定的和未绑定的表单实例"

msgid ""
"The distinction between :ref:`ref-forms-api-bound-unbound` is important:"
msgstr " :ref:`ref-forms-api-bound-unbound` 之间的区别非常重要："

msgid ""
"An unbound form has no data associated with it. When rendered to the user, "
"it will be empty or will contain default values."
msgstr ""
"未绑定的表单没有与其关联的数据。当渲染给用户的时候，它会是空的或者包含默认"
"值。"

msgid ""
"A bound form has submitted data, and hence can be used to tell if that data "
"is valid. If an invalid bound form is rendered, it can include inline error "
"messages telling the user what data to correct."
msgstr ""
"绑定的表单拥有已提交的数据，因此可以用来判断数据是否合法。如果渲染了一张非法"
"的绑定的表单，它将包含内联的错误信息，告知用户要纠正哪些数据。"

msgid ""
"The form's :attr:`~Form.is_bound` attribute will tell you whether a form has "
"data bound to it or not."
msgstr "表单的 :attr:`~Form.is_bound` 属性将告诉您一张表单是否具有绑定的数据。"

msgid "More on fields"
msgstr "字段详解"

msgid ""
"Consider a more useful form than our minimal example above, which we could "
"use to implement \"contact me\" functionality on a personal website:"
msgstr ""
"考虑一下比我们上面的小示例更有用的一张表单，我们可以用它在个人网站上实现“联系"
"我”的功能："

msgid ""
"Our earlier form used a single field, ``your_name``, a :class:`CharField`. "
"In this case, our form has four fields: ``subject``, ``message``, ``sender`` "
"and ``cc_myself``. :class:`CharField`, :class:`EmailField` and :class:"
"`BooleanField` are just three of the available field types; a full list can "
"be found in :doc:`/ref/forms/fields`."
msgstr ""
"我们之前的表单只用了一个 :class:`CharField` 类型的字段 ``your_name`` 。在这个"
"例子中，我们的表单有四个字段： ``subject`` 、 ``message`` 、 ``sender`` 和 "
"``cc_myself`` 。只用到三种可用的字段类型：  :class:`CharField` 、 :class:"
"`EmailField` 和 :class:`BooleanField` ；完整的字段类型清单请参看  :doc:`/ref/"
"forms/fields` 。"

msgid "Widgets"
msgstr "控件"

msgid ""
"Each form field has a corresponding :doc:`Widget class </ref/forms/widgets/"
">`, which in turn corresponds to an HTML form widget such as ``<input type="
"\"text\">``."
msgstr ""
"每个表单字段都有一个相对应的  :doc:`控件类 </ref/forms/widgets/>` ，这个控件"
"类又有对应的HTML表单控件，比如 ``<input type=\"text\">`` 。"

msgid ""
"In most cases, the field will have a sensible default widget. For example, "
"by default, a :class:`CharField` will have a :class:`TextInput` widget, that "
"produces an ``<input type=\"text\">`` in the HTML. If you needed "
"``<textarea>`` instead, you'd specify the appropriate widget when defining "
"your form field, as we have done for the ``message`` field."
msgstr ""
"多数情况下，字段都有合适的默认控件。比如，默认情况下， :class:`CharField` 有"
"个  :class:`TextInput` 控件，它会在HTML中生成一个 ``<input type=\"text"
"\">`` 。如果您想要的是 ``<textarea> `` ，您要在定义表单字段的时候指定控件，就"
"像我们对 ``message`` 字段那样处理。"

msgid "Field data"
msgstr "字段数据"

msgid ""
"Whatever the data submitted with a form, once it has been successfully "
"validated by calling ``is_valid()`` (and ``is_valid()`` has returned "
"``True``), the validated form data will be in the ``form.cleaned_data`` "
"dictionary. This data will have been nicely converted into Python types for "
"you."
msgstr ""
"无论用表单提交了什么数据，一旦通过调用 ``is_valid()`` 验证成功"
"（  ``is_valid()`` 返回 ``True`` ），已验证的表单数据将被放到 ``form."
"cleaned_data`` 字典中。这里的数据已经很好的为你转化为Python类型。"

msgid ""
"You can still access the unvalidated data directly from ``request.POST`` at "
"this point, but the validated data is better."
msgstr ""
"此时您依然能够直接从 ``request.POST`` 中访问到未验证的数据，但最好还是使用经"
"验证的数据。"

msgid ""
"In the contact form example above, ``cc_myself`` will be a boolean value. "
"Likewise, fields such as :class:`IntegerField` and :class:`FloatField` "
"convert values to a Python ``int`` and ``float`` respectively."
msgstr ""
"在上面的联系表单示例中， ``cc_myself`` 会被转化成一个布尔值。同样的，字段 :"
"class:`IntegerField` 和 :class:`FloatField` 的值分别会被转化为Python的 "
"``int`` 和 ``float`` 类型。"

msgid ""
"Here's how the form data could be processed in the view that handles this "
"form:"
msgstr "下面例举了如何在视图中处理表单数据："

msgid "For more on sending email from Django, see :doc:`/topics/email`."
msgstr "更多关于从Django中发送电子邮件的内容，请参见  :doc:`/topics/email` 。"

msgid ""
"Some field types need some extra handling. For example, files that are "
"uploaded using a form need to be handled differently (they can be retrieved "
"from ``request.FILES``, rather than ``request.POST``). For details of how to "
"handle file uploads with your form, see :ref:`binding-uploaded-files`."
msgstr ""
"有些字段类型需要一些额外的处理。例如，使用表单上传文件就要以不同的方式处理"
"（它们可以从 ``request.FILES`` 获取，而不是 ``request.POST`` 中）。有关如何使"
"用表单处理文件上传的详细信息，请参见 :ref:`binding-uploaded-files` 。"

msgid "Working with form templates"
msgstr "使用表单模板"

msgid ""
"All you need to do to get your form into a template is to place the form "
"instance into the template context. So if your form is called ``form`` in "
"the context, ``{{ form }}`` will render its ``<label>`` and ``<input>`` "
"elements appropriately."
msgstr ""
"您只需将表单实例放到模板的上下文中即可。因此，如果您的表单在上下文中叫 "
"``form`` ，那么  ``{{ form }}`` 将渲染它相应的 ``<label>`` 和 ``<input>`` 元"
"素。"

msgid "Form rendering options"
msgstr "表单渲染选项"

msgid "Additional form template furniture"
msgstr "额外表单模板标签"

msgid ""
"Don't forget that a form's output does *not* include the surrounding "
"``<form>`` tags, or the form's ``submit`` control. You will have to provide "
"these yourself."
msgstr ""
"不要忘记，一张表单的输出 *不* 包含外层 ``<form>`` 标签以及 ``submit`` 控件。"
"这些必须由你自己提供。"

msgid ""
"There are other output options though for the ``<label>``/``<input>`` pairs:"
msgstr "对于 ``<label>`` / ``<input>`` 对，还有其他输出选项："

msgid ""
"``{{ form.as_table }}`` will render them as table cells wrapped in ``<tr>`` "
"tags"
msgstr ""
" ``{{ form.as_table }}`` 会把它们渲染成表格单元格封装到标签 ``<tr>`` 中。"

msgid "``{{ form.as_p }}`` will render them wrapped in ``<p>`` tags"
msgstr " ``{{ form.as_p }}`` 会把它们渲染封装到标签 ``<p>`` 中。"

msgid "``{{ form.as_ul }}`` will render them wrapped in ``<li>`` tags"
msgstr " ``{{ form.as_ul }}`` 会把它们渲染封装到标签 ``<li>`` 中。"

msgid ""
"Note that you'll have to provide the surrounding ``<table>`` or ``<ul>`` "
"elements yourself."
msgstr "注意，您必须自己提供外层的 ``<table>`` 或 ``<ul>`` 元素。"

msgid ""
"Here's the output of ``{{ form.as_p }}`` for our ``ContactForm`` instance:"
msgstr "下面是我们 ``ContactForm`` 实例用 ``{{ form.as_p }}`` 的输出："

msgid ""
"Note that each form field has an ID attribute set to ``id_<field-name>``, "
"which is referenced by the accompanying label tag. This is important in "
"ensuring that forms are accessible to assistive technology such as screen "
"reader software. You can also :ref:`customize the way in which labels and "
"ids are generated <ref-forms-api-configuring-label>`."
msgstr ""
"请注意，每个表单字段都有一个 ``id_<field-name>`` 这样的ID属性，它被附带的"
"label标签引用。这对于确保表单可供屏幕阅读软件这样的辅助技术访问非常重要。您还"
"可以 :ref:`自定义Label和ID的生成方式 <ref-forms-api-configuring-label>` 。"

msgid "See :ref:`ref-forms-api-outputting-html` for more on this."
msgstr "更多相关信息，请参阅 :ref:`ref-forms-api-outputting-html` 。"

msgid "Rendering fields manually"
msgstr "手动渲染字段"

msgid ""
"We don't have to let Django unpack the form's fields; we can do it manually "
"if we like (allowing us to reorder the fields, for example). Each field is "
"available as an attribute of the form using ``{{ form.name_of_field }}``, "
"and in a Django template, will be rendered appropriately. For example:"
msgstr ""
"我们没有必要非要让Django来解包表单字段；如果我们喜欢，可以手动来处理（比如，"
"让我们对字段重新排序）。每个字段都可以用 ``{{ form.name_of_field }}`` 作为表"
"单的一个属性，并被相应的渲染在Django模板中。例如："

msgid ""
"Complete ``<label>`` elements can also be generated using the :meth:`~django."
"forms.BoundField.label_tag`. For example:"
msgstr ""
"完整的 ``<label>`` 元素还可以使用 :meth:`~django.forms.BoundField.label_tag` "
"来生成。例如："

msgid "Rendering form error messages"
msgstr "渲染表单错误信息"

msgid ""
"Of course, the price of this flexibility is more work. Until now we haven't "
"had to worry about how to display form errors, because that's taken care of "
"for us. In this example we have had to make sure we take care of any errors "
"for each field and any errors for the form as a whole. Note ``{{ form."
"non_field_errors }}`` at the top of the form and the template lookup for "
"errors on each field."
msgstr ""
"当然，这种灵活性的代价是要做更多的工作。到目前为止，我们不必担心如何显示表单"
"的错误信息，因为它们已经帮我们处理好了。下面的例子中，我们需要自己处理每个字"
"段的错误信息以及表单整体的所有错误信息。注意表单顶部的 ``{{ form."
"non_field_errors }}`` 以及模板中对每个字段查找错误信息。"

msgid ""
"Using ``{{ form.name_of_field.errors }}`` displays a list of form errors, "
"rendered as an unordered list. This might look like:"
msgstr ""
"使用 ``{{ form.name_of_field.errors }}`` 显示该字段的错误信息列表，它被渲染成"
"无序列表。看起来如下："

msgid ""
"The list has a CSS class of ``errorlist`` to allow you to style its "
"appearance. If you wish to further customize the display of errors you can "
"do so by looping over them:"
msgstr ""
"该列表有一个CSS class ``errorlist`` ，允许您自定义其样式。如果你想进一步自定"
"义错误信息的显示，您可以通过遍历它们来实现："

msgid ""
"Non-field errors (and/or hidden field errors that are rendered at the top of "
"the form when using helpers like ``form.as_p()``) will be rendered with an "
"additional class of ``nonfield`` to help distinguish them from field-"
"specific errors. For example, ``{{ form.non_field_errors }}`` would look "
"like:"
msgstr ""
"非字段验证错误信息（或者通过使用像 ``form.as_p()`` 这样的辅助方法渲染产生在表"
"单顶部的隐藏错误信息）渲染后会额外带上一个class  ``nonfield`` 以便与字段验证"
"错误信息区分。例如， ``{{ form.non_field_errors }}`` 渲染后会像这样："

msgid ""
"See :doc:`/ref/forms/api` for more on errors, styling, and working with form "
"attributes in templates."
msgstr ""
"更多错误、样式以及在模板中使用表单属性的内容，请参阅 :doc:`/ref/forms/api` 。"

msgid "Looping over the form's fields"
msgstr "遍历表单字段"

msgid ""
"If you're using the same HTML for each of your form fields, you can reduce "
"duplicate code by looping through each field in turn using a ``{% for %}`` "
"loop:"
msgstr ""
"如果您要给每个表单字段使用相同的HTML，您可以用 ``{% for %}`` 依次循环遍历每个"
"字段来减少重复代码："

msgid "Useful attributes on ``{{ field }}`` include:"
msgstr " ``{{ field }}`` 中有用的属性包括："

msgid "``{{ field.label }}``"
msgstr " ``{{ field.label }}`` "

msgid "The label of the field, e.g. ``Email address``."
msgstr "字段的label，比如 ``Email address``。"

msgid "``{{ field.label_tag }}``"
msgstr " ``{{ field.label_tag }}`` "

msgid ""
"The field's label wrapped in the appropriate HTML ``<label>`` tag. This "
"includes the form's :attr:`~django.forms.Form.label_suffix`. For example, "
"the default ``label_suffix`` is a colon::"
msgstr ""
"该字段的label封装在相应的HTML ``<label>`` 标签中。它包含表单的 :attr:"
"`~django.forms.Form.label_suffix` 。例如，默认的 ``label_suffix`` 是一个冒"
"号："

msgid "``{{ field.id_for_label }}``"
msgstr " ``{{ field.id_for_label }}`` "

msgid ""
"The ID that will be used for this field (``id_email`` in the example above). "
"If you are constructing the label manually, you may want to use this in lieu "
"of ``label_tag``. It's also useful, for example, if you have some inline "
"JavaScript and want to avoid hardcoding the field's ID."
msgstr ""
"用于该字段的 ID（像上面的例子中的 ``id_email`` ）。如果您要手动构建label，您"
"可能要用这个来替换 ``label_tag`` 。例如，如果你有一些内嵌的JavaScript并且想要"
"避免硬编码字段的ID，这也很有用。"

msgid "``{{ field.value }}``"
msgstr " ``{{ field.value }}`` "

msgid "The value of the field. e.g ``someone@example.com``."
msgstr "字段的值。例如 ``someone@example.com`` 。"

msgid "``{{ field.html_name }}``"
msgstr " ``{{ field.html_name }}`` "

msgid ""
"The name of the field that will be used in the input element's name field. "
"This takes the form prefix into account, if it has been set."
msgstr ""
"字段名称：用于其输入元素的name属性中。如果设置了表单前缀，它也会被加进去。"

msgid "``{{ field.help_text }}``"
msgstr " ``{{ field.help_text }}`` "

msgid "Any help text that has been associated with the field."
msgstr "与该字段关联的帮助文本。"

msgid "``{{ field.errors }}``"
msgstr " ``{{ field.errors }}`` "

msgid ""
"Outputs a ``<ul class=\"errorlist\">`` containing any validation errors "
"corresponding to this field. You can customize the presentation of the "
"errors with a ``{% for error in field.errors %}`` loop. In this case, each "
"object in the loop is a simple string containing the error message."
msgstr ""
"输出一个包含对应该字段所有验证错误信息的 ``<ul class=\"errorlist\">`` 。您可"
"以用 ``{% for error in field.errors %}`` 循环来自定义错误信息的显示。这种情况"
"下，循环中的每个对象只是一个包含错误信息的简单字符串。"

msgid "``{{ field.is_hidden }}``"
msgstr " ``{{ field.is_hidden }}`` "

msgid ""
"This attribute is ``True`` if the form field is a hidden field and ``False`` "
"otherwise. It's not particularly useful as a template variable, but could be "
"useful in conditional tests such as:"
msgstr ""
"如果是隐藏字段，这个属性为 ``True`` ，否则为 ``False`` 。它作为模板变量没多大"
"作用，但可用于条件测试，例如："

msgid "``{{ field.field }}``"
msgstr " ``{{ field.field }}`` "

msgid ""
"The :class:`~django.forms.Field` instance from the form class that this :"
"class:`~django.forms.BoundField` wraps. You can use it to access :class:"
"`~django.forms.Field` attributes, e.g. ``{{ char_field.field.max_length }}``."
msgstr ""
"表单类中的 :class:`~django.forms.Field` 实例由 :class:`~django.forms."
"BoundField` 封装。您可以用它来访问 :class:`~django.forms.Field` 的属性，比如 "
"``{{ char_field.field.max_length }}`` 。"

msgid ""
"For a complete list of attributes and methods, see :class:`~django.forms."
"BoundField`."
msgstr ""
"有关字段属性及方法的完整清单，请参阅 :class:`~django.forms.BoundField` 。"

msgid "Looping over hidden and visible fields"
msgstr "遍历隐藏字段和可见字段"

msgid ""
"If you're manually laying out a form in a template, as opposed to relying on "
"Django's default form layout, you might want to treat ``<input type=\"hidden"
"\">`` fields differently from non-hidden fields. For example, because hidden "
"fields don't display anything, putting error messages \"next to\" the field "
"could cause confusion for your users -- so errors for those fields should be "
"handled differently."
msgstr ""
"如果您在手动布置模板中的表单，而不是依靠Django的默认表单布局，您可能希望将 "
"``<input type=\"hidden\">`` 字段与非隐藏字段区别开来。例如，因为隐藏字段不显"
"示任何内容，将错误消息“放到”该字段旁边可能会导致用户混淆——所以这些字段的错误"
"应该以不同的方式处理。"

msgid ""
"Django provides two methods on a form that allow you to loop over the hidden "
"and visible fields independently: ``hidden_fields()`` and "
"``visible_fields()``. Here's a modification of an earlier example that uses "
"these two methods:"
msgstr ""
"Django在表单上提供了两种方法，允许您独立地遍历隐藏和可见的字段： "
"``hidden_fields()`` 和 ``visible_fields()`` 。以下是使用这两种方法对之前示例"
"的修改："

msgid ""
"This example does not handle any errors in the hidden fields. Usually, an "
"error in a hidden field is a sign of form tampering, since normal form "
"interaction won't alter them. However, you could easily insert some error "
"displays for those form errors, as well."
msgstr ""
"这个示例没有处理隐藏字段中的任何错误信息。通常，隐藏字段中的错误象征着表单被"
"篡改，因为正常的表单交互不会去改变它们。但是，您也可以轻松地为这些表单错误插"
"入一些错误信息显示出来。"

msgid "Reusable form templates"
msgstr "可复用的表单模板"

msgid ""
"If your site uses the same rendering logic for forms in multiple places, you "
"can reduce duplication by saving the form's loop in a standalone template "
"and using the :ttag:`include` tag to reuse it in other templates:"
msgstr ""
"如果您的网站在多个位置对表单使用相同的渲染逻辑，您可以通过将表单的循环保存到"
"独立的模板中，然后在其他模板中使用 :ttag:`include` 标签来减少代码重复："

msgid ""
"If the form object passed to a template has a different name within the "
"context, you can alias it using the ``with`` argument of the :ttag:`include` "
"tag:"
msgstr ""
"如果传递给模板的表单对象在上下文中具有不同的名称，您可以使用 :ttag:`include` "
"标签的 ``with`` 属性来给它取别名。"

msgid ""
"If you find yourself doing this often, you might consider creating a custom :"
"ref:`inclusion tag<howto-custom-template-tags-inclusion-tags>`."
msgstr ""
"如果您发现自己经常这样做，您可能需要考虑创建一个自定义的 :ref:`包含标签"
"<howto-custom-template-tags-inclusion-tags>` 。"

msgid "Further topics"
msgstr "更多相关主题"

msgid "This covers the basics, but forms can do a whole lot more:"
msgstr "以上只涵盖了表单的基础知识，但它还可以做更多的事情："

msgid ":doc:`The Forms Reference </ref/forms/index>`"
msgstr " :doc:`表单参考 </ref/forms/index>`"

msgid ""
"Covers the full API reference, including form fields, form widgets, and form "
"and field validation."
msgstr "覆盖完整的API 参考，包括表单字段、表单控件以及表单和字段的验证。"

msgid "Form Assets (the ``Media`` class)"
msgstr "表单资源（ ``Media`` 类）"

msgid ""
"Rendering an attractive and easy-to-use Web form requires more than just "
"HTML - it also requires CSS stylesheets, and if you want to use fancy "
"\"Web2.0\" widgets, you may also need to include some JavaScript on each "
"page. The exact combination of CSS and JavaScript that is required for any "
"given page will depend upon the widgets that are in use on that page."
msgstr ""
"要渲染一个有吸引力且易于使用的Web表单不仅仅需要HTML，还需要CSS样式表，如果您"
"想使用多样的 \"Web2.0\" 组件，您还需要在每个页面上包含一些JavaScript。要在任"
"何给定模板上准确组合CSS和JavaScript取决于此页面上使用的组件。"

msgid ""
"This is where asset definitions come in. Django allows you to associate "
"different files -- like stylesheets and scripts -- with the forms and "
"widgets that require those assets. For example, if you want to use a "
"calendar to render DateFields, you can define a custom Calendar widget. This "
"widget can then be associated with the CSS and JavaScript that is required "
"to render the calendar. When the Calendar widget is used on a form, Django "
"is able to identify the CSS and JavaScript files that are required, and "
"provide the list of file names in a form suitable for easy inclusion on your "
"Web page."
msgstr ""
"这是资源定义的来源。Django允许您关联不同的文件——像样式表和脚本——以及需要这些"
"资源的表单和组件。例如，如果您想用日历来渲染DateFields，您可以自定义一个日历"
"组件。然后这个组件可以与渲染日历所需的CSS和JavaScript相关联。在表单上使用日历"
"组件时，Django能够识别所需的CSS和JavaScript文件，并提供表单中的文件名列表，简"
"便适合地包含到您的网页中。"

msgid "Assets and Django Admin"
msgstr "资源及Django Admin"

msgid ""
"The Django Admin application defines a number of customized widgets for "
"calendars, filtered selections, and so on. These widgets define asset "
"requirements, and the Django Admin uses the custom widgets in place of the "
"Django defaults. The Admin templates will only include those files that are "
"required to render the widgets on any given page."
msgstr ""
"Django Admin应用程序为日历、选择过滤及其他功能定义了一些定制的组件。这些组件"
"定义资源的需求，Django Admin使用自定义组件来代替Django的默认组件。Admin模板将"
"只会包含在页面上呈现组件所需的文件。"

msgid ""
"If you like the widgets that the Django Admin application uses, feel free to "
"use them in your own application! They're all stored in ``django.contrib."
"admin.widgets``."
msgstr ""
"如果您喜欢Django Admin应用程序使用的组件，您可以在应用中随意使用它们。它们都"
"位于 ``django.contrib.admin.widgets`` 。"

msgid "Which JavaScript toolkit?"
msgstr "哪个JavaScript工具包？"

msgid ""
"Many JavaScript toolkits exist, and many of them include widgets (such as "
"calendar widgets) that can be used to enhance your application. Django has "
"deliberately avoided blessing any one JavaScript toolkit. Each toolkit has "
"its own relative strengths and weaknesses - use whichever toolkit suits your "
"requirements. Django is able to integrate with any JavaScript toolkit."
msgstr ""
"现在有很多JavaScript工具包，它们中许多都包含组件（比如日历组件），可以用来改"
"善您的应用程序。Django刻意避免去推荐任何一个JavaScript工具包。每个工具包都有"
"自己的优点和缺点，使用适合您需求的工具包。Django能够与任何JavaScript工具包集"
"成。"

msgid "Assets as a static definition"
msgstr "资源作为静态定义"

msgid ""
"The easiest way to define assets is as a static definition. Using this "
"method, the declaration is an inner ``Media`` class. The properties of the "
"inner class define the requirements."
msgstr ""
"定义资源最简单方法是静态定义。要使用这种方法，声明是一个内部的 ``Media`` 类。"
"此内部类的属性定义了这个需求。"

msgid "Here's a simple example::"
msgstr "以下是一个简单的例子："

msgid ""
"This code defines a ``CalendarWidget``, which will be based on "
"``TextInput``. Every time the CalendarWidget is used on a form, that form "
"will be directed to include the CSS file ``pretty.css``, and the JavaScript "
"files ``animations.js`` and ``actions.js``."
msgstr ""
"这段代码定义了一个 ``CalendarWidget`` ，它继承自 ``TextInput`` 。每次"
"CalendarWidget在表单上使用时，该表单都会包含CSS文件 ``pretty.css`` ，以及"
"JavaScript文件 ``animations.js`` 和 ``actions.js`` 。"

msgid ""
"This static definition is converted at runtime into a widget property named "
"``media``. The list of assets for a ``CalendarWidget`` instance can be "
"retrieved through this property::"
msgstr ""
"这个静态定义在运行时被转换成名为 ``media`` 的组件属性。 ``CalendarWidget`` 实"
"例的资源列表可以通过这个属性获得："

msgid ""
"Here's a list of all possible ``Media`` options. There are no required "
"options."
msgstr "以下是所有可能的 ``Media`` 选项列表。没有一个是必需项。"

msgid "``css``"
msgstr " ``css`` "

msgid ""
"A dictionary describing the CSS files required for various forms of output "
"media."
msgstr "描述各种表单输出媒体所需的CSS文件的字典。"

msgid ""
"The values in the dictionary should be a tuple/list of file names. See :ref:"
"`the section on paths <form-asset-paths>` for details of how to specify "
"paths to these files."
msgstr ""
"字典中的值应该是一个文件名元组/列表。有关如何指定这些文件的路径的详细内容，请"
"参阅 :ref:`路径章节<form-asset-paths>` 。"

msgid ""
"The keys in the dictionary are the output media types. These are the same "
"types accepted by CSS files in media declarations: 'all', 'aural', "
"'braille', 'embossed', 'handheld', 'print', 'projection', 'screen', 'tty' "
"and 'tv'. If you need to have different stylesheets for different media "
"types, provide a list of CSS files for each output medium. The following "
"example would provide two CSS options -- one for the screen, and one for "
"print::"
msgstr ""
"字典中的键是输出媒体类型。它们和媒体声明中CSS文件接受的类型相"
"同：'all'、'aural'、'braille'、'embossed'、'handheld'、'print'、'projection'、'screen'、'tty' "
"和 'tv'。如果您需要针对不同媒体类型使用不同的样式表，就要给每个输出媒体提供一"
"个CSS文件列表。下面的示例提供了两个CSS选项——一个用于屏幕，一个用于打印："

msgid ""
"If a group of CSS files are appropriate for multiple output media types, the "
"dictionary key can be a comma separated list of output media types. In the "
"following example, TV's and projectors will have the same media "
"requirements::"
msgstr ""
"如果一组CSS文件适用于多种输出媒体类型，字典的键可以是以逗号分隔的输出媒体类型"
"列表。在下面的例子中，电视和投影机将具有相同的媒体需求："

msgid ""
"If this last CSS definition were to be rendered, it would become the "
"following HTML::"
msgstr "如果最后的这个CSS定义被渲染，它将成为下面的HTML："

msgid "``js``"
msgstr " ``js`` "

msgid ""
"A tuple describing the required JavaScript files. See :ref:`the section on "
"paths <form-asset-paths>` for details of how to specify paths to these files."
msgstr ""
"描述所需JavaScript文件的一个元组。有关如何指定这些文件的路径的详细内容，请参"
"阅 :ref:`路径章节 <form-asset-paths>` 。"

msgid "``extend``"
msgstr " ``extend`` "

msgid "A boolean defining inheritance behavior for ``Media`` declarations."
msgstr "定义了 ``Media`` 声明继承行为的一个布尔值。"

msgid ""
"By default, any object using a static ``Media`` definition will inherit all "
"the assets associated with the parent widget. This occurs regardless of how "
"the parent defines its own requirements. For example, if we were to extend "
"our basic Calendar widget from the example above::"
msgstr ""
"默认情况下，使用静态 ``Media`` 定义的对象都将继承与父组件关联的所有资源。无论"
"父级如何定义自己的需求，都会发生这种情况。例如，如果我们要从上面的例子中扩展"
"我们的基础日历组件："

msgid ""
"The FancyCalendar widget inherits all the assets from its parent widget. If "
"you don't want ``Media`` to be inherited in this way, add an "
"``extend=False`` declaration to the ``Media`` declaration::"
msgstr ""
"FancyCalendar组件从其父组件继承所有资源。如果您不想用这种方式继承 "
"``Media`` ，要在 ``Media`` 声明中添加一个 ``extend=False`` 声明："

msgid ""
"If you require even more control over inheritance, define your assets using "
"a :ref:`dynamic property <dynamic-property>`. Dynamic properties give you "
"complete control over which files are inherited, and which are not."
msgstr ""
"如果您需要更多的继承控制，用一个 :ref:`动态属性 <dynamic-property>` 定义你"
"的 。动态属性使您可以完全控制哪些文件是否继承。"

msgid "``Media`` as a dynamic property"
msgstr "把 ``Media`` 作为动态属性"

msgid ""
"If you need to perform some more sophisticated manipulation of asset "
"requirements, you can define the ``media`` property directly. This is done "
"by defining a widget property that returns an instance of ``forms.Media``.  "
"The constructor for ``forms.Media`` accepts ``css`` and ``js`` keyword "
"arguments in the same format as that used in a static media definition."
msgstr ""
"如果您需要执行一些更复杂的资源需求操作，你可以直接定义 ``media`` 属性。这是通"
"过定义一个返回 ``forms.Media`` 实例的组件属性来实现的。这个 ``forms.Media`` "
"的构造函数接受 ``css`` 和 ``js`` 关键字参数，与静态媒体定义中使用的格式相同。"

msgid ""
"For example, the static definition for our Calendar Widget could also be "
"defined in a dynamic fashion::"
msgstr "例如，我们也可以以动态的方式定义日历组件的静态定义："

msgid ""
"See the section on `Media objects`_ for more details on how to construct "
"return values for dynamic ``media`` properties."
msgstr ""
"更多有关如何为动态 ``media`` 属性构建返回值的内容，请参阅 `媒体对象` 章节。"

msgid "Paths in asset definitions"
msgstr "资源定义中的路径"

msgid ""
"Paths used to specify assets can be either relative or absolute. If a path "
"starts with ``/``, ``http://`` or ``https://``, it will be interpreted as an "
"absolute path, and left as-is. All other paths will be prepended with the "
"value of the appropriate prefix. If the :mod:`django.contrib.staticfiles` "
"app is installed, it will be used to serve assets."
msgstr ""
"用于指定资源的路径可以是相对路径的也可以是绝对路径的。如果路径以 ``/`` 、 "
"``http://`` 或 ``https://`` 开头，则它将被解释为绝对路径，并保持原样。所有其"
"他路径都会以相应值作为前缀。如果在settings中设置了 :mod:`django.contrib."
"staticfiles` ，就可以用来服务于资源。"

msgid ""
"Whether or not you use :mod:`django.contrib.staticfiles`,  the :setting:"
"`STATIC_URL` and :setting:`STATIC_ROOT` settings are required to render a "
"complete web page."
msgstr ""
"无论您是否使用 :mod:`django.contrib.staticfiles` ，都需要设置 :setting:"
"`STATIC_URL` 和 :setting:`STATIC_ROOT` 来渲染一张完整的网页。"

msgid ""
"To find the appropriate prefix to use, Django will check if the :setting:"
"`STATIC_URL` setting is not ``None`` and automatically fall back to using :"
"setting:`MEDIA_URL`. For example, if the :setting:`MEDIA_URL` for your site "
"was ``'http://uploads.example.com/'`` and :setting:`STATIC_URL` was "
"``None``::"
msgstr ""
"为了找到相应的前缀来使用，Django会去检查 :setting:`STATIC_URL` 是否不为 "
"``None`` ，并自动回退使用 :setting:`MEDIA_URL` 。例如，您的网站的 :setting:"
"`MEDIA_URL` 设置为 ``'http://uploads.example.com/'`` 且 :setting:"
"`STATIC_URL` 设置是 ``None`` ："

msgid "But if :setting:`STATIC_URL` is ``'http://static.example.com/'``::"
msgstr ""
"但如果 :setting:`STATIC_URL` 设置是 ``'http://static.example.com/'`` ："

msgid ""
"Or if :mod:`~django.contrib.staticfiles` is configured using the :class:"
"`~django.contrib.staticfiles.storage.ManifestStaticFilesStorage`::"
msgstr ""
"或者如果 :mod:`~django.contrib.staticfiles` 配置使用 :class:`~django.contrib."
"staticfiles.storage.ManifestStaticFilesStorage` ："

msgid "``Media`` objects"
msgstr "``Media`` 对象"

msgid ""
"When you interrogate the ``media`` attribute of a widget or form, the value "
"that is returned is a ``forms.Media`` object. As we have already seen, the "
"string representation of a ``Media`` object is the HTML required to include "
"the relevant files in the ``<head>`` block of your HTML page."
msgstr ""
"当您访问表单或者组件的 ``media`` 属性时，返回值是一个 ``forms.Media`` 对象。"
"正如我们已经看到的， ``Media`` 对象的字符串表示是一段需要在您HTML页面的 "
"``<head>`` 块中包含相关文件的HTML代码。"

msgid "However, ``Media`` objects have some other interesting properties."
msgstr "然而， ``Media`` 对象还有其他一些有趣的属性。"

msgid "Subsets of assets"
msgstr "资源的子集"

msgid ""
"If you only want files of a particular type, you can use the subscript "
"operator to filter out a medium of interest. For example::"
msgstr ""
"如果您只需要特定类型的文件，则可以使用下标运算符过滤出感兴趣的媒体文件。例"
"如："

msgid ""
"When you use the subscript operator, the value that is returned is a new "
"``Media`` object -- but one that only contains the media of interest."
msgstr ""
"当您使用下标运算符时，返回值是一个新的 ``Media`` 对象——但只包含感兴趣的媒体。"

msgid "Combining ``Media`` objects"
msgstr "合并 ``Media`` 对象"

msgid ""
"``Media`` objects can also be added together. When two ``Media`` objects are "
"added, the resulting ``Media`` object contains the union of the assets "
"specified by both::"
msgstr ""
"``Media`` 对象也可以添加到一起。当添加两个 ``Media`` 对象时，生成的 "
"``Media`` 对象包含两者指定的资源的并集："

msgid "Order of assets"
msgstr "资源的排序"

msgid ""
"The order in which assets are inserted into the DOM is often important. For "
"example, you may have a script that depends on jQuery. Therefore, combining "
"``Media`` objects attempts to preserve the relative order in which assets "
"are defined in each ``Media`` class."
msgstr ""
"资源插入DOM的顺序一般来说很重要。例如，您可能有一个依赖于jQuery的脚本。因此，"
"合并 ``Media`` 对象会尝试保持资源在每个 ``Media`` 类中定义的相对顺序。"

msgid ""
"Combining ``Media`` objects with assets in a conflicting order results in a "
"``MediaOrderConflictWarning``."
msgstr ""
"合并 ``Media`` 对象时，如果资源排序冲突，会导致警告提示： "
"``MediaOrderConflictWarning`` 。"

msgid ""
"In older versions, the assets of ``Media`` objects are concatenated rather "
"than merged in a way that tries to preserve the relative ordering of the "
"elements in each list."
msgstr ""
"在旧版本中， ``Media`` 对象的资源被串联起来而不是合并，试图保持每个列表中元素"
"的相对顺序。"

msgid "``Media`` on Forms"
msgstr "表单上的 ``Media`` "

msgid ""
"Widgets aren't the only objects that can have ``media`` definitions -- forms "
"can also define ``media``. The rules for ``media`` definitions on forms are "
"the same as the rules for widgets: declarations can be static or dynamic; "
"path and inheritance rules for those declarations are exactly the same."
msgstr ""
"组件不是唯一可以具有 ``media`` 定义的对象——表单也可以。表单上 ``media`` 定义"
"的规则与组件的规则相同：声明可以是静态的或动态的；声明的路径和继承规则也一模"
"一样。"

msgid ""
"Regardless of whether you define a ``media`` declaration, *all* Form objects "
"have a ``media`` property. The default value for this property is the result "
"of adding the ``media`` definitions for all widgets that are part of the "
"form::"
msgstr ""
"无论您是否定义了 ``media`` 声明，*所有*表单对象都有一个 ``media`` 属性。该属"
"性的默认值是这个表单的所有组件添加 ``media`` 定义的结果："

msgid ""
"If you want to associate additional assets with a form -- for example, CSS "
"for form layout -- simply add a ``Media`` declaration to the form::"
msgstr ""
"如果您想将其他资源与表单关联起来——例如，表单布局的CSS——只要向表单添加 "
"``Media`` 声明："

msgid "Creating forms from models"
msgstr "从模型创建表单"

msgid "``ModelForm``"
msgstr "``ModelForm``"

msgid ""
"If you're building a database-driven app, chances are you'll have forms that "
"map closely to Django models. For instance, you might have a ``BlogComment`` "
"model, and you want to create a form that lets people submit comments. In "
"this case, it would be redundant to define the field types in your form, "
"because you've already defined the fields in your model."
msgstr ""
"如果您正在构建一个数据库驱动的应用程序，那么您很有可能会用到与Django模型密切"
"相关的表单。例如，您可能有一个 ``BlogComment`` 模型，并且您想创建一个让用户提"
"交评论的表单。在这种情况下，在表单中定义字段类型是多余的，因为您已经在模型中"
"定义了字段。"

msgid ""
"For this reason, Django provides a helper class that lets you create a "
"``Form`` class from a Django model."
msgstr ""
"因此，Django 提供了一个辅助类让你可以从一个 Django 模型创建一个 ``Form`` 类。"

msgid ""
"The generated ``Form`` class will have a form field for every model field "
"specified, in the order specified in the ``fields`` attribute."
msgstr ""
"生成的 ``Form`` 类将按照 ``fields`` 属性中指定的顺序为每个指定的模型字段设置"
"一个表单字段。"

msgid ""
"Each model field has a corresponding default form field. For example, a "
"``CharField`` on a model is represented as a ``CharField`` on a form. A "
"model ``ManyToManyField`` is represented as a ``MultipleChoiceField``. Here "
"is the full list of conversions:"
msgstr ""
"每个模型字段都有一个对应的默认表单字段。例如，模型中的 ``CharField`` 在表单中"
"被表现为 ``CharField`` 。 ``ManyToManyField`` 则表现为 "
"``MultipleChoiceField`` 。以下是完整的转化清单："

msgid "Model field"
msgstr "模型字段"

msgid "Form field"
msgstr "表单字段"

msgid ":class:`AutoField`"
msgstr ":class:`AutoField`"

msgid "Not represented in the form"
msgstr "不呈现在表单中"

msgid ":class:`BigAutoField`"
msgstr ":class:`BigAutoField`"

msgid ":class:`BigIntegerField`"
msgstr ":class:`BigIntegerField`"

msgid ""
":class:`~django.forms.IntegerField` with ``min_value`` set to "
"-9223372036854775808 and ``max_value`` set to 9223372036854775807."
msgstr ""
":class:`~django.forms.IntegerField` 将 ``min_value`` 设置"
"为-9223372036854775808，将 ``max_value`` 设置为9223372036854775807。"

msgid ":class:`BinaryField`"
msgstr ""

msgid ""
":class:`~django.forms.CharField`, if :attr:`~.Field.editable` is set to "
"``True`` on the model field, otherwise not represented in the form."
msgstr ""

msgid ":class:`BooleanField`"
msgstr ":class:`BooleanField`"

msgid ""
":class:`~django.forms.BooleanField`, or :class:`~django.forms."
"NullBooleanField` if ``null=True``."
msgstr ""

msgid ":class:`CharField`"
msgstr ":class:`CharField`"

msgid ""
":class:`~django.forms.CharField` with ``max_length`` set to the model "
"field's ``max_length`` and :attr:`~django.forms.CharField.empty_value` set "
"to ``None`` if ``null=True``."
msgstr ""
":class:`~django.forms.CharField` 将 ``max_length`` 设置为模型字段的 "
"``max_length`` ，如果模型中设置了 ``null=True`` ，会将 :attr:`~django.forms."
"CharField.empty_value` 设置为 ``None`` 。"

msgid ":class:`DateField`"
msgstr ":class:`DateField`"

msgid ":class:`~django.forms.DateField`"
msgstr ":class:`~django.forms.DateField`"

msgid ":class:`DateTimeField`"
msgstr ":class:`DateTimeField`"

msgid ":class:`~django.forms.DateTimeField`"
msgstr ":class:`~django.forms.DateTimeField`"

msgid ":class:`DecimalField`"
msgstr ":class:`DecimalField`"

msgid ":class:`~django.forms.DecimalField`"
msgstr ":class:`~django.forms.DecimalField`"

msgid ":class:`EmailField`"
msgstr ":class:`EmailField`"

msgid ":class:`~django.forms.EmailField`"
msgstr ":class:`~django.forms.EmailField`"

msgid ":class:`FileField`"
msgstr ":class:`FileField`"

msgid ":class:`~django.forms.FileField`"
msgstr ":class:`~django.forms.FileField`"

msgid ":class:`FilePathField`"
msgstr ":class:`FilePathField`"

msgid ":class:`~django.forms.FilePathField`"
msgstr ":class:`~django.forms.FilePathField`"

msgid ":class:`FloatField`"
msgstr ":class:`FloatField`"

msgid ":class:`~django.forms.FloatField`"
msgstr ":class:`~django.forms.FloatField`"

msgid ":class:`ForeignKey`"
msgstr ":class:`ForeignKey`"

msgid ":class:`~django.forms.ModelChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelChoiceField` （见下文）"

msgid "``ImageField``"
msgstr "``ImageField``"

msgid ":class:`~django.forms.ImageField`"
msgstr ":class:`~django.forms.ImageField`"

msgid ":class:`IntegerField`"
msgstr ":class:`IntegerField`"

msgid ":class:`~django.forms.IntegerField`"
msgstr ":class:`~django.forms.IntegerField`"

msgid "``IPAddressField``"
msgstr "``IPAddressField``"

msgid ":class:`GenericIPAddressField`"
msgstr ":class:`GenericIPAddressField`"

msgid ":class:`~django.forms.GenericIPAddressField`"
msgstr ":class:`~django.forms.GenericIPAddressField`"

msgid ":class:`ManyToManyField`"
msgstr ":class:`ManyToManyField`"

msgid ":class:`~django.forms.ModelMultipleChoiceField` (see below)"
msgstr ":class:`~django.forms.ModelMultipleChoiceField` （见下文）"

msgid ":class:`NullBooleanField`"
msgstr ":class:`NullBooleanField`"

msgid ":class:`~django.forms.NullBooleanField`"
msgstr ":class:`~django.forms.NullBooleanField`"

msgid ":class:`PositiveIntegerField`"
msgstr ":class:`PositiveIntegerField`"

msgid ":class:`PositiveSmallIntegerField`"
msgstr ":class:`PositiveSmallIntegerField`"

msgid ":class:`SlugField`"
msgstr ":class:`SlugField`"

msgid ":class:`~django.forms.SlugField`"
msgstr ":class:`~django.forms.SlugField`"

msgid ":class:`SmallIntegerField`"
msgstr ":class:`SmallIntegerField`"

msgid ":class:`TextField`"
msgstr ":class:`TextField`"

msgid ":class:`~django.forms.CharField` with ``widget=forms.Textarea``"
msgstr ":class:`~django.forms.CharField` 设置中 ``widget=forms.Textarea``"

msgid ":class:`TimeField`"
msgstr ":class:`TimeField`"

msgid ":class:`~django.forms.TimeField`"
msgstr ":class:`~django.forms.TimeField`"

msgid ":class:`URLField`"
msgstr ":class:`URLField`"

msgid ":class:`~django.forms.URLField`"
msgstr ":class:`~django.forms.URLField`"

msgid ""
"As you might expect, the ``ForeignKey`` and ``ManyToManyField`` model field "
"types are special cases:"
msgstr ""
"如您所料， ``ForeignKey`` 和 ``ManyToManyField`` 模型字段类型是特殊情况："

msgid ""
"``ForeignKey`` is represented by ``django.forms.ModelChoiceField``, which is "
"a ``ChoiceField`` whose choices are a model ``QuerySet``."
msgstr ""
"``ForeignKey`` 由 ``django.forms.ModelChoiceField`` 表示， 它是一个 "
"``ChoiceField`` ，其选项是一个模型的 ``QuerySet`` 。"

msgid ""
"``ManyToManyField`` is represented by ``django.forms."
"ModelMultipleChoiceField``, which is a ``MultipleChoiceField`` whose choices "
"are a model ``QuerySet``."
msgstr ""
"``ManyToManyField`` 由 ``django.forms.ModelMultipleChoiceField`` 表示，它是一"
"个 ``MultipleChoiceField`` ，其选项为一个模型 ``QuerySet`` 。"

msgid "In addition, each generated form field has attributes set as follows:"
msgstr "另外，每个生成的表单字段的属性设置如下："

msgid ""
"If the model field has ``blank=True``, then ``required`` is set to ``False`` "
"on the form field. Otherwise, ``required=True``."
msgstr ""
"如果模型字段设置了 ``blank=True`` ，那么表单字段的 ``required`` 属性被设置为 "
"``False`` ，否则 ``required=True`` 。"

msgid ""
"The form field's ``label`` is set to the ``verbose_name`` of the model "
"field, with the first character capitalized."
msgstr ""
"表单字段的 ``label`` 设置为模型字段的 ``verbose_name`` ，并且首字母大写。"

msgid ""
"The form field's ``help_text`` is set to the ``help_text`` of the model "
"field."
msgstr "表单字段的 ``help_text`` 设置为模型字段的 ``help_text`` 。"

msgid ""
"If the model field has ``choices`` set, then the form field's ``widget`` "
"will be set to ``Select``, with choices coming from the model field's "
"``choices``. The choices will normally include the blank choice which is "
"selected by default. If the field is required, this forces the user to make "
"a selection. The blank choice will not be included if the model field has "
"``blank=False`` and an explicit ``default`` value (the ``default`` value "
"will be initially selected instead)."
msgstr ""
"如果模型字段设置了 ``choices`` ，那么表单字段的 ``widget`` 会被设置为 "
"``Select`` ，其选项来自模型字段的 ``choices`` 。这些选项通常包含一个默认选中"
"的空选项。如果字段设置了必填，则会强制用户进行选择。如果模型字段设置了 "
"``blank=False`` 以及一个明确的 ``default`` 值，则表单字段中不会包含空选项（默"
"认会选中 ``default`` 值）。"

msgid ""
"Finally, note that you can override the form field used for a given model "
"field. See `Overriding the default fields`_ below."
msgstr ""
"最后，请注意，您可以覆盖给定模型字段对应的表单字段。参见下文  `覆盖默认字段"
"`_ 。"

msgid "Consider this set of models::"
msgstr "思考下下面这组模型："

msgid ""
"With these models, the ``ModelForm`` subclasses above would be roughly "
"equivalent to this (the only difference being the ``save()`` method, which "
"we'll discuss in a moment.)::"
msgstr ""
"通过这些模型，上面的 ``ModelForm`` 子类将大致等同于（唯一的区别是 ``save()`` "
"方法，这我们稍后会讨论）："

msgid "Validation on a ``ModelForm``"
msgstr "验证 ``ModelForm``"

msgid "There are two main steps involved in validating a ``ModelForm``:"
msgstr "验证 ``ModelForm`` 主要涉及两个步骤："

msgid ":doc:`Validating the form </ref/forms/validation>`"
msgstr ":doc:`验证表单</ref/forms/validation>`"

msgid ":ref:`Validating the model instance <validating-objects>`"
msgstr ":ref:`验证模型实例<validating-objects>`"

msgid ""
"Just like normal form validation, model form validation is triggered "
"implicitly when calling :meth:`~django.forms.Form.is_valid()` or accessing "
"the :attr:`~django.forms.Form.errors` attribute and explicitly when calling "
"``full_clean()``, although you will typically not use the latter method in "
"practice."
msgstr ""
"和普通的表单验证一样，模型表单验证在调用 :meth:`~django.forms.Form."
"is_valid()` 或访问 :attr:`~django.forms.Form.errors` 属性时隐式触发，在调用 "
"``full_clean()`` 时显式触发，尽管在实际应用中你不大会用到后一种方法。"

msgid ""
"``Model`` validation (:meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>`) is triggered from within the form validation step, right "
"after the form's ``clean()`` method is called."
msgstr ""
"``模型`` 验证（ :meth:`Model.full_clean() <django.db.models.Model."
"full_clean()>` ）在表单验证步骤中紧随表单的 ``clean()`` 方法被调用后触发。"

msgid ""
"The cleaning process modifies the model instance passed to the ``ModelForm`` "
"constructor in various ways. For instance, any date fields on the model are "
"converted into actual date objects. Failed validation may leave the "
"underlying model instance in an inconsistent state and therefore it's not "
"recommended to reuse it."
msgstr ""
"Clean 过程会以各种方式去修改传递给 ``ModelForm`` 构造方法的模型实例。例如，模"
"型上的所有日期字段都将转换为实际的日期对象。验证失败可能会使底层模型实例处于"
"不一致状态，因此不推荐对其重用。"

msgid "Overriding the clean() method"
msgstr "覆盖clean()方法 "

msgid ""
"You can override the ``clean()`` method on a model form to provide "
"additional validation in the same way you can on a normal form."
msgstr ""
"您可以重写模型表单上的 ``clean()`` 方法来提供额外的验证，方式和普通的表单一"
"样。"

msgid ""
"A model form instance attached to a model object will contain an "
"``instance`` attribute that gives its methods access to that specific model "
"instance."
msgstr ""
"访问模型对象对应的表单实例包含一个 ``instance`` 属性，让它可以访问对应的模型"
"实例。"

msgid ""
"The ``ModelForm.clean()`` method sets a flag that makes the :ref:`model "
"validation <validating-objects>` step validate the uniqueness of model "
"fields that are marked as ``unique``, ``unique_together`` or "
"``unique_for_date|month|year``."
msgstr ""
"``ModelForm.clean()`` 方法设置了一个标识符，使程序在 :ref:`模型验证 "
"<validating-objects>`  这步去验证标记为 ``unique`` 、 ``unique_together`` 或 "
"``unique_for_date|month|year`` 的模型字段的唯一性。"

msgid ""
"If you would like to override the ``clean()`` method and maintain this "
"validation, you must call the parent class's ``clean()`` method."
msgstr ""
"如果您想覆盖 ``clean()`` 方法并保持当前的验证，您必须调用父类的 ``clean()`` "
"方法。"

msgid "Interaction with model validation"
msgstr "与模型验证交互"

msgid ""
"As part of the validation process, ``ModelForm`` will call the ``clean()`` "
"method of each field on your model that has a corresponding field on your "
"form. If you have excluded any model fields, validation will not be run on "
"those fields. See the :doc:`form validation </ref/forms/validation>` "
"documentation for more on how field cleaning and validation work."
msgstr ""
"作为验证过程的一部分， ``ModelForm`` 将调用模型上与表单字段对应的每个字段的 "
"``clean()`` 方法。如果您排除了一些模型字段，则验证将不会在这些字段上运行。更"
"多有关字段clean及验证是如何工作的内容，请参阅 :doc:`表单验证 </ref/forms/"
"validation>` 文档。"

msgid ""
"The model's ``clean()`` method will be called before any uniqueness checks "
"are made. See :ref:`Validating objects <validating-objects>` for more "
"information on the model's ``clean()`` hook."
msgstr ""
"模型的 ``clean()`` 方法会在所有唯一性检查之前被调用。有关模型 ``clean()`` 钩"
"子的更多信息，请参阅 :ref:`验证对象 <validating-objects>` 。"

msgid "Considerations regarding model's ``error_messages``"
msgstr "有关模型的 ``error_messages`` 的注意事项"

msgid ""
"Error messages defined at the :attr:`form field <django.forms.Field."
"error_messages>` level or at the :ref:`form Meta <modelforms-overriding-"
"default-fields>` level always take precedence over the error messages "
"defined at the :attr:`model field <django.db.models.Field.error_messages>` "
"level."
msgstr ""
"在 :attr:`表单字段 <django.forms.Field.error_messages>` 级别或者 :ref:`表单 "
"Meta <modelforms-overriding-default-fields>` 级别定义的错误信息优先级总是高于"
"在 :attr:`模型字段 <django.db.models.Field.error_messages>` 级别定义的。"

msgid ""
"Error messages  defined on :attr:`model fields <django.db.models.Field."
"error_messages>` are only used when the ``ValidationError`` is raised during "
"the :ref:`model validation <validating-objects>` step and no corresponding "
"error messages are defined at the form level."
msgstr ""
"在 :attr:`模型字段 <django.db.models.Field.error_messages>` 上定义的错误信息"
"只有在 :ref:`模型验证 <validating-objects>` 步骤引发 ``ValidationError`` 时才"
"会使用，并且没有在表单级定义相应的错误信息。"

msgid ""
"You can override the error messages from ``NON_FIELD_ERRORS`` raised by "
"model validation by adding the :data:`~django.core.exceptions."
"NON_FIELD_ERRORS` key to the ``error_messages`` dictionary of the "
"``ModelForm``’s inner ``Meta`` class::"
msgstr ""
"您可以通过添加 :data:`~django.core.exceptions.NON_FIELD_ERRORS` 键到 "
"``ModelForm`` 内部的 ``Meta`` 类的 ``error_messages`` 中来覆盖模型验证引发的 "
"``NON_FIELD_ERRORS`` 错误信息。"

msgid "The ``save()`` method"
msgstr "``save()`` 方法"

msgid ""
"Every ``ModelForm`` also has a ``save()`` method. This method creates and "
"saves a database object from the data bound to the form. A subclass of "
"``ModelForm`` can accept an existing model instance as the keyword argument "
"``instance``; if this is supplied, ``save()`` will update that instance. If "
"it's not supplied, ``save()`` will create a new instance of the specified "
"model:"
msgstr ""
"每个 ``ModelForm`` 还有一个 ``save()`` 方法。此方法根据绑定到表单的数据创建并"
"保存数据库对象。 ``ModelForm`` 的子类可接受一个现有的模型实例作为关键字参数 "
"``instance`` ；如果提供了，则 ``save()`` 会更新这个实例。如果没有，则 "
"``save()`` 会创建一个对应模型的新实例。"

msgid ""
"Note that if the form :ref:`hasn't been validated <validation-on-"
"modelform>`, calling ``save()`` will do so by checking ``form.errors``. A "
"``ValueError`` will be raised if the data in the form doesn't validate -- i."
"e., if ``form.errors`` evaluates to ``True``."
msgstr ""
"请注意，如果表单 :ref:`尚未验证 <validation-on-modelform>` ，调用 ``save()`` "
"将通过检查 ``form.errors`` 来实现验证。如果表单验证不过，则会引发 "
"``ValueError`` —— 比如，如果 ``form.errors`` 返回 ``True`` 。"

msgid ""
"If an optional field doesn't appear in the form's data, the resulting model "
"instance uses the model field :attr:`~django.db.models.Field.default`, if "
"there is one, for that field. This behavior doesn't apply to fields that "
"use :class:`~django.forms.CheckboxInput`, :class:`~django.forms."
"CheckboxSelectMultiple`, or :class:`~django.forms.SelectMultiple` (or any "
"custom widget whose :meth:`~django.forms.Widget.value_omitted_from_data` "
"method always returns ``False``) since an unchecked checkbox and unselected "
"``<select multiple>`` don't appear in the data of an HTML form submission. "
"Use a custom form field or widget if you're designing an API and want the "
"default fallback behavior for a field that uses one of these widgets."
msgstr ""
"如果一个可选字段没有出现在表单的数据中，并且您给这个模型字段设置了 :attr:"
"`~django.db.models.Field.default` ，那么对应的模型实例会使用这个值作为结果。"
"此行为不适用于使用以下组件的字段： :class:`~django.forms.CheckboxInput` 、 :"
"class:`~django.forms.CheckboxSelectMultiple` 或者 :class:`~django.forms."
"SelectMultiple` （或者所有其 :meth:`~django.forms.Widget."
"value_omitted_from_data` 方法总是返回 ``False`` 的组件），因为未勾选的复选框"
"和未选中的 ``<select multiple>`` 不会出现在HTML表单提交的数据中。如果您正在设"
"计API并且希望使用这些组件之一的字段有默认回退行为，请使用自定义表单字段或组"
"件。"

msgid ""
"This ``save()`` method accepts an optional ``commit`` keyword argument, "
"which accepts either ``True`` or ``False``. If you call ``save()`` with "
"``commit=False``, then it will return an object that hasn't yet been saved "
"to the database. In this case, it's up to you to call ``save()`` on the "
"resulting model instance. This is useful if you want to do custom processing "
"on the object before saving it, or if you want to use one of the "
"specialized :ref:`model saving options <ref-models-force-insert>`. "
"``commit`` is ``True`` by default."
msgstr ""
"``save()`` 方法接受一个可选参数 ``commit`` ，它的值是 ``True`` 或者 "
"``False`` 。如果调用 ``save()`` 的时候使用 ``commit=False`` ，那么它会返回一"
"个尚未保存到数据库的对象。在这种情况下，需要您自己在生成的模型实例上调用 "
"``save()`` 。如果要在保存对象之前对对象执行自定义操作，或者要使用其中一个专用"
"的 :ref:`模型保存选项 <ref-models-force-insert>` ，这很有用。 ``commit`` 的值"
"默认为 ``True`` 。"

msgid ""
"Another side effect of using ``commit=False`` is seen when your model has a "
"many-to-many relation with another model. If your model has a many-to-many "
"relation and you specify ``commit=False`` when you save a form, Django "
"cannot immediately save the form data for the many-to-many relation. This is "
"because it isn't possible to save many-to-many data for an instance until "
"the instance exists in the database."
msgstr ""
"另一个使用 ``commit=False`` 的作用，您可以在模型与另一个模型有多对多关系的时"
"候看到。如果您的模型具有多对多关系，并且在保存表单时指定了 "
"``commit=False`` ，Django无法立即保存多对多关系的表单数据。这是因为实例的多对"
"多数据只有实例在数据库中存在时才能保存。"

msgid ""
"To work around this problem, every time you save a form using "
"``commit=False``, Django adds a ``save_m2m()`` method to your ``ModelForm`` "
"subclass. After you've manually saved the instance produced by the form, you "
"can invoke ``save_m2m()`` to save the many-to-many form data. For example:"
msgstr ""
"要解决这个问题，Django会在您每次使用 ``commit=False`` 保存表单时，向 "
"``ModelForm`` 子类添加一个 ``save_m2m()`` 方法。在您手动保存表单生成的实例"
"后，可以调用 ``save_m2m()`` 来保存多对多的表单数据。例如："

msgid ""
"Calling ``save_m2m()`` is only required if you use ``save(commit=False)``. "
"When you use a simple ``save()`` on a form, all data -- including many-to-"
"many data -- is saved without the need for any additional method calls. For "
"example:"
msgstr ""
"只有在您使用 ``save(commit=False)`` 的时候才需要调用 ``save_m2m()`` 。当您在"
"表单上使用普通的 ``save()`` 时，无需调用其他方法，所有数据（包括多对多数据）"
"都会被保存。例如："

msgid ""
"Other than the ``save()`` and ``save_m2m()`` methods, a ``ModelForm`` works "
"exactly the same way as any other ``forms`` form. For example, the "
"``is_valid()`` method is used to check for validity, the ``is_multipart()`` "
"method is used to determine whether a form requires multipart file upload "
"(and hence whether ``request.FILES`` must be passed to the form), etc. See :"
"ref:`binding-uploaded-files` for more information."
msgstr ""
"除了  ``save()`` 和 ``save_m2m()`` 方法之外，``ModelForm`` 与普通的表单工作方"
"式一样。例如，用 ``is_valid()`` 方法来检查合法性，用 ``is_multipart()`` 方法"
"来确定表单是否需要multipart文件上传（之后是否必须将 ``request.FILES`` 传递给"
"表单），等等。更多相关信息，请参阅 :ref:`binding-uploaded-files` 。"

msgid "Selecting the fields to use"
msgstr "选择要使用的字段"

msgid ""
"It is strongly recommended that you explicitly set all fields that should be "
"edited in the form using the ``fields`` attribute. Failure to do so can "
"easily lead to security problems when a form unexpectedly allows a user to "
"set certain fields, especially when new fields are added to a model. "
"Depending on how the form is rendered, the problem may not even be visible "
"on the web page."
msgstr ""
"强烈建议您使用 ``fields`` 属性来显式设置所有应在表单中编辑的字段。如果不这样"
"做，当一张表单不慎允许用户设置某些字段，尤其是在将新字段添加到模型中时，很容"
"易导致安全问题。根据表单渲染方式的不同，甚至可能不会在网页上显示问题。"

msgid ""
"The alternative approach would be to include all fields automatically, or "
"blacklist only some. This fundamental approach is known to be much less "
"secure and has led to serious exploits on major websites (e.g. `GitHub "
"<https://github.com/blog/1068-public-key-security-vulnerability-and-"
"mitigation>`_)."
msgstr ""
"另一种方法是自动包含所有字段，其他放入黑名单。据了解，这种基本方法不太安全，"
"并已导致大型网站上出现严重漏洞（例如， `GitHub <https://github.com/blog/1068-"
"public-key-security-vulnerability-and-mitigation>`_ ）。"

msgid ""
"There are, however, two shortcuts available for cases where you can "
"guarantee these security concerns do not apply to you:"
msgstr "但是，有两种简单的方法保证你不会出现这些安全问题："

msgid ""
"Set the ``fields`` attribute to the special value ``'__all__'`` to indicate "
"that all fields in the model should be used. For example::"
msgstr ""
"将 ``fields`` 属性设置为特殊值 ``'__all__'`` 以表明需要使用模型中的所有字段。"
"例如："

msgid ""
"Set the ``exclude`` attribute of the ``ModelForm``’s inner ``Meta`` class to "
"a list of fields to be excluded from the form."
msgstr ""
"将 ``ModelForm`` 中Meta类的 ``exclude`` 属性设置为表单中需要排除的字段列表。"

msgid ""
"Since the ``Author`` model has the 3 fields ``name``, ``title`` and "
"``birth_date``, this will result in the fields ``name`` and ``birth_date`` "
"being present on the form."
msgstr ""
"由于 ``Author`` 模型有三个字段 ``name``、 ``title`` 和 ``birth_date`` ，上例"
"的结果是字段 ``name`` 和 ``birth_date`` 会呈现在表单中。"

msgid ""
"If either of these are used, the order the fields appear in the form will be "
"the order the fields are defined in the model, with ``ManyToManyField`` "
"instances appearing last."
msgstr ""
"不管使用哪一种，字段会按模型中定义的顺序在表单中出现， ``ManyToManyField`` 会"
"排在最后。"

msgid ""
"In addition, Django applies the following rule: if you set "
"``editable=False`` on the model field, *any* form created from the model via "
"``ModelForm`` will not include that field."
msgstr ""
"另外，Django有个规则：如果您在模型字段中定义了 ``editable=False`` ， *任何*使"
"用 ``ModelForm`` 给该模型创建的表单都不会包含这个字段。"

msgid ""
"Any fields not included in a form by the above logic will not be set by the "
"form's ``save()`` method. Also, if you manually add the excluded fields back "
"to the form, they will not be initialized from the model instance."
msgstr ""
"任何没在上面逻辑中包含的表单字段都会不被表单的 ``save()`` 方法处理。另外，如"
"果手动将排除的字段添加回表单，它们也不会被模型实例初始化。"

msgid ""
"Django will prevent any attempt to save an incomplete model, so if the model "
"does not allow the missing fields to be empty, and does not provide a "
"default value for the missing fields, any attempt to ``save()`` a "
"``ModelForm`` with missing fields will fail.  To avoid this failure, you "
"must instantiate your model with initial values for the missing, but "
"required fields::"
msgstr ""
"Django会阻止任何尝试保存不完整模型的行为，所以如果模型不允许缺省的字段为空，"
"并且没有为该字段提供缺省值，那么任何尝试用这种字段的 ``ModelForm`` 的 "
"``save()`` 方法都会失败。为了避免这种情况，您必须使用初始值实例化您模型中缺省"
"但又必填的字段："

msgid ""
"Alternatively, you can use ``save(commit=False)`` and manually set any extra "
"required fields::"
msgstr "或者，您可以使用 ``save(commit=False)`` 然后手动设置其他必填字段："

msgid ""
"See the `section on saving forms`_ for more details on using "
"``save(commit=False)``."
msgstr ""
"更多关于使用 ``save(commit=False)`` 的详细内容，请参阅 `保存表单章节`_ 。"

msgid "Overriding the default fields"
msgstr "覆盖默认字段"

msgid ""
"The default field types, as described in the `Field types`_ table above, are "
"sensible defaults. If you have a ``DateField`` in your model, chances are "
"you'd want that to be represented as a ``DateField`` in your form. But "
"``ModelForm`` gives you the flexibility of changing the form field for a "
"given model."
msgstr ""
"之前在 `字段类型`_ 表格中介绍的默认字段类型都是相对合适的。如果您的模型中有一"
"个 ``DateField`` ，您可能希望在表单中将它展示为 ``DateField`` 。但 "
"``ModelForm`` 可以让您灵活地改变给定模型的表单字段。"

msgid ""
"To specify a custom widget for a field, use the ``widgets`` attribute of the "
"inner ``Meta`` class. This should be a dictionary mapping field names to "
"widget classes or instances."
msgstr ""
"要为字段指定自定义组件，请使用内部 ``Meta`` 类的 ``widgets`` 属性。它应该是一"
"个映射字段名到组建类或组件实例的字典。"

msgid ""
"For example, if you want the ``CharField`` for the ``name`` attribute of "
"``Author`` to be represented by a ``<textarea>`` instead of its default "
"``<input type=\"text\">``, you can override the field's widget::"
msgstr ""
"例如，如果您希望 ``Author`` 的 ``name`` 属性的 ``CharField`` 由 "
"``<textarea>`` 代替默认的 ``<input type=\"text\">`` 来表示，您可以重写字段的"
"部件："

msgid ""
"The ``widgets`` dictionary accepts either widget instances (e.g., "
"``Textarea(...)``) or classes (e.g., ``Textarea``)."
msgstr ""
"``widgets`` 字典接受组件实例（例如， ``Textarea(...)`` ）或者类（例如， "
"``Textarea`` ）。"

msgid ""
"Similarly, you can specify the ``labels``, ``help_texts`` and "
"``error_messages`` attributes of the inner ``Meta`` class if you want to "
"further customize a field."
msgstr ""
"同样的，如果您想进一步自定义一个字段，还可以指定内部Meta类的 ``labels`` 、 "
"``help_texts`` 和 ``error_messages`` 属性。"

msgid ""
"For example if you wanted to customize the wording of all user facing "
"strings for the ``name`` field::"
msgstr "例如您想自定义 ``name`` 字段中所有面向用户的字符文本："

msgid ""
"You can also specify ``field_classes`` to customize the type of fields "
"instantiated by the form."
msgstr "您还可以指定  ``field_classes`` 来自定义表单实例化的字段类型："

msgid ""
"For example, if you wanted to use ``MySlugFormField`` for the ``slug`` "
"field, you could do the following::"
msgstr ""
"例如，如果您想对 ``slug`` 字段使用 ``MySlugFormField`` ，您可以这样做："

msgid ""
"Finally, if you want complete control over of a field -- including its type, "
"validators, required, etc. -- you can do this by declaratively specifying "
"fields like you would in a regular ``Form``."
msgstr ""
"最后，如果您想完全控制一个字段（包括它的类型，验证，必填等等），您可以通过声"
"明指定字段来做到这一点，就像在一个普通的 ``Form`` 中那样声明。"

msgid ""
"If you want to specify a field's validators, you can do so by defining the "
"field declaratively and setting its ``validators`` parameter::"
msgstr ""
"如果您想指定一个字段的验证器，可以通过声明定义该字段并设置其 ``validators`` "
"参数来实现："

msgid ""
"When you explicitly instantiate a form field like this, it is important to "
"understand how ``ModelForm`` and regular ``Form`` are related."
msgstr ""
"当您像这样显式地实例化了一个表单字段，理解 ``ModelForm`` 和普通  ``Form`` 的"
"关系很重要。"

msgid ""
"``ModelForm`` is a regular ``Form`` which can automatically generate certain "
"fields. The fields that are automatically generated depend on the content of "
"the ``Meta`` class and on which fields have already been defined "
"declaratively. Basically, ``ModelForm`` will **only** generate fields that "
"are **missing** from the form, or in other words, fields that weren't "
"defined declaratively."
msgstr ""
"``ModelForm`` 是一个可以自动生成特定字段的 ``Form`` 。哪些字段可以自动生成取"
"决于 ``Meta`` 类的内容，以及是否已经被明确定义过。总的来说 ``ModelForm``  **"
"仅会** 自动生成表单中 **缺失** 的字段，或者说，没被明确定义的字段。"

msgid ""
"Fields defined declaratively are left as-is, therefore any customizations "
"made to ``Meta`` attributes such as ``widgets``, ``labels``, ``help_texts``, "
"or ``error_messages`` are ignored; these only apply to fields that are "
"generated automatically."
msgstr ""
"声明定义的字段会保持原样，因此，任何对 ``Meta`` 属性（例如 ``widgets`` 、 "
"``labels`` 、 ``help_texts`` 或者 ``error_messages``）的自定义设置都会被忽"
"略；它们仅适用于自动生成的字段。"

msgid ""
"Similarly, fields defined declaratively do not draw their attributes like "
"``max_length`` or ``required`` from the corresponding model. If you want to "
"maintain the behavior specified in the model, you must set the relevant "
"arguments explicitly when declaring the form field."
msgstr ""
"同样，显式定义的字段不会从对应的模型中获取他们的属性（比如 ``max_length`` 或"
"者 ``required``）。如果要保持模型中指定的行为，则必须在声明表单字段时显式设置"
"相关参数。"

msgid "For example, if the ``Article`` model looks like this::"
msgstr "例如，假设 ``Article`` 模型像下面这样："

msgid ""
"and you want to do some custom validation for ``headline``, while keeping "
"the ``blank`` and ``help_text`` values as specified, you might define "
"``ArticleForm`` like this::"
msgstr ""
"且您希望对 ``headline`` 进行自定义验证，在保留指定的 ``blank`` 和 "
"``help_text`` 值同时，您可以像这样定义 ``ArticleForm`` ："

msgid ""
"You must ensure that the type of the form field can be used to set the "
"contents of the corresponding model field. When they are not compatible, you "
"will get a ``ValueError`` as no implicit conversion takes place."
msgstr ""
"您必须确保表单字段的类型可用于设置对应模型字段的内容。如果它们不兼容，您会因"
"为没有发生隐式转换而得到一个 ``ValueError`` 。"

msgid ""
"See the :doc:`form field documentation </ref/forms/fields>` for more "
"information on fields and their arguments."
msgstr ""
"更多有关字段及其参数的内容，请参阅 :doc:`表单字段文档</ref/forms/fields>` 。"

msgid "Enabling localization of fields"
msgstr "启用对字段的本地化"

msgid ""
"By default, the fields in a ``ModelForm`` will not localize their data. To "
"enable localization for fields, you can use the ``localized_fields`` "
"attribute on the ``Meta`` class."
msgstr ""
"默认情况下， ``ModelForm`` 中的字段不会本地化他们的数据。要为字段启用本地化，"
"您可以在 ``Meta`` 类中使用 ``localized_fields`` 属性。"

msgid ""
"If ``localized_fields`` is set to the special value ``'__all__'``, all "
"fields will be localized."
msgstr ""
"如果 ``localized_fields`` 设置为特殊值 ``'__all__'`` ，则所有字段都将被本地"
"化。"

msgid "Form inheritance"
msgstr "表单继承"

msgid ""
"As with basic forms, you can extend and reuse ``ModelForms`` by inheriting "
"them. This is useful if you need to declare extra fields or extra methods on "
"a parent class for use in a number of forms derived from models. For "
"example, using the previous ``ArticleForm`` class::"
msgstr ""
"与普通表单一样，您可以通过继承它们来扩展和重用 ``ModelForms`` 。如果您需要在"
"父类中声明额外字段或额外方法以用于从模型派生的多个表单中，则此方法非常有用。"
"例如，使用之前的 ``ArticleForm`` 类。"

msgid ""
"This creates a form that behaves identically to ``ArticleForm``, except "
"there's some extra validation and cleaning for the ``pub_date`` field."
msgstr ""
"这会创建一个与 ``ArticleForm`` 行为相同的表单，除了 ``pub_date`` 字段会有一些"
"额外的验证和cleaning。"

msgid ""
"You can also subclass the parent's ``Meta`` inner class if you want to "
"change the ``Meta.fields`` or ``Meta.exclude`` lists::"
msgstr ""
"如果要更改 ``Meta.fields`` 或 ``Meta.exclude`` 列表，您也可以继承父类的内部 "
"``Meta`` 类："

msgid ""
"This adds the extra method from the ``EnhancedArticleForm`` and modifies the "
"original ``ArticleForm.Meta`` to remove one field."
msgstr ""
"这相比 ``EnhancedArticleForm`` 增加了额外方法，并修改了原始的 ``ArticleForm."
"Meta`` 以删除一个字段。"

msgid "There are a couple of things to note, however."
msgstr "然而，有几项需要注意。"

msgid ""
"Normal Python name resolution rules apply. If you have multiple base classes "
"that declare a ``Meta`` inner class, only the first one will be used. This "
"means the child's ``Meta``, if it exists, otherwise the ``Meta`` of the "
"first parent, etc."
msgstr ""
"适用于普通的Python名称解析规则。如果您有多个声明 ``Meta`` 内部类的基类，就是"
"说如果声明了子类的 ``Meta`` 就会使用它，否则就用第一个父类的 ``Meta`` 。"

msgid ""
"It's possible to inherit from both ``Form`` and ``ModelForm`` "
"simultaneously, however, you must ensure that ``ModelForm`` appears first in "
"the MRO. This is because these classes rely on different metaclasses and a "
"class can only have one metaclass."
msgstr ""
"可以同时继承 ``Form`` 和 ``ModelForm`` ，但是，您必须确保 ``ModelForm`` 在MRO"
"中出现在首位。这是因为这些类依赖于不同的元类，而一个类只能有一个元类。"

msgid ""
"It's possible to declaratively remove a ``Field`` inherited from a parent "
"class by setting the name to be ``None`` on the subclass."
msgstr ""
"通过在子类上将名称设置为 ``None`` ，可以声明性地移除从父类继承的 ``Field`` 。"

msgid ""
"You can only use this technique to opt out from a field defined "
"declaratively by a parent class; it won't prevent the ``ModelForm`` "
"metaclass from generating a default field. To opt-out from default fields, "
"see :ref:`modelforms-selecting-fields`."
msgstr ""
"您只能使用这种技术排除父类中声明定义的字段；它不会阻止 ``ModelForm`` 元类生成"
"默认字段。要排除默认字段，请参阅 :ref:`modelforms-selecting-fields` 。"

msgid "Providing initial values"
msgstr "提供初始值"

msgid ""
"As with regular forms, it's possible to specify initial data for forms by "
"specifying an ``initial`` parameter when instantiating the form. Initial "
"values provided this way will override both initial values from the form "
"field and values from an attached model instance. For example::"
msgstr ""
"与普通表单一样，可以在实例化表单时通过指定 ``initial`` 参数来指定表单的初始"
"值。以这种方式提供的初始值会覆盖表单字段的初始值以及对应模型实例的初始值。例"
"如："

msgid "ModelForm factory function"
msgstr "ModelForm的工厂函数"

msgid ""
"You can create forms from a given model using the standalone function :func:"
"`~django.forms.models.modelform_factory`, instead of using a class "
"definition. This may be more convenient if you do not have many "
"customizations to make::"
msgstr ""
"您可以不使用类定义，而是使用独立函数 :func:`~django.forms.models."
"modelform_factory` 来创建给定模型的表单。如果您没有很多自定义设置，这可能会更"
"方便："

msgid ""
"This can also be used to make simple modifications to existing forms, for "
"example by specifying the widgets to be used for a given field::"
msgstr "这也可以用来对已有表单进行简单的修改，例如给某个字段指定使用组件："

msgid ""
"The fields to include can be specified using the ``fields`` and ``exclude`` "
"keyword arguments, or the corresponding attributes on the ``ModelForm`` "
"inner ``Meta`` class. Please see the ``ModelForm`` :ref:`modelforms-"
"selecting-fields` documentation."
msgstr ""
"要包含的字段可以使用 ``fields`` 和 ``exclude`` 关键字参数或 ``ModelForm`` 内"
"部的 ``Meta`` 类中相应的属性来指定。请参阅 ``ModelForm`` :ref:`modelforms-"
"selecting-fields` 文档。"

msgid "... or enable localization for specific fields::"
msgstr "... 或者为个别字段启用本地化功能："

msgid "Model formsets"
msgstr "模型表单集"

msgid ""
"Like :doc:`regular formsets </topics/forms/formsets>`, Django provides a "
"couple of enhanced formset classes that make it easy to work with Django "
"models. Let's reuse the ``Author`` model from above::"
msgstr ""
"和 :doc:`普通表单集</topics/forms/formsets>` 一样，Django提供了几个增强的"
"formset类，可以很方便地配合Django模型使用。让我们重用下上面的 ``Author`` 模"
"型："

msgid ""
"Using ``fields`` restricts the formset to use only the given fields. "
"Alternatively, you can take an \"opt-out\" approach, specifying which fields "
"to exclude::"
msgstr ""
"使用 ``fields`` 参数限制formset仅使用给定的字段。或者，您可以使用排除法，指定"
"排除哪些字段："

msgid ""
"This will create a formset that is capable of working with the data "
"associated with the ``Author`` model. It works just like a regular formset::"
msgstr ""
"这将创建一个能够处理与 ``Author`` 模型相关数据的formset。它运行起来就像一个普"
"通的formset："

msgid ""
":func:`~django.forms.models.modelformset_factory` uses :func:`~django.forms."
"formsets.formset_factory` to generate formsets. This means that a model "
"formset is just an extension of a basic formset that knows how to interact "
"with a particular model."
msgstr ""
":func:`~django.forms.models.modelformset_factory` 使用 :func:`~django.forms."
"formsets.formset_factory` 来生成表单集。这意味着模型formset只是一个知道如何与"
"指定模型交互的普通formset的扩展。"

msgid "Changing the queryset"
msgstr "更改查询集"

msgid ""
"By default, when you create a formset from a model, the formset will use a "
"queryset that includes all objects in the model (e.g., ``Author.objects."
"all()``). You can override this behavior by using the ``queryset`` argument::"
msgstr ""
"默认情况下，当您创建一个模型ormset时，formset将使用一个包含模型中所有对象（例"
"如 ``Author.objects.all()`` ）的查询集。你可以通过使用 ``queryset`` 参数来覆"
"盖这一行为："

msgid ""
"Alternatively, you can create a subclass that sets ``self.queryset`` in "
"``__init__``::"
msgstr ""
"或者，您可以创建一个子类，然后在 ``__init__`` 中设置 ``self.queryset`` ："

msgid "Then, pass your ``BaseAuthorFormSet`` class to the factory function::"
msgstr "然后，将你的 ``BaseAuthorFormSet`` 类传递给工厂函数："

msgid ""
"If you want to return a formset that doesn't include *any* pre-existing "
"instances of the model, you can specify an empty QuerySet::"
msgstr ""
"如果您想返回一个不包含 *任何* 已存在模型实例的formset，您可以指定一个空的"
"QuerySet："

msgid "Changing the form"
msgstr "更改表单"

msgid ""
"By default, when you use ``modelformset_factory``, a model form will be "
"created using :func:`~django.forms.models.modelform_factory`. Often, it can "
"be useful to specify a custom model form. For example, you can create a "
"custom model form that has custom validation::"
msgstr ""
"默认情况下，当您使用 ``modelformset_factory`` 时，程序会用 :func:`~django."
"forms.models.modelform_factory` 创建一个模型表单。这通常在指定自定义模型表单"
"时很有用。例如，您可以创建一个具有自定义验证的自定义模型表单："

msgid "Then, pass your model form to the factory function::"
msgstr "然后，将您的模型表单传递给工厂函数："

msgid ""
"It is not always necessary to define a custom model form. The "
"``modelformset_factory`` function has several arguments which are passed "
"through to ``modelform_factory``, which are described below."
msgstr ""
"并不是总需要自定义模型表单。 ``modelformset_factory`` 函数有几个参数传递给 "
"``modelform_factory`` ，如下所述。"

msgid "Specifying widgets to use in the form with ``widgets``"
msgstr "在表单中使用 ``widgets`` 指定部件。"

msgid ""
"Using the ``widgets`` parameter, you can specify a dictionary of values to "
"customize the ``ModelForm``’s widget class for a particular field. This "
"works the same way as the ``widgets`` dictionary on the inner ``Meta`` class "
"of a ``ModelForm`` works::"
msgstr ""
"使用 ``widgets`` 参数，您可以设置一个字典值来为 ``ModelForm`` 指定字段自定义"
"部件。这与 ``ModelForm`` 内部 ``Meta`` 类中 ``widgets`` 字典的工作方式一样："

msgid "Enabling localization for fields with ``localized_fields``"
msgstr "使用 ``localized_fields`` 来启用字段本地化"

msgid ""
"Using the ``localized_fields`` parameter, you can enable localization for "
"fields in the form."
msgstr "您可以使用 ``localized_fields`` 参数为表单中的字段启用本地化。"

msgid ""
"As with regular formsets, it's possible to :ref:`specify initial data "
"<formsets-initial-data>` for forms in the formset by specifying an "
"``initial`` parameter when instantiating the model formset class returned "
"by :func:`~django.forms.models.modelformset_factory`. However, with model "
"formsets, the initial values only apply to extra forms, those that aren't "
"attached to an existing model instance. If the length of ``initial`` exceeds "
"the number of extra forms, the excess initial data is ignored. If the extra "
"forms with initial data aren't changed by the user, they won't be validated "
"or saved."
msgstr ""

msgid "Saving objects in the formset"
msgstr ""

msgid ""
"As with a ``ModelForm``, you can save the data as a model object. This is "
"done with the formset's ``save()`` method:"
msgstr ""

msgid ""
"The ``save()`` method returns the instances that have been saved to the "
"database. If a given instance's data didn't change in the bound data, the "
"instance won't be saved to the database and won't be included in the return "
"value (``instances``, in the above example)."
msgstr ""

msgid ""
"When fields are missing from the form (for example because they have been "
"excluded), these fields will not be set by the ``save()`` method. You can "
"find more information about this restriction, which also holds for regular "
"``ModelForms``, in `Selecting the fields to use`_."
msgstr ""

msgid "Pass ``commit=False`` to return the unsaved model instances:"
msgstr ""

msgid ""
"This gives you the ability to attach data to the instances before saving "
"them to the database. If your formset contains a ``ManyToManyField``, you'll "
"also need to call ``formset.save_m2m()`` to ensure the many-to-many "
"relationships are saved properly."
msgstr ""

msgid ""
"After calling ``save()``, your model formset will have three new attributes "
"containing the formset's changes:"
msgstr ""

msgid "Limiting the number of editable objects"
msgstr ""

msgid ""
"As with regular formsets, you can use the ``max_num`` and ``extra`` "
"parameters to :func:`~django.forms.models.modelformset_factory` to limit the "
"number of extra forms displayed."
msgstr ""

msgid "``max_num`` does not prevent existing objects from being displayed::"
msgstr ""

msgid ""
"Also, ``extra=0`` doesn't prevent creation of new model instances as you "
"can :ref:`add additional forms with JavaScript <understanding-the-"
"managementform>` or just send additional POST data. Formsets `don't yet "
"provide functionality <https://code.djangoproject.com/ticket/26142>`_ for an "
"\"edit only\" view that prevents creation of new instances."
msgstr ""

msgid ""
"If the value of ``max_num`` is greater than the number of existing related "
"objects, up to ``extra`` additional blank forms will be added to the "
"formset, so long as the total number of forms does not exceed ``max_num``::"
msgstr ""

msgid "Using a model formset in a view"
msgstr ""

msgid ""
"Model formsets are very similar to formsets. Let's say we want to present a "
"formset to edit ``Author`` model instances::"
msgstr ""

msgid ""
"As you can see, the view logic of a model formset isn't drastically "
"different than that of a \"normal\" formset. The only difference is that we "
"call ``formset.save()`` to save the data into the database. (This was "
"described above, in :ref:`saving-objects-in-the-formset`.)"
msgstr ""

msgid "Overriding ``clean()`` on a ``ModelFormSet``"
msgstr ""

msgid ""
"Just like with ``ModelForms``, by default the ``clean()`` method of a "
"``ModelFormSet`` will validate that none of the items in the formset violate "
"the unique constraints on your model (either ``unique``, ``unique_together`` "
"or ``unique_for_date|month|year``).  If you want to override the ``clean()`` "
"method on a ``ModelFormSet`` and maintain this validation, you must call the "
"parent class's ``clean`` method::"
msgstr ""

msgid ""
"Also note that by the time you reach this step, individual model instances "
"have already been created for each ``Form``. Modifying a value in ``form."
"cleaned_data`` is not sufficient to affect the saved value. If you wish to "
"modify a value in ``ModelFormSet.clean()`` you must modify ``form."
"instance``::"
msgstr ""

msgid "Using a custom queryset"
msgstr ""

msgid ""
"As stated earlier, you can override the default queryset used by the model "
"formset::"
msgstr ""

msgid ""
"Note that we pass the ``queryset`` argument in both the ``POST`` and ``GET`` "
"cases in this example."
msgstr ""

msgid "Using the formset in the template"
msgstr ""

msgid "There are three ways to render a formset in a Django template."
msgstr ""

msgid "First, you can let the formset do most of the work::"
msgstr ""

msgid ""
"Second, you can manually render the formset, but let the form deal with "
"itself::"
msgstr ""

msgid ""
"When you manually render the forms yourself, be sure to render the "
"management form as shown above. See the :ref:`management form documentation "
"<understanding-the-managementform>`."
msgstr ""

msgid "Third, you can manually render each field::"
msgstr ""

msgid ""
"If you opt to use this third method and you don't iterate over the fields "
"with a ``{% for %}`` loop, you'll need to render the primary key field. For "
"example, if you were rendering the ``name`` and ``age`` fields of a model::"
msgstr ""

msgid ""
"Notice how we need to explicitly render ``{{ form.id }}``. This ensures that "
"the model formset, in the ``POST`` case, will work correctly. (This example "
"assumes a primary key named ``id``. If you've explicitly defined your own "
"primary key that isn't called ``id``, make sure it gets rendered.)"
msgstr ""

msgid "Inline formsets"
msgstr ""

msgid ""
"Inline formsets is a small abstraction layer on top of model formsets. These "
"simplify the case of working with related objects via a foreign key. Suppose "
"you have these two models::"
msgstr ""

msgid ""
"If you want to create a formset that allows you to edit books belonging to a "
"particular author, you could do this::"
msgstr ""

msgid ""
"``BookFormSet``'s :ref:`prefix <formset-prefix>` is ``'book_set'`` (``<model "
"name>_set`` ). If ``Book``'s ``ForeignKey`` to ``Author`` has a :attr:"
"`~django.db.models.ForeignKey.related_name`, that's used instead."
msgstr ""

msgid ""
":func:`~django.forms.models.inlineformset_factory` uses :func:`~django.forms."
"models.modelformset_factory` and marks ``can_delete=True``."
msgstr ""

msgid ""
":ref:`Manually rendered can_delete and can_order <manually-rendered-can-"
"delete-and-can-order>`."
msgstr ""

msgid "Overriding methods on an ``InlineFormSet``"
msgstr ""

msgid ""
"When overriding methods on ``InlineFormSet``, you should subclass :class:"
"`~models.BaseInlineFormSet` rather than :class:`~models.BaseModelFormSet`."
msgstr ""

msgid "For example, if you want to override ``clean()``::"
msgstr ""

msgid "See also :ref:`model-formsets-overriding-clean`."
msgstr ""

msgid ""
"Then when you create your inline formset, pass in the optional argument "
"``formset``::"
msgstr ""

msgid "More than one foreign key to the same model"
msgstr ""

msgid ""
"If your model contains more than one foreign key to the same model, you'll "
"need to resolve the ambiguity manually using ``fk_name``. For example, "
"consider the following model::"
msgstr ""

msgid ""
"To resolve this, you can use ``fk_name`` to :func:`~django.forms.models."
"inlineformset_factory`::"
msgstr ""

msgid "Using an inline formset in a view"
msgstr ""

msgid ""
"You may want to provide a view that allows a user to edit the related "
"objects of a model. Here's how you can do that::"
msgstr ""

msgid "Notice how we pass ``instance`` in both the ``POST`` and ``GET`` cases."
msgstr ""

msgid "Specifying widgets to use in the inline form"
msgstr ""

msgid ""
"``inlineformset_factory`` uses ``modelformset_factory`` and passes most of "
"its arguments to ``modelformset_factory``. This means you can use the "
"``widgets`` parameter in much the same way as passing it to "
"``modelformset_factory``. See `Specifying widgets to use in the form with "
"widgets`_ above."
msgstr ""

msgid "View decorators"
msgstr ""

msgid ""
"Django provides several decorators that can be applied to views to support "
"various HTTP features."
msgstr ""

msgid "Allowed HTTP methods"
msgstr ""

msgid ""
"The decorators in :mod:`django.views.decorators.http` can be used to "
"restrict access to views based on the request method. These decorators will "
"return a :class:`django.http.HttpResponseNotAllowed` if the conditions are "
"not met."
msgstr ""

msgid ""
"Decorator to require that a view only accepts particular request methods. "
"Usage::"
msgstr ""

msgid "Note that request methods should be in uppercase."
msgstr ""

msgid "Decorator to require that a view only accepts the GET method."
msgstr ""

msgid "Decorator to require that a view only accepts the POST method."
msgstr ""

msgid ""
"Decorator to require that a view only accepts the GET and HEAD methods. "
"These methods are commonly considered \"safe\" because they should not have "
"the significance of taking an action other than retrieving the requested "
"resource."
msgstr ""

msgid ""
"Web servers should automatically strip the content of responses to HEAD "
"requests while leaving the headers unchanged, so you may handle HEAD "
"requests exactly like GET requests in your views. Since some software, such "
"as link checkers, rely on HEAD requests, you might prefer using "
"``require_safe`` instead of ``require_GET``."
msgstr ""

msgid "Conditional view processing"
msgstr ""

msgid ""
"The following decorators in :mod:`django.views.decorators.http` can be used "
"to control caching behavior on particular views."
msgstr ""

msgid ""
"These decorators can be used to generate ``ETag`` and ``Last-Modified`` "
"headers; see :doc:`conditional view processing </topics/conditional-view-"
"processing>`."
msgstr ""

msgid "GZip compression"
msgstr ""

msgid ""
"The decorators in :mod:`django.views.decorators.gzip` control content "
"compression on a per-view basis."
msgstr ""

msgid ""
"This decorator compresses content if the browser allows gzip compression. It "
"sets the ``Vary`` header accordingly, so that caches will base their storage "
"on the ``Accept-Encoding`` header."
msgstr ""

msgid "Vary headers"
msgstr ""

msgid ""
"The decorators in :mod:`django.views.decorators.vary` can be used to control "
"caching based on specific request headers."
msgstr ""

msgid ""
"The ``Vary`` header defines which request headers a cache mechanism should "
"take into account when building its cache key."
msgstr ""

msgid "See :ref:`using vary headers <using-vary-headers>`."
msgstr ""

msgid "Caching"
msgstr ""

msgid ""
"The decorators in :mod:`django.views.decorators.cache` control server and "
"client-side caching."
msgstr ""

msgid ""
"This decorator patches the response's ``Cache-Control`` header by adding all "
"of the keyword arguments to it. See :func:`~django.utils.cache."
"patch_cache_control` for the details of the transformation."
msgstr ""

msgid ""
"This decorator adds a ``Cache-Control: max-age=0, no-cache, no-store, must-"
"revalidate`` header to a response to indicate that a page should never be "
"cached."
msgstr ""

msgid "File Uploads"
msgstr "文件上传"

msgid ""
"When Django handles a file upload, the file data ends up placed in :attr:"
"`request.FILES <django.http.HttpRequest.FILES>` (for more on the ``request`` "
"object see the documentation for :doc:`request and response objects </ref/"
"request-response>`). This document explains how files are stored on disk and "
"in memory, and how to customize the default behavior."
msgstr ""
"Django处理文件上传时, 文件最终会位于:attr:`request.FILES <django.http."
"HttpRequest.FILES>` (想了解更多关于``request`` 对象的信息请阅读  :doc:"
"`request and response objects 1`) 。本文档主要介绍文件是如何存储在硬盘和内存"
"中的，以及如何定制默认行为。"

msgid ""
"There are security risks if you are accepting uploaded content from "
"untrusted users! See the security guide's topic on :ref:`user-uploaded-"
"content-security` for mitigation details."
msgstr ""
"如果接收不受信任的用户的上传会有安全隐患， 请阅读 :ref:`user-uploaded-"
"content-security`获取详情."

msgid "Basic file uploads"
msgstr "简单文件上传"

msgid "Consider a simple form containing a :class:`~django.forms.FileField`:"
msgstr ""
"考虑使用一个简单的表单，表单中包含一个:class:`~django.forms.FileField`字段:"

msgid ""
"A view handling this form will receive the file data in :attr:`request.FILES "
"<django.http.HttpRequest.FILES>`, which is a dictionary containing a key for "
"each :class:`~django.forms.FileField` (or :class:`~django.forms.ImageField`, "
"or other :class:`~django.forms.FileField` subclass) in the form. So the data "
"from the above form would be accessible as ``request.FILES['file']``."
msgstr ""
"处理这个表单的视图将通过:attr:`request.FILES <django.http.HttpRequest.FILES>`"
"获取到文件数据, attr:`request.FILES <django.http.HttpRequest.FILES>`是包含了"
"表单中每个 :class:`~django.forms.FileField` (还有 :class:`~django.forms."
"ImageField`, 以及其他:class:`~django.forms.FileField` 的子类)键值的字典 。所"
"以 `数据可以通过`request.FILES['file']``获取到。"

msgid ""
"Note that :attr:`request.FILES <django.http.HttpRequest.FILES>` will only "
"contain data if the request method was ``POST`` and the ``<form>`` that "
"posted the request has the attribute ``enctype=\"multipart/form-data\"``. "
"Otherwise, ``request.FILES`` will be empty."
msgstr ""
"请注意只有在请求是通过 ``POST`` 提交且提交的  ``<form>`` 表单有 ``enctype="
"\"multipart/form-data\"`` 属性的时候，:attr:`request.FILES <django.http."
"HttpRequest.FILES>`  才会包含文件数据，否则的话， ``request.FILES`` 是空的。"

msgid ""
"Most of the time, you'll simply pass the file data from ``request`` into the "
"form as described in :ref:`binding-uploaded-files`. This would look "
"something like:"
msgstr ""
"绝大多数的情况下，你只需要像 :ref:`binding-uploaded-files`中所述将文件数据从"
"``request`` 传入给 表单，示例如下："

msgid ""
"Notice that we have to pass :attr:`request.FILES <django.http.HttpRequest."
"FILES>` into the form's constructor; this is how file data gets bound into a "
"form."
msgstr ""
"注意我们必须将 :attr:`request.FILES <django.http.HttpRequest.FILES>` 传入到表"
"单的\n"
"构造方法中，只有这样文件数据才能绑定到表单中。"

msgid "Here's a common way you might handle an uploaded file::"
msgstr "我们通常可能像这样处理上传文件："

msgid ""
"Looping over ``UploadedFile.chunks()`` instead of using ``read()`` ensures "
"that large files don't overwhelm your system's memory."
msgstr ""
"使用 ``UploadedFile.chunks()`` 而不是 ``read()`` 是为了确保即使是大文件又不会"
"将我们系统的内存占满。"

msgid ""
"There are a few other methods and attributes available on ``UploadedFile`` "
"objects; see :class:`UploadedFile` for a complete reference."
msgstr ""
" ``UploadedFile`` 对象还有一些其他可用的方法和属性，完整参考请阅读 :class:"
"`UploadedFile`  。"

msgid "Handling uploaded files with a model"
msgstr "通过模型来处理上传的文件"

msgid ""
"If you're saving a file on a :class:`~django.db.models.Model` with a :class:"
"`~django.db.models.FileField`, using a :class:`~django.forms.ModelForm` "
"makes this process much easier. The file object will be saved to the "
"location specified by the :attr:`~django.db.models.FileField.upload_to` "
"argument of the corresponding :class:`~django.db.models.FileField` when "
"calling ``form.save()``::"
msgstr ""

msgid ""
"If you are constructing an object manually, you can simply assign the file "
"object from :attr:`request.FILES <django.http.HttpRequest.FILES>` to the "
"file field in the model::"
msgstr ""

msgid "Uploading multiple files"
msgstr ""

msgid ""
"If you want to upload multiple files using one form field, set the "
"``multiple`` HTML attribute of field's widget:"
msgstr ""

msgid ""
"Then override the ``post`` method of your :class:`~django.views.generic.edit."
"FormView` subclass to handle multiple file uploads:"
msgstr ""

msgid "Upload Handlers"
msgstr ""

msgid ""
"When a user uploads a file, Django passes off the file data to an *upload "
"handler* -- a small class that handles file data as it gets uploaded. Upload "
"handlers are initially defined in the :setting:`FILE_UPLOAD_HANDLERS` "
"setting, which defaults to::"
msgstr ""

msgid ""
"Together :class:`MemoryFileUploadHandler` and :class:"
"`TemporaryFileUploadHandler` provide Django's default file upload behavior "
"of reading small files into memory and large ones onto disk."
msgstr ""

msgid ""
"You can write custom handlers that customize how Django handles files. You "
"could, for example, use custom handlers to enforce user-level quotas, "
"compress data on the fly, render progress bars, and even send data to "
"another storage location directly without storing it locally. See :ref:"
"`custom_upload_handlers` for details on how you can customize or completely "
"replace upload behavior."
msgstr ""

msgid "Where uploaded data is stored"
msgstr ""

msgid "Before you save uploaded files, the data needs to be stored somewhere."
msgstr ""

msgid ""
"By default, if an uploaded file is smaller than 2.5 megabytes, Django will "
"hold the entire contents of the upload in memory. This means that saving the "
"file involves only a read from memory and a write to disk and thus is very "
"fast."
msgstr ""

msgid ""
"However, if an uploaded file is too large, Django will write the uploaded "
"file to a temporary file stored in your system's temporary directory. On a "
"Unix-like platform this means you can expect Django to generate a file "
"called something like ``/tmp/tmpzfp6I6.upload``. If an upload is large "
"enough, you can watch this file grow in size as Django streams the data onto "
"disk."
msgstr ""

msgid ""
"These specifics -- 2.5 megabytes; ``/tmp``; etc. -- are simply \"reasonable "
"defaults\" which can be customized as described in the next section."
msgstr ""

msgid "Changing upload handler behavior"
msgstr ""

msgid ""
"There are a few settings which control Django's file upload behavior. See :"
"ref:`File Upload Settings <file-upload-settings>` for details."
msgstr ""

msgid "Modifying upload handlers on the fly"
msgstr ""

msgid ""
"Sometimes particular views require different upload behavior. In these "
"cases, you can override upload handlers on a per-request basis by modifying "
"``request.upload_handlers``. By default, this list will contain the upload "
"handlers given by :setting:`FILE_UPLOAD_HANDLERS`, but you can modify the "
"list as you would any other list."
msgstr ""

msgid ""
"For instance, suppose you've written a ``ProgressBarUploadHandler`` that "
"provides feedback on upload progress to some sort of AJAX widget. You'd add "
"this handler to your upload handlers like this::"
msgstr ""

msgid ""
"You'd probably want to use ``list.insert()`` in this case (instead of "
"``append()``) because a progress bar handler would need to run *before* any "
"other handlers. Remember, the upload handlers are processed in order."
msgstr ""

msgid ""
"If you want to replace the upload handlers completely, you can just assign a "
"new list::"
msgstr ""

msgid ""
"You can only modify upload handlers *before* accessing ``request.POST`` or "
"``request.FILES`` -- it doesn't make sense to change upload handlers after "
"upload handling has already started. If you try to modify ``request."
"upload_handlers`` after reading from ``request.POST`` or ``request.FILES`` "
"Django will throw an error."
msgstr ""

msgid ""
"Thus, you should always modify uploading handlers as early in your view as "
"possible."
msgstr ""

msgid ""
"Also, ``request.POST`` is accessed by :class:`~django.middleware.csrf."
"CsrfViewMiddleware` which is enabled by default. This means you will need to "
"use :func:`~django.views.decorators.csrf.csrf_exempt` on your view to allow "
"you to change the upload handlers.  You will then need to use :func:`~django."
"views.decorators.csrf.csrf_protect` on the function that actually processes "
"the request.  Note that this means that the handlers may start receiving the "
"file upload before the CSRF checks have been done. Example code::"
msgstr ""

msgid "Generic views"
msgstr "通用视图"

msgid "See :doc:`/ref/class-based-views/index`."
msgstr "参考 :doc:`/ref/class-based-views/index`。"

msgid "Handling HTTP requests"
msgstr "处理 HTTP 请求"

msgid "Information on handling HTTP requests in Django:"
msgstr "Django 中处理 HTTP 请求的信息："

msgid "Middleware"
msgstr "中间件"

msgid ""
"Middleware is a framework of hooks into Django's request/response "
"processing. It's a light, low-level \"plugin\" system for globally altering "
"Django's input or output."
msgstr ""
"中间件是 Django 请求/响应处理的钩子框架。它是一个轻量级的、低级的“插件”系统，"
"用于全局改变 Django 的输入或输出。"

msgid ""
"Each middleware component is responsible for doing some specific function. "
"For example, Django includes a middleware component, :class:`~django.contrib."
"auth.middleware.AuthenticationMiddleware`, that associates users with "
"requests using sessions."
msgstr ""
"每个中间件组件负责做一些特定的功能。例如，Django 包含一个中间件组件 :class:"
"`~django.contrib.auth.middleware.AuthenticationMiddleware`，它使用会话将用户"
"与请求关联起来。"

msgid ""
"This document explains how middleware works, how you activate middleware, "
"and how to write your own middleware. Django ships with some built-in "
"middleware you can use right out of the box. They're documented in the :doc:"
"`built-in middleware reference </ref/middleware>`."
msgstr ""
"他的文档解释了中间件是如何工作的，如何激活中间件，以及如何编写自己的中间件。"
"Django 具有一些内置的中间件，你可以直接使用。它们被记录在 :doc:`built-in "
"middleware reference </ref/middleware>` 中。"

msgid "Writing your own middleware"
msgstr "编写自己的中间件"

msgid ""
"A middleware factory is a callable that takes a ``get_response`` callable "
"and returns a middleware. A middleware is a callable that takes a request "
"and returns a response, just like a view."
msgstr ""
"中间件工厂是一个可调用的程序，它接受 ``get_response`` 可调用并返回中间件。中"
"间件是可调用的，它接受请求并返回响应，就像视图一样。"

msgid "A middleware can be written as a function that looks like this::"
msgstr "中间件可以被写成这样的函数："

msgid ""
"Or it can be written as a class whose instances are callable, like this::"
msgstr "或者它可以写成一个类，它的实例是可调用的，如下："

msgid ""
"The ``get_response`` callable provided by Django might be the actual view "
"(if this is the last listed middleware) or it might be the next middleware "
"in the chain. The current middleware doesn't need to know or care what "
"exactly it is, just that it represents whatever comes next."
msgstr ""
"Django 提供的 ``get_response`` 响应可能是实际视图（如果这是最后列出的中间"
"件），或者它可能是链中的下一个中间件。不需要知道或关心当前的中间件到底是什"
"么，它只是代表了下一步的内容。"

msgid ""
"The above is a slight simplification -- the ``get_response`` callable for "
"the last middleware in the chain won't be the actual view but rather a "
"wrapper method from the handler which takes care of applying :ref:`view "
"middleware <view-middleware>`, calling the view with appropriate URL "
"arguments, and applying :ref:`template-response <template-response-"
"middleware>` and :ref:`exception <exception-middleware>` middleware."
msgstr ""
"以上是一个轻微的简化——链中最后一个中间件调用的 ``get_response`` 可不是实际视"
"图，而是处理程序的包装方法，它负责应用 :ref:`view middleware <view-"
"middleware>`，调用具有适当URL参数的视图，并应用 :ref:`template-response "
"<template-response-middleware>` 和 :ref:`exception <exception-middleware>` 中"
"间件。"

msgid "Middleware can live anywhere on your Python path."
msgstr "中间件可以放在 Python 路径上的任何地方。"

msgid "``__init__(get_response)``"
msgstr "``__init__(get_response)``"

msgid ""
"Middleware factories must accept a ``get_response`` argument. You can also "
"initialize some global state for the middleware. Keep in mind a couple of "
"caveats:"
msgstr ""
"中间件工厂必须接受 ``get_response`` 参数。还可以初始化中间件的一些全局状态。"
"记住两个注意事项："

msgid ""
"Django initializes your middleware with only the ``get_response`` argument, "
"so you can't define ``__init__()`` as requiring any other arguments."
msgstr ""
"Django仅用 ``get_response`` 参数初始化您的中间件，因此不能定义 "
"``__init__()`` ，因为需要其他参数。"

msgid ""
"Unlike the ``__call__()`` method which is called once per request, "
"``__init__()`` is called only *once*, when the Web server starts."
msgstr ""
"与每次请求调用 ``__call__()`` 方法不同，当 Web 服务器启动时，``__init__()`` "
"只被称为*一次*。"

msgid "Marking middleware as unused"
msgstr "标记未使用的中间件"

msgid ""
"It's sometimes useful to determine at startup time whether a piece of "
"middleware should be used. In these cases, your middleware's ``__init__()`` "
"method may raise :exc:`~django.core.exceptions.MiddlewareNotUsed`. Django "
"will then remove that middleware from the middleware process and log a debug "
"message to the :ref:`django-request-logger` logger when :setting:`DEBUG` is "
"``True``."
msgstr ""
"在启动时确定是否应该使用一个中间件有时是有用的。在这些情况下，您的中间件的 "
"``__init__()`` 方法可能会引发 :exc:`~django.core.exceptions."
"MiddlewareNotUsed`。Django 将从中间件进程中删除该中间件，并将调试消息记录到 :"
"ref:`django-request-logger` 日志：设置 :setting:`DEBUG` 为 ``True``。"

msgid "Activating middleware"
msgstr "激活中间件"

msgid ""
"To activate a middleware component, add it to the :setting:`MIDDLEWARE` list "
"in your Django settings."
msgstr ""
"若要激活中间件组件，请将其添加到 Django 设置中的 :setting:`MIDDLEWARE` 列表"
"中。"

msgid ""
"In :setting:`MIDDLEWARE`, each middleware component is represented by a "
"string: the full Python path to the middleware factory's class or function "
"name. For example, here's the default value created by :djadmin:`django-"
"admin startproject <startproject>`::"
msgstr ""
"在 :setting:`MIDDLEWARE` 中，每个中间件组件由字符串表示：指向中间件工厂的类或"
"函数名的完整 Python 路径。例如，这里创建的默认值是 :djadmin:`django-admin "
"startproject <startproject>`："

msgid ""
"A Django installation doesn't require any middleware — :setting:`MIDDLEWARE` "
"can be empty, if you'd like — but it's strongly suggested that you at least "
"use :class:`~django.middleware.common.CommonMiddleware`."
msgstr ""
"Django 安装不需要任何中间件——如果您愿意的话，:setting:`MIDDLEWARE` 可以为空——"
"但是强烈建议您至少使用 :class:`~django.middleware.common.CommonMiddleware`。"

msgid ""
"The order in :setting:`MIDDLEWARE` matters because a middleware can depend "
"on other middleware. For instance, :class:`~django.contrib.auth.middleware."
"AuthenticationMiddleware` stores the authenticated user in the session; "
"therefore, it must run after :class:`~django.contrib.sessions.middleware."
"SessionMiddleware`. See :ref:`middleware-ordering` for some common hints "
"about ordering of Django middleware classes."
msgstr ""
":setting:`MIDDLEWARE` 的顺序很重要，因为中间件会依赖其他中间件。例如：类 :"
"class:`~django.contrib.auth.middleware.AuthenticationMiddleware` 在会话中存储"
"经过身份验证的用户；因此，它必须在 :class:`~django.contrib.sessions."
"middleware.SessionMiddleware` 后面运行 。中间件。Session中间件。请参阅 :ref:"
"`middleware-ordering` ，用于一些关于 Django 中间件类排序的常见提示。"

msgid "Middleware order and layering"
msgstr "中间件顺序与分层"

msgid ""
"During the request phase, before calling the view, Django applies middleware "
"in the order it's defined in :setting:`MIDDLEWARE`, top-down."
msgstr ""
"在请求阶段，在调用视图之前，Django 按照定义的顺序应用中间件 :setting:"
"`MIDDLEWARE`，自顶向下。"

msgid ""
"You can think of it like an onion: each middleware class is a \"layer\" that "
"wraps the view, which is in the core of the onion. If the request passes "
"through all the layers of the onion (each one calls ``get_response`` to pass "
"the request in to the next layer), all the way to the view at the core, the "
"response will then pass through every layer (in reverse order) on the way "
"back out."
msgstr ""
"你可以把它想象成一个洋葱：每个中间件类都是一个“层”，它覆盖了洋葱的核心。如果"
"请求通过洋葱的所有层（每一个调用 ``get_response`` ）以将请求传递到下一层，一"
"直到内核的视图，那么响应将在返回的过程中通过每个层（以相反的顺序）。"

msgid ""
"If one of the layers decides to short-circuit and return a response without "
"ever calling its ``get_response``, none of the layers of the onion inside "
"that layer (including the view) will see the request or the response. The "
"response will only return through the same layers that the request passed in "
"through."
msgstr ""

msgid "Other middleware hooks"
msgstr ""

msgid ""
"Besides the basic request/response middleware pattern described earlier, you "
"can add three other special methods to class-based middleware:"
msgstr ""

msgid "``process_view()``"
msgstr ""

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``view_func`` is "
"the Python function that Django is about to use. (It's the actual function "
"object, not the name of the function as a string.) ``view_args`` is a list "
"of positional arguments that will be passed to the view, and ``view_kwargs`` "
"is a dictionary of keyword arguments that will be passed to the view. "
"Neither ``view_args`` nor ``view_kwargs`` include the first view argument "
"(``request``)."
msgstr ""

msgid "``process_view()`` is called just before Django calls the view."
msgstr ""

msgid ""
"It should return either ``None`` or an :class:`~django.http.HttpResponse` "
"object. If it returns ``None``, Django will continue processing this "
"request, executing any other ``process_view()`` middleware and, then, the "
"appropriate view. If it returns an :class:`~django.http.HttpResponse` "
"object, Django won't bother calling the appropriate view; it'll apply "
"response middleware to that :class:`~django.http.HttpResponse` and return "
"the result."
msgstr ""

msgid ""
"Accessing :attr:`request.POST <django.http.HttpRequest.POST>` inside "
"middleware before the view runs or in ``process_view()`` will prevent any "
"view running after the middleware from being able to :ref:`modify the upload "
"handlers for the request <modifying_upload_handlers_on_the_fly>`, and should "
"normally be avoided."
msgstr ""

msgid ""
"The :class:`~django.middleware.csrf.CsrfViewMiddleware` class can be "
"considered an exception, as it provides the :func:`~django.views.decorators."
"csrf.csrf_exempt` and :func:`~django.views.decorators.csrf.csrf_protect` "
"decorators which allow views to explicitly control at what point the CSRF "
"validation should occur."
msgstr ""

msgid "``process_exception()``"
msgstr ""

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``exception`` is "
"an ``Exception`` object raised by the view function."
msgstr ""

msgid ""
"Django calls ``process_exception()`` when a view raises an exception. "
"``process_exception()`` should return either ``None`` or an :class:`~django."
"http.HttpResponse` object. If it returns an :class:`~django.http."
"HttpResponse` object, the template response and response middleware will be "
"applied and the resulting response returned to the browser. Otherwise, :ref:"
"`default exception handling <error-views>` kicks in."
msgstr ""

msgid ""
"Again, middleware are run in reverse order during the response phase, which "
"includes ``process_exception``. If an exception middleware returns a "
"response, the ``process_exception`` methods of the middleware classes above "
"that middleware won't be called at all."
msgstr ""

msgid "``process_template_response()``"
msgstr ""

msgid ""
"``request`` is an :class:`~django.http.HttpRequest` object. ``response`` is "
"the :class:`~django.template.response.TemplateResponse` object (or "
"equivalent) returned by a Django view or by a middleware."
msgstr ""

msgid ""
"``process_template_response()`` is called just after the view has finished "
"executing, if the response instance has a ``render()`` method, indicating "
"that it is a :class:`~django.template.response.TemplateResponse` or "
"equivalent."
msgstr ""

msgid ""
"It must return a response object that implements a ``render`` method. It "
"could alter the given ``response`` by changing ``response.template_name`` "
"and ``response.context_data``, or it could create and return a brand-new :"
"class:`~django.template.response.TemplateResponse` or equivalent."
msgstr ""

msgid ""
"You don't need to explicitly render responses -- responses will be "
"automatically rendered once all template response middleware has been called."
msgstr ""

msgid ""
"Middleware are run in reverse order during the response phase, which "
"includes ``process_template_response()``."
msgstr ""

msgid "Dealing with streaming responses"
msgstr ""

msgid ""
"Unlike :class:`~django.http.HttpResponse`, :class:`~django.http."
"StreamingHttpResponse` does not have a ``content`` attribute. As a result, "
"middleware can no longer assume that all responses will have a ``content`` "
"attribute. If they need access to the content, they must test for streaming "
"responses and adjust their behavior accordingly::"
msgstr ""

msgid ""
"``streaming_content`` should be assumed to be too large to hold in memory. "
"Response middleware may wrap it in a new generator, but must not consume it. "
"Wrapping is typically implemented as follows::"
msgstr ""

msgid ""
"Django automatically converts exceptions raised by the view or by middleware "
"into an appropriate HTTP response with an error status code. :ref:`Certain "
"exceptions <error-views>` are converted to 4xx status codes, while an "
"unknown exception is converted to a 500 status code."
msgstr ""

msgid ""
"This conversion takes place before and after each middleware (you can think "
"of it as the thin film in between each layer of the onion), so that every "
"middleware can always rely on getting some kind of HTTP response back from "
"calling its ``get_response`` callable. Middleware don't need to worry about "
"wrapping their call to ``get_response`` in a ``try/except`` and handling an "
"exception that might have been raised by a later middleware or the view. "
"Even if the very next middleware in the chain raises an :class:`~django.http."
"Http404` exception, for example, your middleware won't see that exception; "
"instead it will get an :class:`~django.http.HttpResponse` object with a :"
"attr:`~django.http.HttpResponse.status_code` of 404."
msgstr ""

msgid "Upgrading pre-Django 1.10-style middleware"
msgstr ""

msgid ""
"Django provides ``django.utils.deprecation.MiddlewareMixin`` to ease "
"creating middleware classes that are compatible with both :setting:"
"`MIDDLEWARE` and the old ``MIDDLEWARE_CLASSES``. All middleware classes "
"included with Django are compatible with both settings."
msgstr ""

msgid ""
"The mixin provides an ``__init__()`` method that accepts an optional "
"``get_response`` argument and stores it in ``self.get_response``."
msgstr ""

msgid "The ``__call__()`` method:"
msgstr ""

msgid "Calls ``self.process_request(request)`` (if defined)."
msgstr ""

msgid ""
"Calls ``self.get_response(request)`` to get the response from later "
"middleware and the view."
msgstr ""

msgid "Calls ``self.process_response(request, response)`` (if defined)."
msgstr ""

msgid "Returns the response."
msgstr ""

msgid ""
"If used with ``MIDDLEWARE_CLASSES``, the ``__call__()`` method will never be "
"used; Django calls ``process_request()`` and ``process_response()`` directly."
msgstr ""

msgid ""
"In most cases, inheriting from this mixin will be sufficient to make an old-"
"style middleware compatible with the new system with sufficient backwards-"
"compatibility. The new short-circuiting semantics will be harmless or even "
"beneficial to the existing middleware. In a few cases, a middleware class "
"may need some changes to adjust to the new semantics."
msgstr ""

msgid ""
"These are the behavioral differences between using :setting:`MIDDLEWARE` and "
"``MIDDLEWARE_CLASSES``:"
msgstr ""

msgid ""
"Under ``MIDDLEWARE_CLASSES``, every middleware will always have its "
"``process_response`` method called, even if an earlier middleware short-"
"circuited by returning a response from its ``process_request`` method. "
"Under :setting:`MIDDLEWARE`, middleware behaves more like an onion: the "
"layers that a response goes through on the way out are the same layers that "
"saw the request on the way in. If a middleware short-circuits, only that "
"middleware and the ones before it in :setting:`MIDDLEWARE` will see the "
"response."
msgstr ""

msgid ""
"Under ``MIDDLEWARE_CLASSES``, ``process_exception`` is applied to exceptions "
"raised from a middleware ``process_request`` method. Under :setting:"
"`MIDDLEWARE`, ``process_exception`` applies only to exceptions raised from "
"the view (or from the ``render`` method of a :class:`~django.template."
"response.TemplateResponse`). Exceptions raised from a middleware are "
"converted to the appropriate HTTP response and then passed to the next "
"middleware."
msgstr ""

msgid ""
"Under ``MIDDLEWARE_CLASSES``, if a ``process_response`` method raises an "
"exception, the ``process_response`` methods of all earlier middleware are "
"skipped and a ``500 Internal Server Error`` HTTP response is always returned "
"(even if the exception raised was e.g. an :class:`~django.http.Http404`). "
"Under :setting:`MIDDLEWARE`, an exception raised from a middleware will "
"immediately be converted to the appropriate HTTP response, and then the next "
"middleware in line will see that response. Middleware are never skipped due "
"to a middleware raising an exception."
msgstr ""

msgid "How to use sessions"
msgstr "如何使用会话"

msgid ""
"Django provides full support for anonymous sessions. The session framework "
"lets you store and retrieve arbitrary data on a per-site-visitor basis. It "
"stores data on the server side and abstracts the sending and receiving of "
"cookies. Cookies contain a session ID -- not the data itself (unless you're "
"using the :ref:`cookie based backend<cookie-session-backend>`)."
msgstr ""
"Django 是支持匿名会话的。会话框架允许您基于每个站点访问者存储和检索任意数据。"
"它在服务器端存储数据并提供cookie的发送和接收。Cookie包含会话ID - 而不是数据本"
"身（除非您使用基于cookie的后端）。"

msgid "Enabling sessions"
msgstr "打开会话"

msgid ""
"Sessions are implemented via a piece of :doc:`middleware </ref/middleware>`."
msgstr "会话通过配置一个中间件实现的"

msgid "To enable session functionality, do the following:"
msgstr "为了打开会话，需要做下面的操作"

msgid ""
"Edit the :setting:`MIDDLEWARE` setting and make sure it contains ``'django."
"contrib.sessions.middleware.SessionMiddleware'``. The default ``settings."
"py`` created by ``django-admin startproject`` has ``SessionMiddleware`` "
"activated."
msgstr ""
"编辑设置中的 `MIDDLEWARE`，并确保他包含了 `'django.contrib.sessions."
"middleware.SessionMiddleware'`。通过 `django-admin startproject` 创建的默认 "
"`settings.py` 文件是已经打开了 `SessionMiddleware` 这项设置的。"

msgid ""
"If you don't want to use sessions, you might as well remove the "
"``SessionMiddleware`` line from :setting:`MIDDLEWARE` and ``'django.contrib."
"sessions'`` from your :setting:`INSTALLED_APPS`. It'll save you a small bit "
"of overhead."
msgstr ""
"如果你不想使用会话功能，你可以从配置的 `MIDDLEWARE 中删除 "
"`SessionMiddleware`，并且从 `INSTALLED_APPS` 中删除 `'django.contrib."
"sessions'`。它将会为您节省一点开销。"

msgid "Configuring the session engine"
msgstr ""

msgid ""
"By default, Django stores sessions in your database (using the model "
"``django.contrib.sessions.models.Session``). Though this is convenient, in "
"some setups it's faster to store session data elsewhere, so Django can be "
"configured to store session data on your filesystem or in your cache."
msgstr ""

msgid "Using database-backed sessions"
msgstr ""

msgid ""
"If you want to use a database-backed session, you need to add ``'django."
"contrib.sessions'`` to your :setting:`INSTALLED_APPS` setting."
msgstr ""

msgid ""
"Once you have configured your installation, run ``manage.py migrate`` to "
"install the single database table that stores session data."
msgstr ""

msgid "Using cached sessions"
msgstr ""

msgid ""
"For better performance, you may want to use a cache-based session backend."
msgstr ""

msgid ""
"To store session data using Django's cache system, you'll first need to make "
"sure you've configured your cache; see the :doc:`cache documentation </"
"topics/cache>` for details."
msgstr ""

msgid ""
"You should only use cache-based sessions if you're using the Memcached cache "
"backend. The local-memory cache backend doesn't retain data long enough to "
"be a good choice, and it'll be faster to use file or database sessions "
"directly instead of sending everything through the file or database cache "
"backends. Additionally, the local-memory cache backend is NOT multi-process "
"safe, therefore probably not a good choice for production environments."
msgstr ""

msgid ""
"If you have multiple caches defined in :setting:`CACHES`, Django will use "
"the default cache. To use another cache, set :setting:`SESSION_CACHE_ALIAS` "
"to the name of that cache."
msgstr ""

msgid ""
"Once your cache is configured, you've got two choices for how to store data "
"in the cache:"
msgstr ""

msgid ""
"Set :setting:`SESSION_ENGINE` to ``\"django.contrib.sessions.backends.cache"
"\"`` for a simple caching session store. Session data will be stored "
"directly in your cache. However, session data may not be persistent: cached "
"data can be evicted if the cache fills up or if the cache server is "
"restarted."
msgstr ""

msgid ""
"For persistent, cached data, set :setting:`SESSION_ENGINE` to ``\"django."
"contrib.sessions.backends.cached_db\"``. This uses a write-through cache -- "
"every write to the cache will also be written to the database. Session reads "
"only use the database if the data is not already in the cache."
msgstr ""

msgid ""
"Both session stores are quite fast, but the simple cache is faster because "
"it disregards persistence. In most cases, the ``cached_db`` backend will be "
"fast enough, but if you need that last bit of performance, and are willing "
"to let session data be expunged from time to time, the ``cache`` backend is "
"for you."
msgstr ""

msgid ""
"If you use the ``cached_db`` session backend, you also need to follow the "
"configuration instructions for the `using database-backed sessions`_."
msgstr ""

msgid "Using file-based sessions"
msgstr ""

msgid ""
"To use file-based sessions, set the :setting:`SESSION_ENGINE` setting to ``"
"\"django.contrib.sessions.backends.file\"``."
msgstr ""

msgid ""
"You might also want to set the :setting:`SESSION_FILE_PATH` setting (which "
"defaults to output from ``tempfile.gettempdir()``, most likely ``/tmp``) to "
"control where Django stores session files. Be sure to check that your Web "
"server has permissions to read and write to this location."
msgstr ""

msgid "Using cookie-based sessions"
msgstr ""

msgid ""
"To use cookies-based sessions, set the :setting:`SESSION_ENGINE` setting to "
"``\"django.contrib.sessions.backends.signed_cookies\"``. The session data "
"will be stored using Django's tools for :doc:`cryptographic signing </topics/"
"signing>` and the :setting:`SECRET_KEY` setting."
msgstr ""

msgid ""
"It's recommended to leave the :setting:`SESSION_COOKIE_HTTPONLY` setting on "
"``True`` to prevent access to the stored data from JavaScript."
msgstr ""

msgid ""
"**If the SECRET_KEY is not kept secret and you are using the** :class:"
"`~django.contrib.sessions.serializers.PickleSerializer`, **this can lead to "
"arbitrary remote code execution.**"
msgstr ""

msgid ""
"An attacker in possession of the :setting:`SECRET_KEY` can not only generate "
"falsified session data, which your site will trust, but also remotely "
"execute arbitrary code, as the data is serialized using pickle."
msgstr ""

msgid ""
"If you use cookie-based sessions, pay extra care that your secret key is "
"always kept completely secret, for any system which might be remotely "
"accessible."
msgstr ""

msgid "**The session data is signed but not encrypted**"
msgstr ""

msgid ""
"When using the cookies backend the session data can be read by the client."
msgstr ""

msgid ""
"A MAC (Message Authentication Code) is used to protect the data against "
"changes by the client, so that the session data will be invalidated when "
"being tampered with. The same invalidation happens if the client storing the "
"cookie (e.g. your user's browser) can't store all of the session cookie and "
"drops data. Even though Django compresses the data, it's still entirely "
"possible to exceed the `common limit of 4096 bytes`_ per cookie."
msgstr ""

msgid "**No freshness guarantee**"
msgstr ""

msgid ""
"Note also that while the MAC can guarantee the authenticity of the data "
"(that it was generated by your site, and not someone else), and the "
"integrity of the data (that it is all there and correct), it cannot "
"guarantee freshness i.e. that you are being sent back the last thing you "
"sent to the client. This means that for some uses of session data, the "
"cookie backend might open you up to `replay attacks`_. Unlike other session "
"backends which keep a server-side record of each session and invalidate it "
"when a user logs out, cookie-based sessions are not invalidated when a user "
"logs out. Thus if an attacker steals a user's cookie, they can use that "
"cookie to login as that user even if the user logs out. Cookies will only be "
"detected as 'stale' if they are older than your :setting:"
"`SESSION_COOKIE_AGE`."
msgstr ""

msgid "**Performance**"
msgstr ""

msgid ""
"Finally, the size of a cookie can have an impact on the `speed of your "
"site`_."
msgstr ""

msgid "Using sessions in views"
msgstr ""

msgid ""
"When ``SessionMiddleware`` is activated, each :class:`~django.http."
"HttpRequest` object -- the first argument to any Django view function -- "
"will have a ``session`` attribute, which is a dictionary-like object."
msgstr ""

msgid ""
"You can read it and write to ``request.session`` at any point in your view. "
"You can edit it multiple times."
msgstr ""

msgid ""
"This is the base class for all session objects. It has the following "
"standard dictionary methods:"
msgstr ""

msgid "Example: ``fav_color = request.session['fav_color']``"
msgstr ""

msgid "Example: ``request.session['fav_color'] = 'blue'``"
msgstr ""

msgid ""
"Example: ``del request.session['fav_color']``. This raises ``KeyError`` if "
"the given ``key`` isn't already in the session."
msgstr ""

msgid "Example: ``'fav_color' in request.session``"
msgstr ""

msgid "Example: ``fav_color = request.session.get('fav_color', 'red')``"
msgstr ""

msgid "Example: ``fav_color = request.session.pop('fav_color', 'blue')``"
msgstr ""

msgid "It also has these methods:"
msgstr ""

msgid ""
"Deletes the current session data from the session and deletes the session "
"cookie. This is used if you want to ensure that the previous session data "
"can't be accessed again from the user's browser (for example, the :func:"
"`django.contrib.auth.logout()` function calls it)."
msgstr ""

msgid ""
"Sets a test cookie to determine whether the user's browser supports cookies. "
"Due to the way cookies work, you won't be able to test this until the user's "
"next page request. See `Setting test cookies`_ below for more information."
msgstr ""

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"browser accepted the test cookie. Due to the way cookies work, you'll have "
"to call ``set_test_cookie()`` on a previous, separate page request. See "
"`Setting test cookies`_ below for more information."
msgstr ""

msgid "Deletes the test cookie. Use this to clean up after yourself."
msgstr ""

msgid ""
"Sets the expiration time for the session. You can pass a number of different "
"values:"
msgstr ""

msgid ""
"If ``value`` is an integer, the session will expire after that many seconds "
"of inactivity. For example, calling ``request.session.set_expiry(300)`` "
"would make the session expire in 5 minutes."
msgstr ""

msgid ""
"If ``value`` is a ``datetime`` or ``timedelta`` object, the session will "
"expire at that specific date/time. Note that ``datetime`` and ``timedelta`` "
"values are only serializable if you are using the :class:`~django.contrib."
"sessions.serializers.PickleSerializer`."
msgstr ""

msgid ""
"If ``value`` is ``0``, the user's session cookie will expire when the user's "
"Web browser is closed."
msgstr ""

msgid ""
"If ``value`` is ``None``, the session reverts to using the global session "
"expiry policy."
msgstr ""

msgid ""
"Reading a session is not considered activity for expiration purposes. "
"Session expiration is computed from the last time the session was *modified*."
msgstr ""

msgid ""
"Returns the number of seconds until this session expires. For sessions with "
"no custom expiration (or those set to expire at browser close), this will "
"equal :setting:`SESSION_COOKIE_AGE`."
msgstr ""

msgid "This function accepts two optional keyword arguments:"
msgstr ""

msgid ""
"``modification``: last modification of the session, as a :class:`~datetime."
"datetime` object. Defaults to the current time."
msgstr ""

msgid ""
"``expiry``: expiry information for the session, as a :class:`~datetime."
"datetime` object, an :class:`int` (in seconds), or ``None``. Defaults to the "
"value stored in the session by :meth:`set_expiry`, if there is one, or "
"``None``."
msgstr ""

msgid ""
"Returns the date this session will expire. For sessions with no custom "
"expiration (or those set to expire at browser close), this will equal the "
"date :setting:`SESSION_COOKIE_AGE` seconds from now."
msgstr ""

msgid ""
"This function accepts the same keyword arguments as :meth:`get_expiry_age`."
msgstr ""

msgid ""
"Returns either ``True`` or ``False``, depending on whether the user's "
"session cookie will expire when the user's Web browser is closed."
msgstr ""

msgid ""
"Removes expired sessions from the session store. This class method is called "
"by :djadmin:`clearsessions`."
msgstr ""

msgid ""
"Creates a new session key while retaining the current session data. :func:"
"`django.contrib.auth.login()` calls this method to mitigate against session "
"fixation."
msgstr ""

msgid "Session serialization"
msgstr ""

msgid ""
"By default, Django serializes session data using JSON. You can use the :"
"setting:`SESSION_SERIALIZER` setting to customize the session serialization "
"format. Even with the caveats described in :ref:`custom-serializers`, we "
"highly recommend sticking with JSON serialization *especially if you are "
"using the cookie backend*."
msgstr ""

msgid ""
"For example, here's an attack scenario if you use :mod:`pickle` to serialize "
"session data. If you're using the :ref:`signed cookie session backend "
"<cookie-session-backend>` and :setting:`SECRET_KEY` is known by an attacker "
"(there isn't an inherent vulnerability in Django that would cause it to "
"leak), the attacker could insert a string into their session which, when "
"unpickled, executes arbitrary code on the server. The technique for doing so "
"is simple and easily available on the internet. Although the cookie session "
"storage signs the cookie-stored data to prevent tampering, a :setting:"
"`SECRET_KEY` leak immediately escalates to a remote code execution "
"vulnerability."
msgstr ""

msgid "Bundled serializers"
msgstr ""

msgid ""
"A wrapper around the JSON serializer from :mod:`django.core.signing`. Can "
"only serialize basic data types."
msgstr ""

msgid ""
"In addition, as JSON supports only string keys, note that using non-string "
"keys in ``request.session`` won't work as expected::"
msgstr ""

msgid ""
"Similarly, data that can't be encoded in JSON, such as non-UTF8 bytes like "
"``'\\xd9'`` (which raises :exc:`UnicodeDecodeError`), can't be stored."
msgstr ""

msgid ""
"See the :ref:`custom-serializers` section for more details on limitations of "
"JSON serialization."
msgstr ""

msgid ""
"Supports arbitrary Python objects, but, as described above, can lead to a "
"remote code execution vulnerability if :setting:`SECRET_KEY` becomes known "
"by an attacker."
msgstr ""

msgid "Write your own serializer"
msgstr ""

msgid ""
"Note that unlike :class:`~django.contrib.sessions.serializers."
"PickleSerializer`, the :class:`~django.contrib.sessions.serializers."
"JSONSerializer` cannot handle arbitrary Python data types. As is often the "
"case, there is a trade-off between convenience and security. If you wish to "
"store more advanced data types including ``datetime`` and ``Decimal`` in "
"JSON backed sessions, you will need to write a custom serializer (or convert "
"such values to a JSON serializable object before storing them in ``request."
"session``). While serializing these values is fairly straightforward (:class:"
"`~django.core.serializers.json.DjangoJSONEncoder` may be helpful), writing a "
"decoder that can reliably get back the same thing that you put in is more "
"fragile. For example, you run the risk of returning a ``datetime`` that was "
"actually a string that just happened to be in the same format chosen for "
"``datetime``\\s)."
msgstr ""

msgid ""
"Your serializer class must implement two methods, ``dumps(self, obj)`` and "
"``loads(self, data)``, to serialize and deserialize the dictionary of "
"session data, respectively."
msgstr ""

msgid "Session object guidelines"
msgstr ""

msgid ""
"Use normal Python strings as dictionary keys on ``request.session``. This is "
"more of a convention than a hard-and-fast rule."
msgstr ""

msgid ""
"Session dictionary keys that begin with an underscore are reserved for "
"internal use by Django."
msgstr ""

msgid ""
"Don't override ``request.session`` with a new object, and don't access or "
"set its attributes. Use it like a Python dictionary."
msgstr ""

msgid ""
"This simplistic view sets a ``has_commented`` variable to ``True`` after a "
"user posts a comment. It doesn't let a user post a comment more than once::"
msgstr ""

msgid "This simplistic view logs in a \"member\" of the site::"
msgstr ""

msgid "...And this one logs a member out, according to ``login()`` above::"
msgstr ""

msgid ""
"The standard :meth:`django.contrib.auth.logout` function actually does a bit "
"more than this to prevent inadvertent data leakage. It calls the :meth:"
"`~backends.base.SessionBase.flush` method of ``request.session``. We are "
"using this example as a demonstration of how to work with session objects, "
"not as a full ``logout()`` implementation."
msgstr ""

msgid "Setting test cookies"
msgstr ""

msgid ""
"As a convenience, Django provides an easy way to test whether the user's "
"browser accepts cookies. Just call the :meth:`~backends.base.SessionBase."
"set_test_cookie` method of ``request.session`` in a view, and call :meth:"
"`~backends.base.SessionBase.test_cookie_worked` in a subsequent view -- not "
"in the same view call."
msgstr ""

msgid ""
"This awkward split between ``set_test_cookie()`` and "
"``test_cookie_worked()`` is necessary due to the way cookies work. When you "
"set a cookie, you can't actually tell whether a browser accepted it until "
"the browser's next request."
msgstr ""

msgid ""
"It's good practice to use :meth:`~backends.base.SessionBase."
"delete_test_cookie()` to clean up after yourself. Do this after you've "
"verified that the test cookie worked."
msgstr ""

msgid "Here's a typical usage example::"
msgstr ""

msgid "Using sessions out of views"
msgstr ""

msgid ""
"The examples in this section import the ``SessionStore`` object directly "
"from the ``django.contrib.sessions.backends.db`` backend. In your own code, "
"you should consider importing ``SessionStore`` from the session engine "
"designated by :setting:`SESSION_ENGINE`, as below:"
msgstr ""

msgid "An API is available to manipulate session data outside of a view::"
msgstr ""

msgid ""
"``SessionStore.create()`` is designed to create a new session (i.e. one not "
"loaded from the session store and with ``session_key=None``). ``save()`` is "
"designed to save an existing session (i.e. one loaded from the session "
"store). Calling ``save()`` on a new session may also work but has a small "
"chance of generating a ``session_key`` that collides with an existing one. "
"``create()`` calls ``save()`` and loops until an unused ``session_key`` is "
"generated."
msgstr ""

msgid ""
"If you're using the ``django.contrib.sessions.backends.db`` backend, each "
"session is just a normal Django model. The ``Session`` model is defined in "
"``django/contrib/sessions/models.py``. Because it's a normal model, you can "
"access sessions using the normal Django database API::"
msgstr ""

msgid ""
"Note that you'll need to call :meth:`~base_session.AbstractBaseSession."
"get_decoded()` to get the session dictionary. This is necessary because the "
"dictionary is stored in an encoded format::"
msgstr ""

msgid "When sessions are saved"
msgstr ""

msgid ""
"By default, Django only saves to the session database when the session has "
"been modified -- that is if any of its dictionary values have been assigned "
"or deleted::"
msgstr ""

msgid ""
"In the last case of the above example, we can tell the session object "
"explicitly that it has been modified by setting the ``modified`` attribute "
"on the session object::"
msgstr ""

msgid ""
"To change this default behavior, set the :setting:"
"`SESSION_SAVE_EVERY_REQUEST` setting to ``True``. When set to ``True``, "
"Django will save the session to the database on every single request."
msgstr ""

msgid ""
"Note that the session cookie is only sent when a session has been created or "
"modified. If :setting:`SESSION_SAVE_EVERY_REQUEST` is ``True``, the session "
"cookie will be sent on every request."
msgstr ""

msgid ""
"Similarly, the ``expires`` part of a session cookie is updated each time the "
"session cookie is sent."
msgstr ""

msgid "The session is not saved if the response's status code is 500."
msgstr ""

msgid "Browser-length sessions vs. persistent sessions"
msgstr ""

msgid ""
"You can control whether the session framework uses browser-length sessions "
"vs. persistent sessions with the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` "
"setting."
msgstr ""

msgid ""
"By default, :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``False``, "
"which means session cookies will be stored in users' browsers for as long "
"as :setting:`SESSION_COOKIE_AGE`. Use this if you don't want people to have "
"to log in every time they open a browser."
msgstr ""

msgid ""
"If :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` is set to ``True``, Django "
"will use browser-length cookies -- cookies that expire as soon as the user "
"closes their browser. Use this if you want people to have to log in every "
"time they open a browser."
msgstr ""

msgid ""
"This setting is a global default and can be overwritten at a per-session "
"level by explicitly calling the :meth:`~backends.base.SessionBase."
"set_expiry` method of ``request.session`` as described above in `using "
"sessions in views`_."
msgstr ""

msgid ""
"Some browsers (Chrome, for example) provide settings that allow users to "
"continue browsing sessions after closing and re-opening the browser. In some "
"cases, this can interfere with the :setting:"
"`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting and prevent sessions from expiring "
"on browser close. Please be aware of this while testing Django applications "
"which have the :setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE` setting enabled."
msgstr ""

msgid "Clearing the session store"
msgstr ""

msgid ""
"As users create new sessions on your website, session data can accumulate in "
"your session store. If you're using the database backend, the "
"``django_session`` database table will grow. If you're using the file "
"backend, your temporary directory will contain an increasing number of files."
msgstr ""

msgid ""
"To understand this problem, consider what happens with the database backend. "
"When a user logs in, Django adds a row to the ``django_session`` database "
"table. Django updates this row each time the session data changes. If the "
"user logs out manually, Django deletes the row. But if the user does *not* "
"log out, the row never gets deleted. A similar process happens with the file "
"backend."
msgstr ""

msgid ""
"Django does *not* provide automatic purging of expired sessions. Therefore, "
"it's your job to purge expired sessions on a regular basis. Django provides "
"a clean-up management command for this purpose: :djadmin:`clearsessions`. "
"It's recommended to call this command on a regular basis, for example as a "
"daily cron job."
msgstr ""

msgid ""
"Note that the cache backend isn't vulnerable to this problem, because caches "
"automatically delete stale data. Neither is the cookie backend, because the "
"session data is stored by the users' browsers."
msgstr ""

msgid "Settings"
msgstr ""

msgid ""
"A few :ref:`Django settings <settings-sessions>` give you control over "
"session behavior:"
msgstr ""

msgid ":setting:`SESSION_CACHE_ALIAS`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_AGE`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_DOMAIN`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_HTTPONLY`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_NAME`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_PATH`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_SAMESITE`"
msgstr ""

msgid ":setting:`SESSION_COOKIE_SECURE`"
msgstr ""

msgid ":setting:`SESSION_ENGINE`"
msgstr ""

msgid ":setting:`SESSION_EXPIRE_AT_BROWSER_CLOSE`"
msgstr ""

msgid ":setting:`SESSION_FILE_PATH`"
msgstr ""

msgid ":setting:`SESSION_SAVE_EVERY_REQUEST`"
msgstr ""

msgid ":setting:`SESSION_SERIALIZER`"
msgstr ""

msgid "Session security"
msgstr ""

msgid ""
"Subdomains within a site are able to set cookies on the client for the whole "
"domain. This makes session fixation possible if cookies are permitted from "
"subdomains not controlled by trusted users."
msgstr ""

msgid ""
"For example, an attacker could log into ``good.example.com`` and get a valid "
"session for their account. If the attacker has control over ``bad.example."
"com``, they can use it to send their session key to you since a subdomain is "
"permitted to set cookies on ``*.example.com``. When you visit ``good.example."
"com``, you'll be logged in as the attacker and might inadvertently enter "
"your sensitive personal data (e.g. credit card info) into the attackers "
"account."
msgstr ""

msgid ""
"Another possible attack would be if ``good.example.com`` sets its :setting:"
"`SESSION_COOKIE_DOMAIN` to ``\"example.com\"`` which would cause session "
"cookies from that site to be sent to ``bad.example.com``."
msgstr ""

msgid "Technical details"
msgstr ""

msgid ""
"The session dictionary accepts any :mod:`json` serializable value when "
"using :class:`~django.contrib.sessions.serializers.JSONSerializer` or any "
"picklable Python object when using :class:`~django.contrib.sessions."
"serializers.PickleSerializer`. See the :mod:`pickle` module for more "
"information."
msgstr ""

msgid "Session data is stored in a database table named ``django_session`` ."
msgstr ""

msgid ""
"Django only sends a cookie if it needs to. If you don't set any session "
"data, it won't send a session cookie."
msgstr ""

msgid "The ``SessionStore`` object"
msgstr ""

msgid ""
"When working with sessions internally, Django uses a session store object "
"from the corresponding session engine. By convention, the session store "
"object class is named ``SessionStore`` and is located in the module "
"designated by :setting:`SESSION_ENGINE`."
msgstr ""

msgid ""
"All ``SessionStore`` classes available in Django inherit from :class:"
"`~backends.base.SessionBase` and implement data manipulation methods, namely:"
msgstr ""

msgid "``exists()``"
msgstr ""

msgid "``create()``"
msgstr ""

msgid "``save()``"
msgstr ""

msgid "``delete()``"
msgstr ""

msgid "``load()``"
msgstr ""

msgid ":meth:`~backends.base.SessionBase.clear_expired`"
msgstr ""

msgid ""
"In order to build a custom session engine or to customize an existing one, "
"you may create a new class inheriting from :class:`~backends.base."
"SessionBase` or any other existing ``SessionStore`` class."
msgstr ""

msgid ""
"Extending most of the session engines is quite straightforward, but doing so "
"with database-backed session engines generally requires some extra effort "
"(see the next section for details)."
msgstr ""

msgid "Extending database-backed session engines"
msgstr ""

msgid ""
"Creating a custom database-backed session engine built upon those included "
"in Django (namely ``db`` and ``cached_db``) may be done by inheriting :class:"
"`~base_session.AbstractBaseSession` and either ``SessionStore`` class."
msgstr ""

msgid ""
"``AbstractBaseSession`` and ``BaseSessionManager`` are importable from "
"``django.contrib.sessions.base_session`` so that they can be imported "
"without including ``django.contrib.sessions`` in :setting:`INSTALLED_APPS`."
msgstr ""

msgid "The abstract base session model."
msgstr "抽象基本会话模型。"

msgid ""
"Primary key. The field itself may contain up to 40 characters. The current "
"implementation generates a 32-character string (a random sequence of digits "
"and lowercase ASCII letters)."
msgstr ""
"主键。字段本身可能包含多达40个字符。当前实现生成一个32个字符的字符串（一个随"
"机的数字序列和小写的ascii字母）。"

msgid "A string containing an encoded and serialized session dictionary."
msgstr "包含编码和序列化会话字典的字符串。"

msgid "A datetime designating when the session expires."
msgstr "指定会话何时到期的日期时间。"

msgid ""
"Expired sessions are not available to a user, however, they may still be "
"stored in the database until the :djadmin:`clearsessions` management command "
"is run."
msgstr ""
"但是，过期的会话对用户不可用，但在运行 :djadmin:`clearsessions` 管理命令之"
"前，它们仍可能存储在数据库中。"

msgid "Returns a session store class to be used with this session model."
msgstr "返回要与此会话模型一起使用的会话存储类。"

msgid "Returns decoded session data."
msgstr "返回解码的会话数据。"

msgid "Decoding is performed by the session store class."
msgstr "解码由会话存储类执行。"

msgid ""
"You can also customize the model manager by subclassing :class:`~django."
"contrib.sessions.base_session.BaseSessionManager`:"
msgstr ""
"还可以通过子类 :class:`~django.contrib.sessions.base_session."
"BaseSessionManager` 自定义模型管理器。"

msgid ""
"Returns the given session dictionary serialized and encoded as a string."
msgstr "返回序列化并编码为字符串的给定会话字典。"

msgid "Encoding is performed by the session store class tied to a model class."
msgstr "编码由绑定到模型类的会话存储类执行。"

msgid ""
"Saves session data for a provided session key, or deletes the session in "
"case the data is empty."
msgstr "为提供的会话密钥保存会话数据，或在数据为空时删除会话。"

msgid ""
"Customization of ``SessionStore`` classes is achieved by overriding methods "
"and properties described below:"
msgstr "通过重写以下描述的方法和属性，实现了 ``SessionStore`` 类的定制："

msgid "Implements database-backed session store."
msgstr "实现数据库支持的会话存储。"

msgid "Override this method to return a custom session model if you need one."
msgstr "如果需要的话，重写此方法以返回自定义会话模型。"

msgid ""
"Returns a new instance of the session model object, which represents the "
"current session state."
msgstr "返回会话模型对象的新实例，该实例表示当前会话状态。"

msgid ""
"Overriding this method provides the ability to modify session model data "
"before it's saved to database."
msgstr "重写此方法提供了在将会话模型数据保存到数据库之前修改它的能力。"

msgid "Implements cached database-backed session store."
msgstr "实现缓存数据库支持的会话存储。"

msgid "A prefix added to a session key to build a cache key string."
msgstr "添加到会话键中以生成缓存键字符串的前缀。"

msgid "Example"
msgstr "例如"

msgid ""
"The example below shows a custom database-backed session engine that "
"includes an additional database column to store an account ID (thus "
"providing an option to query the database for all active sessions for an "
"account)::"
msgstr ""
"下面的示例显示了一个自定义数据库支持的会话引擎，它包括一个用于存储帐户id的附"
"加数据库列（从而提供了一个选项，用于查询数据库中帐户的所有活动会话）："

msgid ""
"If you are migrating from the Django's built-in ``cached_db`` session store "
"to a custom one based on ``cached_db``, you should override the cache key "
"prefix in order to prevent a namespace clash::"
msgstr ""
"如果要从Django的内置` `cached_db`` 会话存储迁移到基于``cached_db`` 的自定义存"
"储，则应重写缓存键前缀，以防止名称空间冲突："

msgid "Session IDs in URLs"
msgstr "URL中的会话ID"

msgid ""
"The Django sessions framework is entirely, and solely, cookie-based. It does "
"not fall back to putting session IDs in URLs as a last resort, as PHP does. "
"This is an intentional design decision. Not only does that behavior make "
"URLs ugly, it makes your site vulnerable to session-ID theft via the "
"\"Referer\" header."
msgstr ""
"Django会话框架完全是基于cookie的。 正如PHP所做的那样，它不会回退到将会话ID放"
"置在URL中作为最后的手段。 这是一个有意设计的决定。 这种行为不仅使URL变得很难"
"看，而且使您的站点容易受到会话ID的盗用。"

msgid "Django shortcut functions"
msgstr "Django快捷函数"

msgid ""
"The package ``django.shortcuts`` collects helper functions and classes that "
"\"span\" multiple levels of MVC. In other words, these functions/classes "
"introduce controlled coupling for convenience's sake."
msgstr ""
"包 ``django.shortcuts`` 收集助手函数和“跨”多级mvc的类，换句话说，为了方便起"
"见，这些函数/类引入受控耦合。"

msgid "``render()``"
msgstr "``render()``"

msgid ""
"Combines a given template with a given context dictionary and returns an :"
"class:`~django.http.HttpResponse` object with that rendered text."
msgstr ""
"将给定的模板与给定的上下文字典组合在一起，并以渲染的文本返回一个 :class:"
"`~django.http.HttpResponse` 对象。"

msgid ""
"Django does not provide a shortcut function which returns a :class:`~django."
"template.response.TemplateResponse` because the constructor of :class:"
"`~django.template.response.TemplateResponse` offers the same level of "
"convenience as :func:`render()`."
msgstr ""
"Django没有提供返回:class:`~django.template.response.TemplateResponse` 的快捷"
"函数，因为:class:`~django.template.response.TemplateResponse` 的构造函数提供"
"了与:func:`render()`相同的方便程度。"

msgid "Required arguments"
msgstr "必选参数"

msgid "``request``"
msgstr "``request``"

msgid "The request object used to generate this response."
msgstr "用于生成此响应的请求对象。"

msgid "``template_name``"
msgstr "``template_name``"

msgid ""
"The full name of a template to use or sequence of template names. If a "
"sequence is given, the first template that exists will be used. See the :ref:"
"`template loading documentation <template-loading>` for more information on "
"how templates are found."
msgstr ""
"要使用的模板的全名或模板名称的序列。如果给定一个序列，则将使用存在的第一个模"
"板。有关如何查找模板的更多信息，请参见 :ref:`template loading documentation "
"<template-loading>` 。"

msgid "Optional arguments"
msgstr "可选参数"

msgid "``context``"
msgstr "``context``"

msgid ""
"A dictionary of values to add to the template context. By default, this is "
"an empty dictionary. If a value in the dictionary is callable, the view will "
"call it just before rendering the template."
msgstr ""
"要添加到模板上下文的值的字典。 默认情况下，这是一个空的字典。 如果字典中的值"
"是可调用的，则视图将在渲染模板之前调用它。"

msgid "``content_type``"
msgstr "``content_type``"

msgid ""
"The MIME type to use for the resulting document. Defaults to the value of "
"the :setting:`DEFAULT_CONTENT_TYPE` setting."
msgstr ""
"用于结果文档的MIME类型默认为：设置:setting:`DEFAULT_CONTENT_TYPE` 设置的值。"

msgid "``status``"
msgstr "``status``"

msgid "The status code for the response. Defaults to ``200``."
msgstr "响应的状态代码默认为“200”。"

msgid "``using``"
msgstr "``using``"

msgid ""
"The :setting:`NAME <TEMPLATES-NAME>` of a template engine to use for loading "
"the template."
msgstr "用于加载模板的模板引擎的 :setting:`NAME ` 。"

msgid ""
"The following example renders the template ``myapp/index.html`` with the "
"MIME type :mimetype:`application/xhtml+xml`::"
msgstr ""
"下面的示例使用MIME类型呈现模板``myapp/index.html`` :mimetype:`application/"
"xhtml+xml`："

msgid "This example is equivalent to::"
msgstr "此示例相当于："

msgid "``render_to_response()``"
msgstr "``render_to_response()``"

msgid ""
"This function preceded the introduction of :func:`render` and works "
"similarly except that it doesn't make the ``request`` available in the "
"response."
msgstr ""
"该函数之前引入了:func:`render` ，并类似地工作，只是它不使响应中的 "
"``request`` 可用。"

msgid "``redirect()``"
msgstr "``redirect()``"

msgid ""
"Returns an :class:`~django.http.HttpResponseRedirect` to the appropriate URL "
"for the arguments passed."
msgstr ""
"将一个 :class:`~django.http.HttpResponseRedirect` 返回到传递的参数的适当URL。"

msgid "The arguments could be:"
msgstr "论点可以是："

msgid ""
"A model: the model's :meth:`~django.db.models.Model.get_absolute_url()` "
"function will be called."
msgstr ""

msgid ""
"A view name, possibly with arguments: :func:`~django.urls.reverse` will be "
"used to reverse-resolve the name."
msgstr ""

msgid ""
"An absolute or relative URL, which will be used as-is for the redirect "
"location."
msgstr ""

msgid ""
"By default issues a temporary redirect; pass ``permanent=True`` to issue a "
"permanent redirect."
msgstr ""

msgid "You can use the :func:`redirect` function in a number of ways."
msgstr ""

msgid ""
"By passing some object; that object's :meth:`~django.db.models.Model."
"get_absolute_url` method will be called to figure out the redirect URL::"
msgstr ""

msgid ""
"By passing the name of a view and optionally some positional or keyword "
"arguments; the URL will be reverse resolved using the :func:`~django.urls."
"reverse` method::"
msgstr ""

msgid "By passing a hardcoded URL to redirect to::"
msgstr ""

msgid "This also works with full URLs::"
msgstr ""

msgid ""
"By default, :func:`redirect` returns a temporary redirect. All of the above "
"forms accept a ``permanent`` argument; if set to ``True`` a permanent "
"redirect will be returned::"
msgstr ""

msgid "``get_object_or_404()``"
msgstr ""

msgid ""
"Calls :meth:`~django.db.models.query.QuerySet.get()` on a given model "
"manager, but it raises :class:`~django.http.Http404` instead of the model's :"
"class:`~django.db.models.Model.DoesNotExist` exception."
msgstr ""

msgid "``klass``"
msgstr ""

msgid ""
"A :class:`~django.db.models.Model` class, a :class:`~django.db.models."
"Manager`, or a :class:`~django.db.models.query.QuerySet` instance from which "
"to get the object."
msgstr ""

msgid "``**kwargs``"
msgstr ""

msgid ""
"Lookup parameters, which should be in the format accepted by ``get()`` and "
"``filter()``."
msgstr ""

msgid ""
"The following example gets the object with the primary key of 1 from "
"``MyModel``::"
msgstr ""

msgid ""
"The most common use case is to pass a :class:`~django.db.models.Model`, as "
"shown above. However, you can also pass a :class:`~django.db.models.query."
"QuerySet` instance::"
msgstr ""

msgid "The above example is a bit contrived since it's equivalent to doing::"
msgstr ""

msgid ""
"but it can be useful if you are passed the ``queryset`` variable from "
"somewhere else."
msgstr ""

msgid ""
"Finally, you can also use a :class:`~django.db.models.Manager`. This is "
"useful for example if you have a :ref:`custom manager<custom-managers>`::"
msgstr ""

msgid ""
"You can also use :class:`related managers<django.db.models.fields.related."
"RelatedManager>`::"
msgstr ""

msgid ""
"Note: As with ``get()``, a :class:`~django.core.exceptions."
"MultipleObjectsReturned` exception will be raised if more than one object is "
"found."
msgstr ""

msgid "``get_list_or_404()``"
msgstr ""

msgid ""
"Returns the result of :meth:`~django.db.models.query.QuerySet.filter()` on a "
"given model manager cast to a list, raising :class:`~django.http.Http404` if "
"the resulting list is empty."
msgstr ""

msgid ""
"A :class:`~django.db.models.Model`, :class:`~django.db.models.Manager` or :"
"class:`~django.db.models.query.QuerySet` instance from which to get the list."
msgstr ""

msgid "The following example gets all published objects from ``MyModel``::"
msgstr ""

msgid "URL dispatcher"
msgstr "URL调度器"

msgid ""
"A clean, elegant URL scheme is an important detail in a high-quality Web "
"application. Django lets you design URLs however you want, with no framework "
"limitations."
msgstr ""
"对于高质量的Web 应用来说，使用简洁、优雅的URL 模式是一个非常值得重视的细节。"
"Django 允许你自由地设计你的URL，不受框架束缚。"

msgid ""
"See `Cool URIs don't change`_, by World Wide Web creator Tim Berners-Lee, "
"for excellent arguments on why URLs should be clean and usable."
msgstr ""
"参见万维网的发明者Berners-Lee 的 `Cool URIs don't change`_，里面有关于为什么"
"URL 应该保持整洁和有意义的卓越论证。"

msgid ""
"To design URLs for an app, you create a Python module informally called a "
"**URLconf** (URL configuration). This module is pure Python code and is a "
"mapping between URL path expressions to Python functions (your views)."
msgstr ""
"为了给一个应用设计URL，你需要创建一个Python 模块，通常被称为**URLconf**(URL "
"configuration)。这个模块是纯粹的Python 代码，包含URL 模式(简单的正则表达式)到"
"Python 函数(你的视图)的简单映射。"

msgid ""
"This mapping can be as short or as long as needed. It can reference other "
"mappings. And, because it's pure Python code, it can be constructed "
"dynamically."
msgstr ""
"映射可短可长，随便你。它可以引用其它的映射。而且，因为它是纯粹的Python 代码，"
"它可以动态构造。"

msgid ""
"Django also provides a way to translate URLs according to the active "
"language. See the :ref:`internationalization documentation <url-"
"internationalization>` for more information."
msgstr ""
"Django 还提供根据当前语言翻译URL 的一种方法。更多信息参见 :ref:`国际化文档 "
"<url-internationalization>`。"

msgid "How Django processes a request"
msgstr "Django 如何处理一个请求"

msgid ""
"When a user requests a page from your Django-powered site, this is the "
"algorithm the system follows to determine which Python code to execute:"
msgstr ""
"当一个用户请求Django 站点的一个页面，下面是Django 系统决定执行哪个Python 代码"
"使用的算法："

msgid ""
"Django determines the root URLconf module to use. Ordinarily, this is the "
"value of the :setting:`ROOT_URLCONF` setting, but if the incoming "
"``HttpRequest`` object has a :attr:`~django.http.HttpRequest.urlconf` "
"attribute (set by middleware), its value will be used in place of the :"
"setting:`ROOT_URLCONF` setting."
msgstr ""

msgid ""
"Django loads that Python module and looks for the variable ``urlpatterns``. "
"This should be a Python list of :func:`django.urls.path` and/or :func:"
"`django.urls.re_path` instances."
msgstr ""

msgid ""
"Django runs through each URL pattern, in order, and stops at the first one "
"that matches the requested URL."
msgstr "Django 依次匹配每个URL 模式，在与请求的URL 匹配的第一个模式停下来。"

msgid ""
"Once one of the URL patterns matches, Django imports and calls the given "
"view, which is a simple Python function (or a :doc:`class-based view </"
"topics/class-based-views/index>`). The view gets passed the following "
"arguments:"
msgstr ""

msgid "An instance of :class:`~django.http.HttpRequest`."
msgstr "一个 :class:`~django.http.HttpRequest` 实例。"

msgid ""
"If the matched URL pattern returned no named groups, then the matches from "
"the regular expression are provided as positional arguments."
msgstr ""

msgid ""
"The keyword arguments are made up of any named parts matched by the path "
"expression, overridden by any arguments specified in the optional ``kwargs`` "
"argument to :func:`django.urls.path` or :func:`django.urls.re_path`."
msgstr ""

msgid ""
"If no URL pattern matches, or if an exception is raised during any point in "
"this process, Django invokes an appropriate error-handling view. See `Error "
"handling`_ below."
msgstr ""

msgid "Here's a sample URLconf::"
msgstr "下面是一个简单的 URLconf:: "

msgid "To capture a value from the URL, use angle brackets."
msgstr ""

msgid ""
"Captured values can optionally include a converter type. For example, use "
"``<int:name>`` to capture an integer parameter. If a converter isn't "
"included, any string, excluding a ``/`` character, is matched."
msgstr ""

msgid ""
"There's no need to add a leading slash, because every URL has that. For "
"example, it's ``articles``, not ``/articles``."
msgstr ""

msgid "Example requests:"
msgstr "一些请求的例子："

msgid ""
"A request to ``/articles/2005/03/`` would match the third entry in the list. "
"Django would call the function ``views.month_archive(request, year=2005, "
"month=3)``."
msgstr ""

msgid ""
"``/articles/2003/`` would match the first pattern in the list, not the "
"second one, because the patterns are tested in order, and the first one is "
"the first test to pass. Feel free to exploit the ordering to insert special "
"cases like this. Here, Django would call the function ``views."
"special_case_2003(request)``"
msgstr ""
" ``/articles/2003/`` 将匹配列表中的第一个模式不是第二个，因为模式按顺序匹配，"
"第一个会首先测试是否匹配。请像这样自由插入一些特殊的情况来探测匹配的次序。在"
"这里Django会调用函数 ``views.special_case_2003(request)`` "

msgid ""
"``/articles/2003`` would not match any of these patterns, because each "
"pattern requires that the URL end with a slash."
msgstr ""
" ``/articles/2003``  不匹配任何一个模式，因为每个模式要求URL 以一个斜线结尾。"

msgid ""
"``/articles/2003/03/building-a-django-site/`` would match the final pattern. "
"Django would call the function ``views.article_detail(request, year=2003, "
"month=3, slug=\"building-a-django-site\")``."
msgstr ""

msgid "Path converters"
msgstr ""

msgid "The following path converters are available by default:"
msgstr ""

msgid ""
"``str`` - Matches any non-empty string, excluding the path separator, "
"``'/'``. This is the default if a converter isn't included in the expression."
msgstr ""

msgid "``int`` - Matches zero or any positive integer. Returns an `int`."
msgstr ""

msgid ""
"``slug`` - Matches any slug string consisting of ASCII letters or numbers, "
"plus the hyphen and underscore characters. For example, ``building-your-1st-"
"django-site``."
msgstr ""

msgid ""
"``uuid`` - Matches a formatted UUID. To prevent multiple URLs from mapping "
"to the same page, dashes must be included and letters must be lowercase. For "
"example, ``075194d3-6885-417e-a8a8-6c931e272f00``. Returns a :class:`~uuid."
"UUID` instance."
msgstr ""

msgid ""
"``path`` - Matches any non-empty string, including the path separator, "
"``'/'``. This allows you to match against a complete URL path rather than "
"just a segment of a URL path as with ``str``."
msgstr ""

msgid "Registering custom path converters"
msgstr ""

msgid ""
"For more complex matching requirements, you can define your own path "
"converters."
msgstr ""

msgid "A converter is a class that includes the following:"
msgstr ""

msgid "A ``regex`` class attribute, as a string."
msgstr ""

msgid ""
"A ``to_python(self, value)`` method, which handles converting the matched "
"string into the type that should be passed to the view function. It should "
"raise ``ValueError`` if it can't convert the given value."
msgstr ""

msgid ""
"A ``to_url(self, value)`` method, which handles converting the Python type "
"into a string to be used in the URL."
msgstr ""

msgid ""
"Register custom converter classes in your URLconf using :func:`~django.urls."
"register_converter`::"
msgstr ""

msgid "Using regular expressions"
msgstr ""

msgid ""
"If the paths and converters syntax isn't sufficient for defining your URL "
"patterns, you can also use regular expressions. To do so, use :func:`~django."
"urls.re_path` instead of :func:`~django.urls.path`."
msgstr ""

msgid ""
"In Python regular expressions, the syntax for named regular expression "
"groups is ``(?P<name>pattern)``, where ``name`` is the name of the group and "
"``pattern`` is some pattern to match."
msgstr ""

msgid ""
"Here's the example URLconf from earlier, rewritten using regular "
"expressions::"
msgstr ""

msgid ""
"This accomplishes roughly the same thing as the previous example, except:"
msgstr ""

msgid ""
"The exact URLs that will match are slightly more constrained. For example, "
"the year 10000 will no longer match since the year integers are constrained "
"to be exactly four digits long."
msgstr ""

msgid ""
"Each captured argument is sent to the view as a string, regardless of what "
"sort of match the regular expression makes."
msgstr ""

msgid ""
"When switching from using :func:`~django.urls.path` to :func:`~django.urls."
"re_path` or vice versa, it's particularly important to be aware that the "
"type of the view arguments may change, and so you may need to adapt your "
"views."
msgstr ""

msgid "Using unnamed regular expression groups"
msgstr ""

msgid ""
"As well as the named group syntax, e.g. ``(?P<year>[0-9]{4})``, you can also "
"use the shorter unnamed group, e.g. ``([0-9]{4})``."
msgstr ""

msgid ""
"This usage isn't particularly recommended as it makes it easier to "
"accidentally introduce errors between the intended meaning of a match and "
"the arguments of the view."
msgstr ""

msgid ""
"In either case, using only one style within a given regex is recommended. "
"When both styles are mixed, any unnamed groups are ignored and only named "
"groups are passed to the view function."
msgstr ""

msgid "Nested arguments"
msgstr ""

msgid ""
"Regular expressions allow nested arguments, and Django will resolve them and "
"pass them to the view. When reversing, Django will try to fill in all outer "
"captured arguments, ignoring any nested captured arguments. Consider the "
"following URL patterns which optionally take a page argument::"
msgstr ""

msgid ""
"Both patterns use nested arguments and will resolve: for example, ``blog/"
"page-2/`` will result in a match to ``blog_articles`` with two positional "
"arguments: ``page-2/`` and ``2``. The second pattern for ``comments`` will "
"match ``comments/page-2/`` with keyword argument ``page_number`` set to 2. "
"The outer argument in this case is a non-capturing argument ``(?:...)``."
msgstr ""

msgid ""
"The ``blog_articles`` view needs the outermost captured argument to be "
"reversed, ``page-2/`` or no arguments in this case, while ``comments`` can "
"be reversed with either no arguments or a value for ``page_number``."
msgstr ""

msgid ""
"Nested captured arguments create a strong coupling between the view "
"arguments and the URL as illustrated by ``blog_articles``: the view receives "
"part of the URL (``page-2/``) instead of only the value the view is "
"interested in. This coupling is even more pronounced when reversing, since "
"to reverse the view we need to pass the piece of URL instead of the page "
"number."
msgstr ""

msgid ""
"As a rule of thumb, only capture the values the view needs to work with and "
"use non-capturing arguments when the regular expression needs an argument "
"but the view ignores it."
msgstr ""

msgid "What the URLconf searches against"
msgstr "URLconf 在什么上查找"

msgid ""
"The URLconf searches against the requested URL, as a normal Python string. "
"This does not include GET or POST parameters, or the domain name."
msgstr ""
"请求的URL被看做是一个普通的Python 字符串， URLconf在其上查找并匹配。进行匹配"
"时将不包括GET或POST请求方式的参数以及域名。"

msgid ""
"For example, in a request to ``https://www.example.com/myapp/``, the URLconf "
"will look for ``myapp/``."
msgstr ""
"例如，  ``https://www.example.com/myapp/`` 请求中，URLconf 将查找 ``myapp/`` "

msgid ""
"In a request to ``https://www.example.com/myapp/?page=3``, the URLconf will "
"look for ``myapp/``."
msgstr ""
"在 ``https://www.example.com/myapp/?page=3`` 请求中，URLconf 仍将查找 "
"``myapp/`` 。"

msgid ""
"The URLconf doesn't look at the request method. In other words, all request "
"methods -- ``POST``, ``GET``, ``HEAD``, etc. -- will be routed to the same "
"function for the same URL."
msgstr ""
"URLconf 不检查使用了哪种请求方法。换句话讲，所有的请求方法 —— 即，对同一个URL"
"的无论是 ``POST请求`` 、 ``GET请求`` 、或 ``HEAD`` 请求方法等等 —— 都将路由到"
"相同的函数。"

msgid "Specifying defaults for view arguments"
msgstr "指定视图参数的默认值"

msgid ""
"A convenient trick is to specify default parameters for your views' "
"arguments. Here's an example URLconf and view::"
msgstr ""
"有一个方便的小技巧是指定视图参数的默认值。 下面是一个URLconf 和视图的示例："

msgid ""
"In the above example, both URL patterns point to the same view -- ``views."
"page`` -- but the first pattern doesn't capture anything from the URL. If "
"the first pattern matches, the ``page()`` function will use its default "
"argument for ``num``, ``1``. If the second pattern matches, ``page()`` will "
"use whatever ``num`` value was captured."
msgstr ""

msgid "Performance"
msgstr "性能"

msgid ""
"Each regular expression in a ``urlpatterns`` is compiled the first time it's "
"accessed. This makes the system blazingly fast."
msgstr ""
" ``urlpatterns`` 中的每个正则表达式在第一次访问它们时被编译。这使得系统相当"
"快。"

msgid "Syntax of the ``urlpatterns`` variable"
msgstr " ``urlpatterns`` 变量的语法"

msgid ""
"``urlpatterns`` should be a Python list of :func:`~django.urls.path` and/or :"
"func:`~django.urls.re_path` instances."
msgstr ""

msgid "Error handling"
msgstr "错误处理"

msgid ""
"When Django can't find a match for the requested URL, or when an exception "
"is raised, Django invokes an error-handling view."
msgstr ""

msgid ""
"The views to use for these cases are specified by four variables. Their "
"default values should suffice for most projects, but further customization "
"is possible by overriding their default values."
msgstr ""
"这些情况发生时使用的视图通过4个变量指定。它们的默认值应该满足大部分项目，但是"
"通过赋值给它们以进一步的自定义也是可以的。"

msgid ""
"See the documentation on :ref:`customizing error views <customizing-error-"
"views>` for the full details."
msgstr "完整的细节请参见 :ref:`自定义错误视图 <customizing-error-views>`  。"

msgid ""
"Such values can be set in your root URLconf. Setting these variables in any "
"other URLconf will have no effect."
msgstr ""
"这些值得在你的根URLconf 中设置。在其它URLconf 中设置这些变量将不会生效果。"

msgid ""
"Values must be callables, or strings representing the full Python import "
"path to the view that should be called to handle the error condition at hand."
msgstr ""
"它们的值必须是可调用的或者是表示视图的Python 完整导入路径的字符串，可以方便地"
"调用它们来处理错误情况。"

msgid "The variables are:"
msgstr "这些值是："

msgid "``handler400`` -- See :data:`django.conf.urls.handler400`."
msgstr "``handler400`` -- 查看 :data:`django.conf.urls.handler400`."

msgid "``handler403`` -- See :data:`django.conf.urls.handler403`."
msgstr "``handler403`` -- 查看 :data:`django.conf.urls.handler403`."

msgid "``handler404`` -- See :data:`django.conf.urls.handler404`."
msgstr "``handler404`` -- 查看 :data:`django.conf.urls.handler404`."

msgid "``handler500`` -- See :data:`django.conf.urls.handler500`."
msgstr "``handler500`` -- 查看 :data:`django.conf.urls.handler500`."

msgid "Including other URLconfs"
msgstr "包含其它的URLconfs"

msgid ""
"At any point, your ``urlpatterns`` can \"include\" other URLconf modules. "
"This essentially \"roots\" a set of URLs below other ones."
msgstr ""
"在任何时候，你的 ``urlpatterns`` 都可以 \"include\" 其它URLconf 模块。这实际"
"上将一部分URL 放置于其它URL 下面。"

msgid ""
"For example, here's an excerpt of the URLconf for the `Django website`_ "
"itself. It includes a number of other URLconfs::"
msgstr ""
"例如，下面是URLconf  `Django website`_ 自己的URLconf 中一个片段。它包含许多其"
"它URLconf："

msgid ""
"Whenever Django encounters :func:`~django.urls.include()`, it chops off "
"whatever part of the URL matched up to that point and sends the remaining "
"string to the included URLconf for further processing."
msgstr ""

msgid ""
"Another possibility is to include additional URL patterns by using a list "
"of :func:`~django.urls.path` instances. For example, consider this URLconf::"
msgstr ""

msgid ""
"In this example, the ``/credit/reports/`` URL will be handled by the "
"``credit_views.report()`` Django view."
msgstr ""
"在这个例子中， ``/credit/reports/``  URL将被 ``credit.views.report()`` 这个"
"Django 视图处理。"

msgid ""
"This can be used to remove redundancy from URLconfs where a single pattern "
"prefix is used repeatedly. For example, consider this URLconf::"
msgstr ""
"这种方法可以用来去除URLconf 中的冗余，其中某个模式前缀被重复使用。例如，考虑"
"这个URLconf::"

msgid ""
"We can improve this by stating the common path prefix only once and grouping "
"the suffixes that differ::"
msgstr "我们可以改进它，通过只声明共同的路径前缀一次并将后面的部分分组::"

msgid "Captured parameters"
msgstr "捕获的参数"

msgid ""
"An included URLconf receives any captured parameters from parent URLconfs, "
"so the following example is valid::"
msgstr ""
"被包含的URLconf 会收到来自父URLconf 捕获的任何参数，所以下面的例子是合法的::"

msgid ""
"In the above example, the captured ``\"username\"`` variable is passed to "
"the included URLconf, as expected."
msgstr ""
"在上面的例子中，捕获的 ``\"username\"`` 变量将被如期传递给include()指向的"
"URLconf。"

msgid "Passing extra options to view functions"
msgstr ""

msgid ""
"URLconfs have a hook that lets you pass extra arguments to your view "
"functions, as a Python dictionary."
msgstr ""

msgid ""
"The :func:`~django.urls.path` function can take an optional third argument "
"which should be a dictionary of extra keyword arguments to pass to the view "
"function."
msgstr ""

msgid ""
"In this example, for a request to ``/blog/2005/``, Django will call ``views."
"year_archive(request, year=2005, foo='bar')``."
msgstr ""

msgid ""
"This technique is used in the :doc:`syndication framework </ref/contrib/"
"syndication>` to pass metadata and options to views."
msgstr ""

msgid "Dealing with conflicts"
msgstr ""

msgid ""
"It's possible to have a URL pattern which captures named keyword arguments, "
"and also passes arguments with the same names in its dictionary of extra "
"arguments. When this happens, the arguments in the dictionary will be used "
"instead of the arguments captured in the URL."
msgstr ""

msgid "Passing extra options to ``include()``"
msgstr ""

msgid ""
"Similarly, you can pass extra options to :func:`~django.urls.include` and "
"each line in the included URLconf will be passed the extra options."
msgstr ""

msgid "For example, these two URLconf sets are functionally identical:"
msgstr ""

msgid "Set one::"
msgstr ""

msgid "Set two::"
msgstr ""

msgid ""
"Note that extra options will *always* be passed to *every* line in the "
"included URLconf, regardless of whether the line's view actually accepts "
"those options as valid. For this reason, this technique is only useful if "
"you're certain that every view in the included URLconf accepts the extra "
"options you're passing."
msgstr ""

msgid "Reverse resolution of URLs"
msgstr ""

msgid ""
"A common need when working on a Django project is the possibility to obtain "
"URLs in their final forms either for embedding in generated content (views "
"and assets URLs, URLs shown to the user, etc.) or for handling of the "
"navigation flow on the server side (redirections, etc.)"
msgstr ""

msgid ""
"It is strongly desirable to avoid hard-coding these URLs (a laborious, non-"
"scalable and error-prone strategy). Equally dangerous is devising ad-hoc "
"mechanisms to generate URLs that are parallel to the design described by the "
"URLconf, which can result in the production of URLs that become stale over "
"time."
msgstr ""

msgid ""
"In other words, what's needed is a DRY mechanism. Among other advantages it "
"would allow evolution of the URL design without having to go over all the "
"project source code to search and replace outdated URLs."
msgstr ""

msgid ""
"The primary piece of information we have available to get a URL is an "
"identification (e.g. the name) of the view in charge of handling it. Other "
"pieces of information that necessarily must participate in the lookup of the "
"right URL are the types (positional, keyword) and values of the view "
"arguments."
msgstr ""

msgid ""
"Django provides a solution such that the URL mapper is the only repository "
"of the URL design. You feed it with your URLconf and then it can be used in "
"both directions:"
msgstr ""

msgid ""
"Starting with a URL requested by the user/browser, it calls the right Django "
"view providing any arguments it might need with their values as extracted "
"from the URL."
msgstr ""

msgid ""
"Starting with the identification of the corresponding Django view plus the "
"values of arguments that would be passed to it, obtain the associated URL."
msgstr ""

msgid ""
"The first one is the usage we've been discussing in the previous sections. "
"The second one is what is known as *reverse resolution of URLs*, *reverse "
"URL matching*, *reverse URL lookup*, or simply *URL reversing*."
msgstr ""

msgid ""
"Django provides tools for performing URL reversing that match the different "
"layers where URLs are needed:"
msgstr ""

msgid "In templates: Using the :ttag:`url` template tag."
msgstr ""

msgid "In Python code: Using the :func:`~django.urls.reverse` function."
msgstr ""

msgid ""
"In higher level code related to handling of URLs of Django model instances: "
"The :meth:`~django.db.models.Model.get_absolute_url` method."
msgstr ""

msgid "Consider again this URLconf entry::"
msgstr ""

msgid ""
"According to this design, the URL for the archive corresponding to year "
"*nnnn* is ``/articles/<nnnn>/``."
msgstr ""

msgid "You can obtain these in template code by using:"
msgstr ""

msgid "Or in Python code::"
msgstr ""

msgid ""
"If, for some reason, it was decided that the URLs where content for yearly "
"article archives are published at should be changed then you would only need "
"to change the entry in the URLconf."
msgstr ""

msgid ""
"In some scenarios where views are of a generic nature, a many-to-one "
"relationship might exist between URLs and views. For these cases the view "
"name isn't a good enough identifier for it when comes the time of reversing "
"URLs. Read the next section to know about the solution Django provides for "
"this."
msgstr ""

msgid "Naming URL patterns"
msgstr ""

msgid ""
"In order to perform URL reversing, you'll need to use **named URL patterns** "
"as done in the examples above. The string used for the URL name can contain "
"any characters you like. You are not restricted to valid Python names."
msgstr ""

msgid ""
"When naming URL patterns, choose names that are unlikely to clash with other "
"applications' choice of names. If you call your URL pattern ``comment`` and "
"another application does the same thing, the URL that :func:`~django.urls."
"reverse()` finds depends on whichever pattern is last in your project's "
"``urlpatterns`` list."
msgstr ""

msgid ""
"Putting a prefix on your URL names, perhaps derived from the application "
"name (such as ``myapp-comment`` instead of ``comment``), decreases the "
"chance of collision."
msgstr ""

msgid ""
"You can deliberately choose the *same URL name* as another application if "
"you want to override a view. For example, a common use case is to override "
"the :class:`~django.contrib.auth.views.LoginView`. Parts of Django and most "
"third-party apps assume that this view has a URL pattern with the name "
"``login``. If you have a custom login view and give its URL the name "
"``login``, :func:`~django.urls.reverse()` will find your custom view as long "
"as it's in ``urlpatterns`` after ``django.contrib.auth.urls`` is included "
"(if that's included at all)."
msgstr ""

msgid ""
"You may also use the same name for multiple URL patterns if they differ in "
"their arguments. In addition to the URL name, :func:`~django.urls.reverse()` "
"matches the number of arguments and the names of the keyword arguments."
msgstr ""

msgid "URL namespaces"
msgstr ""

msgid "Introduction"
msgstr "介绍"

msgid ""
"URL namespaces allow you to uniquely reverse :ref:`named URL patterns "
"<naming-url-patterns>` even if different applications use the same URL "
"names. It's a good practice for third-party apps to always use namespaced "
"URLs (as we did in the tutorial). Similarly, it also allows you to reverse "
"URLs if multiple instances of an application are deployed. In other words, "
"since multiple instances of a single application will share named URLs, "
"namespaces provide a way to tell these named URLs apart."
msgstr ""

msgid ""
"Django applications that make proper use of URL namespacing can be deployed "
"more than once for a particular site. For example :mod:`django.contrib."
"admin` has an :class:`~django.contrib.admin.AdminSite` class which allows "
"you to easily :ref:`deploy more than one instance of the admin <multiple-"
"admin-sites>`. In a later example, we'll discuss the idea of deploying the "
"polls application from the tutorial in two different locations so we can "
"serve the same functionality to two different audiences (authors and "
"publishers)."
msgstr ""

msgid "A URL namespace comes in two parts, both of which are strings:"
msgstr ""

msgid "application namespace"
msgstr ""

msgid ""
"This describes the name of the application that is being deployed. Every "
"instance of a single application will have the same application namespace. "
"For example, Django's admin application has the somewhat predictable "
"application namespace of ``'admin'``."
msgstr ""

msgid "instance namespace"
msgstr ""

msgid ""
"This identifies a specific instance of an application. Instance namespaces "
"should be unique across your entire project. However, an instance namespace "
"can be the same as the application namespace. This is used to specify a "
"default instance of an application. For example, the default Django admin "
"instance has an instance namespace of ``'admin'``."
msgstr ""

msgid ""
"Namespaced URLs are specified using the ``':'`` operator. For example, the "
"main index page of the admin application is referenced using ``'admin:"
"index'``. This indicates a namespace of ``'admin'``, and a named URL of "
"``'index'``."
msgstr ""

msgid ""
"Namespaces can also be nested. The named URL ``'sports:polls:index'`` would "
"look for a pattern named ``'index'`` in the namespace ``'polls'`` that is "
"itself defined within the top-level namespace ``'sports'``."
msgstr ""

msgid "Reversing namespaced URLs"
msgstr ""

msgid ""
"When given a namespaced URL (e.g. ``'polls:index'``) to resolve, Django "
"splits the fully qualified name into parts and then tries the following "
"lookup:"
msgstr ""

msgid ""
"First, Django looks for a matching :term:`application namespace` (in this "
"example, ``'polls'``). This will yield a list of instances of that "
"application."
msgstr ""

msgid ""
"If there is a current application defined, Django finds and returns the URL "
"resolver for that instance. The current application can be specified with "
"the ``current_app`` argument to the :func:`~django.urls.reverse()` function."
msgstr ""

msgid ""
"The :ttag:`url` template tag uses the namespace of the currently resolved "
"view as the current application in a :class:`~django.template."
"RequestContext`. You can override this default by setting the current "
"application on the :attr:`request.current_app <django.http.HttpRequest."
"current_app>` attribute."
msgstr ""

msgid ""
"If there is no current application, Django looks for a default application "
"instance. The default application instance is the instance that has an :term:"
"`instance namespace` matching the :term:`application namespace` (in this "
"example, an instance of ``polls`` called ``'polls'``)."
msgstr ""

msgid ""
"If there is no default application instance, Django will pick the last "
"deployed instance of the application, whatever its instance name may be."
msgstr ""

msgid ""
"If the provided namespace doesn't match an :term:`application namespace` in "
"step 1, Django will attempt a direct lookup of the namespace as an :term:"
"`instance namespace`."
msgstr ""

msgid ""
"If there are nested namespaces, these steps are repeated for each part of "
"the namespace until only the view name is unresolved. The view name will "
"then be resolved into a URL in the namespace that has been found."
msgstr ""

msgid ""
"To show this resolution strategy in action, consider an example of two "
"instances of the ``polls`` application from the tutorial: one called "
"``'author-polls'`` and one called ``'publisher-polls'``. Assume we have "
"enhanced that application so that it takes the instance namespace into "
"consideration when creating and displaying polls."
msgstr ""

msgid "polls/urls.py"
msgstr "polls/urls.py"

msgid "Using this setup, the following lookups are possible:"
msgstr ""

msgid ""
"If one of the instances is current - say, if we were rendering the detail "
"page in the instance ``'author-polls'`` - ``'polls:index'`` will resolve to "
"the index page of the ``'author-polls'`` instance; i.e. both of the "
"following will result in ``\"/author-polls/\"``."
msgstr ""

msgid "In the method of a class-based view::"
msgstr ""

msgid "and in the template:"
msgstr ""

msgid ""
"If there is no current instance - say, if we were rendering a page somewhere "
"else on the site - ``'polls:index'`` will resolve to the last registered "
"instance of ``polls``. Since there is no default instance (instance "
"namespace of ``'polls'``), the last instance of ``polls`` that is registered "
"will be used. This would be ``'publisher-polls'`` since it's declared last "
"in the ``urlpatterns``."
msgstr ""

msgid ""
"``'author-polls:index'`` will always resolve to the index page of the "
"instance ``'author-polls'`` (and likewise for ``'publisher-polls'``) ."
msgstr ""

msgid ""
"If there were also a default instance - i.e., an instance named ``'polls'`` "
"- the only change from above would be in the case where there is no current "
"instance (the second item in the list above). In this case ``'polls:index'`` "
"would resolve to the index page of the default instance instead of the "
"instance declared last in ``urlpatterns``."
msgstr ""

msgid "URL namespaces and included URLconfs"
msgstr ""

msgid ""
"Application namespaces of included URLconfs can be specified in two ways."
msgstr ""

msgid ""
"Firstly, you can set an ``app_name`` attribute in the included URLconf "
"module, at the same level as the ``urlpatterns`` attribute. You have to pass "
"the actual module, or a string reference to the module, to :func:`~django."
"urls.include`, not the list of ``urlpatterns`` itself."
msgstr ""

msgid ""
"The URLs defined in ``polls.urls`` will have an application namespace "
"``polls``."
msgstr ""

msgid ""
"Secondly, you can include an object that contains embedded namespace data. "
"If you ``include()`` a list of :func:`~django.urls.path` or :func:`~django."
"urls.re_path` instances, the URLs contained in that object will be added to "
"the global namespace. However, you can also ``include()`` a 2-tuple "
"containing::"
msgstr ""

msgid ""
"This will include the nominated URL patterns into the given application "
"namespace."
msgstr ""

msgid ""
"The instance namespace can be specified using the ``namespace`` argument to :"
"func:`~django.urls.include`. If the instance namespace is not specified, it "
"will default to the included URLconf's application namespace. This means it "
"will also be the default instance for that namespace."
msgstr ""

msgid "Writing views"
msgstr ""

msgid ""
"A view function, or *view* for short, is simply a Python function that takes "
"a Web request and returns a Web response. This response can be the HTML "
"contents of a Web page, or a redirect, or a 404 error, or an XML document, "
"or an image . . . or anything, really. The view itself contains whatever "
"arbitrary logic is necessary to return that response. This code can live "
"anywhere you want, as long as it's on your Python path. There's no other "
"requirement--no \"magic,\" so to speak. For the sake of putting the code "
"*somewhere*, the convention is to put views in a file called ``views.py``, "
"placed in your project or application directory."
msgstr ""

msgid "A simple view"
msgstr ""

msgid ""
"Here's a view that returns the current date and time, as an HTML document::"
msgstr ""

msgid "Let's step through this code one line at a time:"
msgstr ""

msgid ""
"First, we import the class :class:`~django.http.HttpResponse` from the :mod:"
"`django.http` module, along with Python's ``datetime`` library."
msgstr ""

msgid ""
"Next, we define a function called ``current_datetime``. This is the view "
"function. Each view function takes an :class:`~django.http.HttpRequest` "
"object as its first parameter, which is typically named ``request``."
msgstr ""

msgid ""
"Note that the name of the view function doesn't matter; it doesn't have to "
"be named in a certain way in order for Django to recognize it. We're calling "
"it ``current_datetime`` here, because that name clearly indicates what it "
"does."
msgstr ""

msgid ""
"The view returns an :class:`~django.http.HttpResponse` object that contains "
"the generated response. Each view function is responsible for returning an :"
"class:`~django.http.HttpResponse` object. (There are exceptions, but we'll "
"get to those later.)"
msgstr ""

msgid "Django's Time Zone"
msgstr ""

msgid ""
"Django includes a :setting:`TIME_ZONE` setting that defaults to ``America/"
"Chicago``. This probably isn't where you live, so you might want to change "
"it in your settings file."
msgstr ""

msgid "Mapping URLs to views"
msgstr ""

msgid ""
"So, to recap, this view function returns an HTML page that includes the "
"current date and time. To display this view at a particular URL, you'll need "
"to create a *URLconf*; see :doc:`/topics/http/urls` for instructions."
msgstr ""

msgid "Returning errors"
msgstr ""

msgid ""
"Returning HTTP error codes in Django is easy. There are subclasses of :class:"
"`~django.http.HttpResponse` for a number of common HTTP status codes other "
"than 200 (which means *\"OK\"*). You can find the full list of available "
"subclasses in the :ref:`request/response <ref-httpresponse-subclasses>` "
"documentation.  Just return an instance of one of those subclasses instead "
"of a normal :class:`~django.http.HttpResponse` in order to signify an error. "
"For example::"
msgstr ""

msgid ""
"There isn't a specialized subclass for every possible HTTP response code, "
"since many of them aren't going to be that common. However, as documented in "
"the :class:`~django.http.HttpResponse` documentation, you can also pass the "
"HTTP status code into the constructor for :class:`~django.http.HttpResponse` "
"to create a return class for any status code you like. For example::"
msgstr ""

msgid ""
"Because 404 errors are by far the most common HTTP error, there's an easier "
"way to handle those errors."
msgstr ""

msgid "The ``Http404`` exception"
msgstr ""

msgid ""
"When you return an error such as :class:`~django.http.HttpResponseNotFound`, "
"you're responsible for defining the HTML of the resulting error page::"
msgstr ""

msgid ""
"For convenience, and because it's a good idea to have a consistent 404 error "
"page across your site, Django provides an ``Http404`` exception. If you "
"raise ``Http404`` at any point in a view function, Django will catch it and "
"return the standard error page for your application, along with an HTTP "
"error code 404."
msgstr ""

msgid ""
"In order to show customized HTML when Django returns a 404, you can create "
"an HTML template named ``404.html`` and place it in the top level of your "
"template tree. This template will then be served when :setting:`DEBUG` is "
"set to ``False``."
msgstr ""

msgid ""
"When :setting:`DEBUG` is ``True``, you can provide a message to ``Http404`` "
"and it will appear in the standard 404 debug template. Use these messages "
"for debugging purposes; they generally aren't suitable for use in a "
"production 404 template."
msgstr ""

msgid "Customizing error views"
msgstr ""

msgid ""
"The default error views in Django should suffice for most Web applications, "
"but can easily be overridden if you need any custom behavior. Simply specify "
"the handlers as seen below in your URLconf (setting them anywhere else will "
"have no effect)."
msgstr ""

msgid ""
"The :func:`~django.views.defaults.page_not_found` view is overridden by :"
"data:`~django.conf.urls.handler404`::"
msgstr ""

msgid ""
"The :func:`~django.views.defaults.server_error` view is overridden by :data:"
"`~django.conf.urls.handler500`::"
msgstr ""

msgid ""
"The :func:`~django.views.defaults.permission_denied` view is overridden by :"
"data:`~django.conf.urls.handler403`::"
msgstr ""

msgid ""
"The :func:`~django.views.defaults.bad_request` view is overridden by :data:"
"`~django.conf.urls.handler400`::"
msgstr ""

msgid ""
"Use the :setting:`CSRF_FAILURE_VIEW` setting to override the CSRF error view."
msgstr ""

msgid "Testing custom error views"
msgstr ""

msgid ""
"To test the response of a custom error handler, raise the appropriate "
"exception in a test view. For example::"
msgstr ""

msgid "Format localization"
msgstr ""

msgid ""
"Django's formatting system is capable of displaying dates, times and numbers "
"in templates using the format specified for the current :term:`locale "
"<locale name>`. It also handles localized input in forms."
msgstr ""

msgid ""
"When it's enabled, two users accessing the same content may see dates, times "
"and numbers formatted in different ways, depending on the formats for their "
"current locale."
msgstr ""

msgid ""
"The formatting system is disabled by default. To enable it, it's necessary "
"to set :setting:`USE_L10N = True <USE_L10N>` in your settings file."
msgstr ""

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_L10N = True <USE_L10N>` "
"for convenience.  Note, however, that to enable number formatting with "
"thousand separators it is necessary to set :setting:`USE_THOUSAND_SEPARATOR "
"= True <USE_THOUSAND_SEPARATOR>` in your settings file. Alternatively, you "
"could use :tfilter:`intcomma` to format numbers in your template."
msgstr ""

msgid ""
"There is also an independent but related :setting:`USE_I18N` setting that "
"controls if Django should activate translation. See :doc:`/topics/i18n/"
"translation` for more details."
msgstr ""

msgid "Locale aware input in forms"
msgstr ""

msgid ""
"When formatting is enabled, Django can use localized formats when parsing "
"dates, times and numbers in forms. That means it tries different formats for "
"different locales when guessing the format used by the user when inputting "
"data on forms."
msgstr ""

msgid ""
"Django uses different formats for displaying data to those it uses for "
"parsing data. Most notably, the formats for parsing dates can't use the ``"
"%a`` (abbreviated weekday name), ``%A`` (full weekday name), ``%b`` "
"(abbreviated month name), ``%B`` (full month name), or ``%p`` (AM/PM)."
msgstr ""

msgid ""
"To enable a form field to localize input and output data simply use its "
"``localize`` argument::"
msgstr ""

msgid "Controlling localization in templates"
msgstr ""

msgid ""
"When you have enabled formatting with :setting:`USE_L10N`, Django will try "
"to use a locale specific format whenever it outputs a value in a template."
msgstr ""

msgid ""
"However, it may not always be appropriate to use localized values -- for "
"example, if you're outputting JavaScript or XML that is designed to be "
"machine-readable, you will always want unlocalized values. You may also want "
"to use localization in selected templates, rather than using localization "
"everywhere."
msgstr ""

msgid ""
"To allow for fine control over the use of localization, Django provides the "
"``l10n`` template library that contains the following tags and filters."
msgstr ""

msgid "Template tags"
msgstr "模板标签"

msgid "``localize``"
msgstr ""

msgid ""
"Enables or disables localization of template variables in the contained "
"block."
msgstr ""

msgid ""
"This tag allows a more fine grained control of localization than :setting:"
"`USE_L10N`."
msgstr ""

msgid "To activate or deactivate localization for a template block, use::"
msgstr ""

msgid ""
"The value of :setting:`USE_L10N` isn't respected inside of a ``{% localize %}"
"`` block."
msgstr ""

msgid ""
"See :tfilter:`localize` and :tfilter:`unlocalize` for template filters that "
"will do the same job on a per-variable basis."
msgstr ""

msgid "Template filters"
msgstr "模板过滤器"

msgid "Forces localization of a single value."
msgstr ""

msgid ""
"To disable localization on a single value, use :tfilter:`unlocalize`. To "
"control localization over a large section of a template, use the :ttag:"
"`localize` template tag."
msgstr ""

msgid "``unlocalize``"
msgstr ""

msgid "Forces a single value to be printed without localization."
msgstr ""

msgid ""
"To force localization of a single value, use :tfilter:`localize`. To control "
"localization over a large section of a template, use the :ttag:`localize` "
"template tag."
msgstr ""

msgid "Creating custom format files"
msgstr ""

msgid ""
"Django provides format definitions for many locales, but sometimes you might "
"want to create your own, because a format files doesn't exist for your "
"locale, or because you want to overwrite some of the values."
msgstr ""

msgid ""
"To use custom formats, specify the path where you'll place format files "
"first. To do that, just set your :setting:`FORMAT_MODULE_PATH` setting to "
"the package where format files will exist, for instance::"
msgstr ""

msgid ""
"Files are not placed directly in this directory, but in a directory named as "
"the locale, and must be named ``formats.py``. Be careful not to put "
"sensitive information in these files as values inside can be exposed if you "
"pass the string to ``django.utils.formats.get_format()`` (used by the :"
"tfilter:`date` template filter)."
msgstr ""

msgid ""
"To customize the English formats, a structure like this would be needed::"
msgstr ""

msgid ""
"where :file:`formats.py` contains custom format definitions. For example::"
msgstr ""

msgid ""
"to use a non-breaking space (Unicode ``00A0``) as a thousand separator, "
"instead of the default for English, a comma."
msgstr ""

msgid "Limitations of the provided locale formats"
msgstr ""

msgid ""
"Some locales use context-sensitive formats for numbers, which Django's "
"localization system cannot handle automatically."
msgstr ""

msgid "Switzerland (German)"
msgstr ""

msgid ""
"The Swiss number formatting depends on the type of number that is being "
"formatted. For monetary values, a comma is used as the thousand separator "
"and a decimal point for the decimal separator. For all other numbers, a "
"comma is used as decimal separator and a space as thousand separator. The "
"locale format provided by Django uses the generic separators, a comma for "
"decimal and a space for thousand separators."
msgstr ""

msgid "Internationalization and localization"
msgstr "国际化和本地化"

msgid ""
"The goal of internationalization and localization is to allow a single Web "
"application to offer its content in languages and formats tailored to the "
"audience."
msgstr ""

msgid ""
"Django has full support for :doc:`translation of text </topics/i18n/"
"translation>`, :doc:`formatting of dates, times and numbers </topics/i18n/"
"formatting>`, and :doc:`time zones </topics/i18n/timezones>`."
msgstr ""

msgid "Essentially, Django does two things:"
msgstr ""

msgid ""
"It allows developers and template authors to specify which parts of their "
"apps should be translated or formatted for local languages and cultures."
msgstr ""

msgid ""
"It uses these hooks to localize Web apps for particular users according to "
"their preferences."
msgstr ""

msgid ""
"Obviously, translation depends on the target language, and formatting "
"usually depends on the target country. This information is provided by "
"browsers in the ``Accept-Language`` header. However, the time zone isn't "
"readily available."
msgstr ""

msgid "Definitions"
msgstr ""

msgid ""
"The words \"internationalization\" and \"localization\" often cause "
"confusion; here's a simplified definition:"
msgstr ""

msgid "internationalization"
msgstr ""

msgid "Preparing the software for localization. Usually done by developers."
msgstr ""

msgid "localization"
msgstr ""

msgid ""
"Writing the translations and local formats. Usually done by translators."
msgstr ""

msgid ""
"More details can be found in the `W3C Web Internationalization FAQ`_, the "
"`Wikipedia article`_ or the `GNU gettext documentation`_."
msgstr ""

msgid ""
"Translation and formatting are controlled by :setting:`USE_I18N` and :"
"setting:`USE_L10N` settings respectively. However, both features involve "
"internationalization and localization. The names of the settings are an "
"unfortunate result of Django's history."
msgstr ""

msgid ""
"Here are some other terms that will help us to handle a common language:"
msgstr ""

msgid "locale name"
msgstr ""

msgid ""
"A locale name, either a language specification of the form ``ll`` or a "
"combined language and country specification of the form ``ll_CC``. Examples: "
"``it``, ``de_AT``, ``es``, ``pt_BR``. The language part is always in lower "
"case and the country part in upper case. The separator is an underscore."
msgstr ""

msgid "language code"
msgstr ""

msgid ""
"Represents the name of a language. Browsers send the names of the languages "
"they accept in the ``Accept-Language`` HTTP header using this format. "
"Examples: ``it``, ``de-at``, ``es``, ``pt-br``. Language codes are generally "
"represented in lower-case, but the HTTP ``Accept-Language`` header is case-"
"insensitive. The separator is a dash."
msgstr ""

msgid "message file"
msgstr ""

msgid ""
"A message file is a plain-text file, representing a single language, that "
"contains all available :term:`translation strings <translation string>` and "
"how they should be represented in the given language. Message files have a "
"``.po`` file extension."
msgstr ""

msgid "translation string"
msgstr ""

msgid "A literal that can be translated."
msgstr ""

msgid "format file"
msgstr ""

msgid ""
"A format file is a Python module that defines the data formats for a given "
"locale."
msgstr ""

msgid "Time zones"
msgstr ""

msgid ""
"When support for time zones is enabled, Django stores datetime information "
"in UTC in the database, uses time-zone-aware datetime objects internally, "
"and translates them to the end user's time zone in templates and forms."
msgstr ""

msgid ""
"This is handy if your users live in more than one time zone and you want to "
"display datetime information according to each user's wall clock."
msgstr ""

msgid ""
"Even if your website is available in only one time zone, it's still good "
"practice to store data in UTC in your database. The main reason is Daylight "
"Saving Time (DST). Many countries have a system of DST, where clocks are "
"moved forward in spring and backward in autumn. If you're working in local "
"time, you're likely to encounter errors twice a year, when the transitions "
"happen. (The pytz_ documentation discusses `these issues`_ in greater "
"detail.) This probably doesn't matter for your blog, but it's a problem if "
"you over-bill or under-bill your customers by one hour, twice a year, every "
"year. The solution to this problem is to use UTC in the code and use local "
"time only when interacting with end users."
msgstr ""

msgid ""
"Time zone support is disabled by default. To enable it, set :setting:`USE_TZ "
"= True <USE_TZ>` in your settings file. Time zone support uses pytz_, which "
"is installed when you install Django."
msgstr ""

msgid ""
"The default :file:`settings.py` file created by :djadmin:`django-admin "
"startproject <startproject>` includes :setting:`USE_TZ = True <USE_TZ>` for "
"convenience."
msgstr ""

msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls whether Django should activate format localization. See :doc:`/"
"topics/i18n/formatting` for more details."
msgstr ""

msgid ""
"If you're wrestling with a particular problem, start with the :ref:`time "
"zone FAQ <time-zones-faq>`."
msgstr ""

msgid "Concepts"
msgstr ""

msgid "Naive and aware datetime objects"
msgstr ""

msgid ""
"Python's :class:`datetime.datetime` objects have a ``tzinfo`` attribute that "
"can be used to store time zone information, represented as an instance of a "
"subclass of :class:`datetime.tzinfo`. When this attribute is set and "
"describes an offset, a datetime object is **aware**. Otherwise, it's "
"**naive**."
msgstr ""

msgid ""
"You can use :func:`~django.utils.timezone.is_aware` and :func:`~django.utils."
"timezone.is_naive` to determine whether datetimes are aware or naive."
msgstr ""

msgid ""
"When time zone support is disabled, Django uses naive datetime objects in "
"local time. This is simple and sufficient for many use cases. In this mode, "
"to obtain the current time, you would write::"
msgstr ""

msgid ""
"When time zone support is enabled (:setting:`USE_TZ=True <USE_TZ>`), Django "
"uses time-zone-aware datetime objects. If your code creates datetime "
"objects, they should be aware too. In this mode, the example above becomes::"
msgstr ""

msgid ""
"Dealing with aware datetime objects isn't always intuitive. For instance, "
"the ``tzinfo`` argument of the standard datetime constructor doesn't work "
"reliably for time zones with DST. Using UTC is generally safe; if you're "
"using other time zones, you should review the `pytz`_ documentation "
"carefully."
msgstr ""

msgid ""
"Python's :class:`datetime.time` objects also feature a ``tzinfo`` attribute, "
"and PostgreSQL has a matching ``time with time zone`` type. However, as "
"PostgreSQL's docs put it, this type \"exhibits properties which lead to "
"questionable usefulness\"."
msgstr ""

msgid ""
"Django only supports naive time objects and will raise an exception if you "
"attempt to save an aware time object, as a timezone for a time with no "
"associated date does not make sense."
msgstr ""

msgid "Interpretation of naive datetime objects"
msgstr ""

msgid ""
"When :setting:`USE_TZ` is ``True``, Django still accepts naive datetime "
"objects, in order to preserve backwards-compatibility. When the database "
"layer receives one, it attempts to make it aware by interpreting it in the :"
"ref:`default time zone <default-current-time-zone>` and raises a warning."
msgstr ""

msgid ""
"Unfortunately, during DST transitions, some datetimes don't exist or are "
"ambiguous. In such situations, pytz_ raises an exception. That's why you "
"should always create aware datetime objects when time zone support is "
"enabled."
msgstr ""

msgid ""
"In practice, this is rarely an issue. Django gives you aware datetime "
"objects in the models and forms, and most often, new datetime objects are "
"created from existing ones through :class:`~datetime.timedelta` arithmetic. "
"The only datetime that's often created in application code is the current "
"time, and :func:`timezone.now() <django.utils.timezone.now>` automatically "
"does the right thing."
msgstr ""

msgid "Default time zone and current time zone"
msgstr ""

msgid ""
"The **default time zone** is the time zone defined by the :setting:"
"`TIME_ZONE` setting."
msgstr ""

msgid "The **current time zone** is the time zone that's used for rendering."
msgstr ""

msgid ""
"You should set the current time zone to the end user's actual time zone "
"with :func:`~django.utils.timezone.activate`. Otherwise, the default time "
"zone is used."
msgstr ""

msgid ""
"As explained in the documentation of :setting:`TIME_ZONE`, Django sets "
"environment variables so that its process runs in the default time zone. "
"This happens regardless of the value of :setting:`USE_TZ` and of the current "
"time zone."
msgstr ""

msgid ""
"When :setting:`USE_TZ` is ``True``, this is useful to preserve backwards-"
"compatibility with applications that still rely on local time. However, :ref:"
"`as explained above <naive-datetime-objects>`, this isn't entirely reliable, "
"and you should always work with aware datetimes in UTC in your own code. For "
"instance, use :meth:`~datetime.datetime.fromtimestamp` and set the ``tz`` "
"parameter to :data:`~django.utils.timezone.utc`."
msgstr ""

msgid "Selecting the current time zone"
msgstr ""

msgid ""
"The current time zone is the equivalent of the current :term:`locale <locale "
"name>` for translations. However, there's no equivalent of the ``Accept-"
"Language`` HTTP header that Django could use to determine the user's time "
"zone automatically. Instead, Django provides :ref:`time zone selection "
"functions <time-zone-selection-functions>`. Use them to build the time zone "
"selection logic that makes sense for you."
msgstr ""

msgid ""
"Most websites that care about time zones just ask users in which time zone "
"they live and store this information in the user's profile. For anonymous "
"users, they use the time zone of their primary audience or UTC. pytz_ "
"provides helpers_, like a list of time zones per country, that you can use "
"to pre-select the most likely choices."
msgstr ""

msgid ""
"Here's an example that stores the current timezone in the session. (It skips "
"error handling entirely for the sake of simplicity.)"
msgstr ""

msgid "Add the following middleware to :setting:`MIDDLEWARE`::"
msgstr ""

msgid "Create a view that can set the current timezone::"
msgstr ""

msgid "Include a form in ``template.html`` that will ``POST`` to this view:"
msgstr ""

msgid "Time zone aware input in forms"
msgstr ""

msgid ""
"When you enable time zone support, Django interprets datetimes entered in "
"forms in the :ref:`current time zone <default-current-time-zone>` and "
"returns aware datetime objects in ``cleaned_data``."
msgstr ""

msgid ""
"If the current time zone raises an exception for datetimes that don't exist "
"or are ambiguous because they fall in a DST transition (the timezones "
"provided by pytz_ do this), such datetimes will be reported as invalid "
"values."
msgstr ""

msgid "Time zone aware output in templates"
msgstr ""

msgid ""
"When you enable time zone support, Django converts aware datetime objects to "
"the :ref:`current time zone <default-current-time-zone>` when they're "
"rendered in templates. This behaves very much like :doc:`format localization "
"</topics/i18n/formatting>`."
msgstr ""

msgid ""
"Django doesn't convert naive datetime objects, because they could be "
"ambiguous, and because your code should never produce naive datetimes when "
"time zone support is enabled. However, you can force conversion with the "
"template filters described below."
msgstr ""

msgid ""
"Conversion to local time isn't always appropriate -- you may be generating "
"output for computers rather than for humans. The following filters and tags, "
"provided by the ``tz`` template tag library, allow you to control the time "
"zone conversions."
msgstr ""

msgid "``localtime``"
msgstr ""

msgid ""
"Enables or disables conversion of aware datetime objects to the current time "
"zone in the contained block."
msgstr ""

msgid ""
"This tag has exactly the same effects as the :setting:`USE_TZ` setting as "
"far as the template engine is concerned. It allows a more fine grained "
"control of conversion."
msgstr ""

msgid "To activate or deactivate conversion for a template block, use::"
msgstr ""

msgid ""
"The value of :setting:`USE_TZ` isn't respected inside of a ``{% localtime %}"
"`` block."
msgstr ""

msgid "``timezone``"
msgstr ""

msgid ""
"Sets or unsets the current time zone in the contained block. When the "
"current time zone is unset, the default time zone applies."
msgstr ""

msgid "``get_current_timezone``"
msgstr ""

msgid ""
"You can get the name of the current time zone using the "
"``get_current_timezone`` tag::"
msgstr ""

msgid ""
"Alternatively, you can activate the :func:`~django.template."
"context_processors.tz` context processor and use the ``TIME_ZONE`` context "
"variable."
msgstr ""

msgid ""
"These filters accept both aware and naive datetimes. For conversion "
"purposes, they assume that naive datetimes are in the default time zone. "
"They always return aware datetimes."
msgstr ""

msgid "Forces conversion of a single value to the current time zone."
msgstr ""

msgid "``utc``"
msgstr ""

msgid "Forces conversion of a single value to UTC."
msgstr ""

msgid "Forces conversion of a single value to an arbitrary timezone."
msgstr ""

msgid ""
"The argument must be an instance of a :class:`~datetime.tzinfo` subclass or "
"a time zone name."
msgstr ""

msgid "Migration guide"
msgstr ""

msgid ""
"Here's how to migrate a project that was started before Django supported "
"time zones."
msgstr ""

msgid "Database"
msgstr "数据库"

msgid "PostgreSQL"
msgstr "PostgreSQL"

msgid ""
"The PostgreSQL backend stores datetimes as ``timestamp with time zone``. In "
"practice, this means it converts datetimes from the connection's time zone "
"to UTC on storage, and from UTC to the connection's time zone on retrieval."
msgstr ""

msgid ""
"As a consequence, if you're using PostgreSQL, you can switch between "
"``USE_TZ = False`` and ``USE_TZ = True`` freely. The database connection's "
"time zone will be set to :setting:`TIME_ZONE` or ``UTC`` respectively, so "
"that Django obtains correct datetimes in all cases. You don't need to "
"perform any data conversions."
msgstr ""

msgid "Other databases"
msgstr ""

msgid ""
"Other backends store datetimes without time zone information. If you switch "
"from ``USE_TZ = False`` to ``USE_TZ = True``, you must convert your data "
"from local time to UTC -- which isn't deterministic if your local time has "
"DST."
msgstr ""

msgid "Code"
msgstr "邮政编码"

msgid ""
"The first step is to add :setting:`USE_TZ = True <USE_TZ>` to your settings "
"file. At this point, things should mostly work. If you create naive datetime "
"objects in your code, Django makes them aware when necessary."
msgstr ""

msgid ""
"However, these conversions may fail around DST transitions, which means you "
"aren't getting the full benefits of time zone support yet. Also, you're "
"likely to run into a few problems because it's impossible to compare a naive "
"datetime with an aware datetime. Since Django now gives you aware datetimes, "
"you'll get exceptions wherever you compare a datetime that comes from a "
"model or a form with a naive datetime that you've created in your code."
msgstr ""

msgid ""
"So the second step is to refactor your code wherever you instantiate "
"datetime objects to make them aware. This can be done incrementally. :mod:"
"`django.utils.timezone` defines some handy helpers for compatibility code: :"
"func:`~django.utils.timezone.now`, :func:`~django.utils.timezone.is_aware`, :"
"func:`~django.utils.timezone.is_naive`, :func:`~django.utils.timezone."
"make_aware`, and :func:`~django.utils.timezone.make_naive`."
msgstr ""

msgid ""
"Finally, in order to help you locate code that needs upgrading, Django "
"raises a warning when you attempt to save a naive datetime to the database::"
msgstr ""

msgid ""
"During development, you can turn such warnings into exceptions and get a "
"traceback by adding the following to your settings file::"
msgstr ""

msgid "Fixtures"
msgstr ""

msgid ""
"When serializing an aware datetime, the UTC offset is included, like this::"
msgstr ""

msgid "For a naive datetime, it obviously isn't::"
msgstr ""

msgid ""
"For models with :class:`~django.db.models.DateTimeField`\\ s, this "
"difference makes it impossible to write a fixture that works both with and "
"without time zone support."
msgstr ""

msgid ""
"Fixtures generated with ``USE_TZ = False``, or before Django 1.4, use the "
"\"naive\" format. If your project contains such fixtures, after you enable "
"time zone support, you'll see :exc:`RuntimeWarning`\\ s when you load them. "
"To get rid of the warnings, you must convert your fixtures to the \"aware\" "
"format."
msgstr ""

msgid ""
"You can regenerate fixtures with :djadmin:`loaddata` then :djadmin:"
"`dumpdata`. Or, if they're small enough, you can simply edit them to add the "
"UTC offset that matches your :setting:`TIME_ZONE` to each serialized "
"datetime."
msgstr ""

msgid "FAQ"
msgstr ""

msgid "Setup"
msgstr ""

msgid ""
"**I don't need multiple time zones. Should I enable time zone support?**"
msgstr ""

msgid ""
"Yes. When time zone support is enabled, Django uses a more accurate model of "
"local time. This shields you from subtle and unreproducible bugs around "
"Daylight Saving Time (DST) transitions."
msgstr ""

msgid ""
"When you enable time zone support, you'll encounter some errors because "
"you're using naive datetimes where Django expects aware datetimes. Such "
"errors show up when running tests and they're easy to fix. You'll quickly "
"learn how to avoid invalid operations."
msgstr ""

msgid ""
"On the other hand, bugs caused by the lack of time zone support are much "
"harder to prevent, diagnose and fix. Anything that involves scheduled tasks "
"or datetime arithmetic is a candidate for subtle bugs that will bite you "
"only once or twice a year."
msgstr ""

msgid ""
"For these reasons, time zone support is enabled by default in new projects, "
"and you should keep it unless you have a very good reason not to."
msgstr ""

msgid "**I've enabled time zone support. Am I safe?**"
msgstr ""

msgid ""
"Maybe. You're better protected from DST-related bugs, but you can still "
"shoot yourself in the foot by carelessly turning naive datetimes into aware "
"datetimes, and vice-versa."
msgstr ""

msgid ""
"If your application connects to other systems -- for instance, if it queries "
"a Web service -- make sure datetimes are properly specified. To transmit "
"datetimes safely, their representation should include the UTC offset, or "
"their values should be in UTC (or both!)."
msgstr ""

msgid "Finally, our calendar system contains interesting traps for computers::"
msgstr ""

msgid ""
"(To implement this function, you must decide whether 2012-02-29 minus one "
"year is 2011-02-28 or 2011-03-01, which depends on your business "
"requirements.)"
msgstr ""

msgid ""
"**How do I interact with a database that stores datetimes in local time?**"
msgstr ""

msgid ""
"Set the :setting:`TIME_ZONE <DATABASE-TIME_ZONE>` option to the appropriate "
"time zone for this database in the :setting:`DATABASES` setting."
msgstr ""

msgid ""
"This is useful for connecting to a database that doesn't support time zones "
"and that isn't managed by Django when :setting:`USE_TZ` is ``True``."
msgstr ""

msgid "Troubleshooting"
msgstr "错误调试"

msgid ""
"**My application crashes with** ``TypeError: can't compare offset-naive`` "
"``and offset-aware datetimes`` **-- what's wrong?**"
msgstr ""

msgid "Let's reproduce this error by comparing a naive and an aware datetime::"
msgstr ""

msgid ""
"If you encounter this error, most likely your code is comparing these two "
"things:"
msgstr ""

msgid ""
"a datetime provided by Django -- for instance, a value read from a form or a "
"model field. Since you enabled time zone support, it's aware."
msgstr ""

msgid ""
"a datetime generated by your code, which is naive (or you wouldn't be "
"reading this)."
msgstr ""

msgid ""
"Generally, the correct solution is to change your code to use an aware "
"datetime instead."
msgstr ""

msgid ""
"If you're writing a pluggable application that's expected to work "
"independently of the value of :setting:`USE_TZ`, you may find :func:`django."
"utils.timezone.now` useful. This function returns the current date and time "
"as a naive datetime when ``USE_TZ = False`` and as an aware datetime when "
"``USE_TZ = True``. You can add or subtract :class:`datetime.timedelta` as "
"needed."
msgstr ""

msgid ""
"**I see lots of** ``RuntimeWarning: DateTimeField received a naive "
"datetime`` ``(YYYY-MM-DD HH:MM:SS)`` ``while time zone support is active`` "
"**-- is that bad?**"
msgstr ""

msgid ""
"When time zone support is enabled, the database layer expects to receive "
"only aware datetimes from your code. This warning occurs when it receives a "
"naive datetime. This indicates that you haven't finished porting your code "
"for time zone support. Please refer to the :ref:`migration guide <time-zones-"
"migration-guide>` for tips on this process."
msgstr ""

msgid ""
"In the meantime, for backwards compatibility, the datetime is considered to "
"be in the default time zone, which is generally what you expect."
msgstr ""

msgid "``now.date()`` **is yesterday! (or tomorrow)**"
msgstr ""

msgid ""
"If you've always used naive datetimes, you probably believe that you can "
"convert a datetime to a date by calling its :meth:`~datetime.datetime.date` "
"method. You also consider that a :class:`~datetime.date` is a lot like a :"
"class:`~datetime.datetime`, except that it's less accurate."
msgstr ""

msgid "None of this is true in a time zone aware environment::"
msgstr ""

msgid ""
"As this example shows, the same datetime has a different date, depending on "
"the time zone in which it is represented. But the real problem is more "
"fundamental."
msgstr ""

msgid ""
"A datetime represents a **point in time**. It's absolute: it doesn't depend "
"on anything. On the contrary, a date is a **calendaring concept**. It's a "
"period of time whose bounds depend on the time zone in which the date is "
"considered. As you can see, these two concepts are fundamentally different, "
"and converting a datetime to a date isn't a deterministic operation."
msgstr ""

msgid "What does this mean in practice?"
msgstr ""

msgid ""
"Generally, you should avoid converting a :class:`~datetime.datetime` to :"
"class:`~datetime.date`. For instance, you can use the :tfilter:`date` "
"template filter to only show the date part of a datetime. This filter will "
"convert the datetime into the current time zone before formatting it, "
"ensuring the results appear correctly."
msgstr ""

msgid ""
"If you really need to do the conversion yourself, you must ensure the "
"datetime is converted to the appropriate time zone first. Usually, this will "
"be the current timezone::"
msgstr ""

msgid ""
"**I get an error** \"``Are time zone definitions for your database installed?"
"``\""
msgstr ""

msgid ""
"If you are using MySQL, see the :ref:`mysql-time-zone-definitions` section "
"of the MySQL notes for instructions on loading time zone definitions."
msgstr ""

msgid ""
"**I have a string** ``\"2012-02-21 10:28:45\"`` **and I know it's in the** ``"
"\"Europe/Helsinki\"`` **time zone. How do I turn that into an aware datetime?"
"**"
msgstr ""

msgid "This is exactly what pytz_ is for."
msgstr ""

msgid ""
"Note that ``localize`` is a pytz extension to the :class:`~datetime.tzinfo` "
"API. Also, you may want to catch ``pytz.InvalidTimeError``. The "
"documentation of pytz contains `more examples`_. You should review it before "
"attempting to manipulate aware datetimes."
msgstr ""

msgid "**How can I obtain the local time in the current time zone?**"
msgstr ""

msgid "Well, the first question is, do you really need to?"
msgstr ""

msgid ""
"You should only use local time when you're interacting with humans, and the "
"template layer provides :ref:`filters and tags <time-zones-in-templates>` to "
"convert datetimes to the time zone of your choice."
msgstr ""

msgid ""
"Furthermore, Python knows how to compare aware datetimes, taking into "
"account UTC offsets when necessary. It's much easier (and possibly faster) "
"to write all your model and view code in UTC. So, in most circumstances, the "
"datetime in UTC returned by :func:`django.utils.timezone.now` will be "
"sufficient."
msgstr ""

msgid ""
"For the sake of completeness, though, if you really want the local time in "
"the current time zone, here's how you can obtain it::"
msgstr ""

msgid "In this example, the current time zone is ``\"Europe/Paris\"``."
msgstr ""

msgid "**How can I see all available time zones?**"
msgstr ""

msgid ""
"pytz_ provides helpers_, including a list of current time zones and a list "
"of all available time zones -- some of which are only of historical interest."
msgstr ""

msgid "Translation"
msgstr ""

msgid ""
"In order to make a Django project translatable, you have to add a minimal "
"number of hooks to your Python code and templates. These hooks are called :"
"term:`translation strings <translation string>`. They tell Django: \"This "
"text should be translated into the end user's language, if a translation for "
"this text is available in that language.\" It's your responsibility to mark "
"translatable strings; the system can only translate strings it knows about."
msgstr ""

msgid ""
"Django then provides utilities to extract the translation strings into a :"
"term:`message file`. This file is a convenient way for translators to "
"provide the equivalent of the translation strings in the target language. "
"Once the translators have filled in the message file, it must be compiled. "
"This process relies on the GNU gettext toolset."
msgstr ""

msgid ""
"Once this is done, Django takes care of translating Web apps on the fly in "
"each available language, according to users' language preferences."
msgstr ""

msgid ""
"Django's internationalization hooks are on by default, and that means "
"there's a bit of i18n-related overhead in certain places of the framework. "
"If you don't use internationalization, you should take the two seconds to "
"set :setting:`USE_I18N = False <USE_I18N>` in your settings file. Then "
"Django will make some optimizations so as not to load the "
"internationalization machinery."
msgstr ""

msgid ""
"There is also an independent but related :setting:`USE_L10N` setting that "
"controls if Django should implement format localization. See :doc:`/topics/"
"i18n/formatting` for more details."
msgstr ""

msgid ""
"Make sure you've activated translation for your project (the fastest way is "
"to check if :setting:`MIDDLEWARE` includes :mod:`django.middleware.locale."
"LocaleMiddleware`). If you haven't yet, see :ref:`how-django-discovers-"
"language-preference`."
msgstr ""

msgid "Internationalization: in Python code"
msgstr ""

msgid "Standard translation"
msgstr ""

msgid ""
"Specify a translation string by using the function :func:`~django.utils."
"translation.gettext`. It's convention to import this as a shorter alias, "
"``_``, to save typing."
msgstr ""

msgid ""
"The ``u`` prefixing of ``gettext`` functions was originally to distinguish "
"usage between unicode strings and bytestrings on Python 2. For code that "
"supports only Python 3, they can be used interchangeably. A deprecation for "
"the prefixed functions may happen in a future Django release."
msgstr ""

msgid ""
"Python's standard library ``gettext`` module installs ``_()`` into the "
"global namespace, as an alias for ``gettext()``. In Django, we have chosen "
"not to follow this practice, for a couple of reasons:"
msgstr ""

msgid ""
"Sometimes, you should use :func:`~django.utils.translation.gettext_lazy` as "
"the default translation method for a particular file. Without ``_()`` in the "
"global namespace, the developer has to think about which is the most "
"appropriate translation function."
msgstr ""

msgid ""
"The underscore character (``_``) is used to represent \"the previous result"
"\" in Python's interactive shell and doctest tests. Installing a global "
"``_()`` function causes interference. Explicitly importing ``gettext()`` as "
"``_()`` avoids this problem."
msgstr ""

msgid "What functions may be aliased as ``_``?"
msgstr ""

msgid ""
"Because of how ``xgettext`` (used by :djadmin:`makemessages`) works, only "
"functions that take a single string argument can be imported as ``_``:"
msgstr ""

msgid ":func:`~django.utils.translation.gettext`"
msgstr ""

msgid ":func:`~django.utils.translation.gettext_lazy`"
msgstr ""

msgid ""
"In this example, the text ``\"Welcome to my site.\"`` is marked as a "
"translation string::"
msgstr ""

msgid ""
"Obviously, you could code this without using the alias. This example is "
"identical to the previous one::"
msgstr ""

msgid ""
"Translation works on computed values. This example is identical to the "
"previous two::"
msgstr ""

msgid "Translation works on variables. Again, here's an identical example::"
msgstr ""

msgid ""
"(The caveat with using variables or computed values, as in the previous two "
"examples, is that Django's translation-string-detecting utility, :djadmin:"
"`django-admin makemessages <makemessages>`, won't be able to find these "
"strings. More on :djadmin:`makemessages` later.)"
msgstr ""

msgid ""
"The strings you pass to ``_()`` or ``gettext()`` can take placeholders, "
"specified with Python's standard named-string interpolation syntax. Example::"
msgstr ""

msgid ""
"This technique lets language-specific translations reorder the placeholder "
"text. For example, an English translation may be ``\"Today is November 26."
"\"``, while a Spanish translation may be ``\"Hoy es 26 de Noviembre.\"`` -- "
"with the month and the day placeholders swapped."
msgstr ""

msgid ""
"For this reason, you should use named-string interpolation (e.g., ``"
"%(day)s``) instead of positional interpolation (e.g., ``%s`` or ``%d``) "
"whenever you have more than a single parameter. If you used positional "
"interpolation, translations wouldn't be able to reorder placeholder text."
msgstr ""

msgid ""
"Since string extraction is done by the ``xgettext`` command, only syntaxes "
"supported by ``gettext`` are supported by Django. Python :py:ref:`f-strings "
"<f-strings>` and `JavaScript template strings`_ are not yet supported by "
"``xgettext``."
msgstr ""

msgid "Comments for translators"
msgstr ""

msgid ""
"If you would like to give translators hints about a translatable string, you "
"can add a comment prefixed with the ``Translators`` keyword on the line "
"preceding the string, e.g.::"
msgstr ""

msgid ""
"The comment will then appear in the resulting ``.po`` file associated with "
"the translatable construct located below it and should also be displayed by "
"most translation tools."
msgstr ""

msgid ""
"Just for completeness, this is the corresponding fragment of the resulting "
"``.po`` file:"
msgstr ""

msgid ""
"This also works in templates. See :ref:`translator-comments-in-templates` "
"for more details."
msgstr ""

msgid "Marking strings as no-op"
msgstr ""

msgid ""
"Use the function :func:`django.utils.translation.gettext_noop()` to mark a "
"string as a translation string without translating it. The string is later "
"translated from a variable."
msgstr ""

msgid ""
"Use this if you have constant strings that should be stored in the source "
"language because they are exchanged over systems or users -- such as strings "
"in a database -- but should be translated at the last possible point in "
"time, such as when the string is presented to the user."
msgstr ""

msgid "Pluralization"
msgstr ""

msgid ""
"Use the function :func:`django.utils.translation.ngettext()` to specify "
"pluralized messages."
msgstr ""

msgid ""
"``ngettext()`` takes three arguments: the singular translation string, the "
"plural translation string and the number of objects."
msgstr ""

msgid ""
"This function is useful when you need your Django application to be "
"localizable to languages where the number and complexity of `plural forms "
"<https://www.gnu.org/software/gettext/manual/gettext.html#Plural-forms>`_ is "
"greater than the two forms used in English ('object' for the singular and "
"'objects' for all the cases where ``count`` is different from one, "
"irrespective of its value.)"
msgstr ""

msgid ""
"In this example the number of objects is passed to the translation languages "
"as the ``count`` variable."
msgstr ""

msgid ""
"Note that pluralization is complicated and works differently in each "
"language. Comparing ``count`` to 1 isn't always the correct rule. This code "
"looks sophisticated, but will produce incorrect results for some languages::"
msgstr ""

msgid ""
"Don't try to implement your own singular-or-plural logic; it won't be "
"correct. In a case like this, consider something like the following::"
msgstr ""

msgid ""
"When using ``ngettext()``, make sure you use a single name for every "
"extrapolated variable included in the literal. In the examples above, note "
"how we used the ``name`` Python variable in both translation strings. This "
"example, besides being incorrect in some languages as noted above, would "
"fail::"
msgstr ""

msgid ""
"You would get an error when running :djadmin:`django-admin compilemessages "
"<compilemessages>`::"
msgstr ""

msgid "Plural form and po files"
msgstr ""

msgid ""
"Django does not support custom plural equations in po files. As all "
"translation catalogs are merged, only the plural form for the main Django po "
"file (in ``django/conf/locale/<lang_code>/LC_MESSAGES/django.po``) is "
"considered. Plural forms in all other po files are ignored. Therefore, you "
"should not use different plural equations in your project or application po "
"files."
msgstr ""

msgid "Contextual markers"
msgstr ""

msgid ""
"Sometimes words have several meanings, such as ``\"May\"`` in English, which "
"refers to a month name and to a verb. To enable translators to translate "
"these words correctly in different contexts, you can use the :func:`django."
"utils.translation.pgettext()` function, or the :func:`django.utils."
"translation.npgettext()` function if the string needs pluralization. Both "
"take a context string as the first variable."
msgstr ""

msgid ""
"In the resulting ``.po`` file, the string will then appear as often as there "
"are different contextual markers for the same string (the context will "
"appear on the ``msgctxt`` line), allowing the translator to give a different "
"translation for each of them."
msgstr ""

msgid "or::"
msgstr ""

msgid "will appear in the ``.po`` file as:"
msgstr ""

msgid ""
"Contextual markers are also supported by the :ttag:`trans` and :ttag:"
"`blocktrans` template tags."
msgstr ""

msgid "Lazy translation"
msgstr ""

msgid ""
"Use the lazy versions of translation functions in :mod:`django.utils."
"translation` (easily recognizable by the ``lazy`` suffix in their names) to "
"translate strings lazily -- when the value is accessed rather than when "
"they're called."
msgstr ""

msgid ""
"These functions store a lazy reference to the string -- not the actual "
"translation. The translation itself will be done when the string is used in "
"a string context, such as in template rendering."
msgstr ""

msgid ""
"This is essential when calls to these functions are located in code paths "
"that are executed at module load time."
msgstr ""

msgid ""
"This is something that can easily happen when defining models, forms and "
"model forms, because Django implements these such that their fields are "
"actually class-level attributes. For that reason, make sure to use lazy "
"translations in the following cases:"
msgstr ""

msgid ""
"Model fields and relationships ``verbose_name`` and ``help_text`` option "
"values"
msgstr ""

msgid ""
"For example, to translate the help text of the *name* field in the following "
"model, do the following::"
msgstr ""

msgid ""
"You can mark names of :class:`~django.db.models.ForeignKey`, :class:`~django."
"db.models.ManyToManyField` or :class:`~django.db.models.OneToOneField` "
"relationship as translatable by using their :attr:`~django.db.models.Options."
"verbose_name` options::"
msgstr ""

msgid ""
"Just like you would do in :attr:`~django.db.models.Options.verbose_name` you "
"should provide a lowercase verbose name text for the relation as Django will "
"automatically titlecase it when required."
msgstr ""

msgid "Model verbose names values"
msgstr ""

msgid ""
"It is recommended to always provide explicit :attr:`~django.db.models."
"Options.verbose_name` and :attr:`~django.db.models.Options."
"verbose_name_plural` options rather than relying on the fallback English-"
"centric and somewhat naïve determination of verbose names Django performs by "
"looking at the model's class name::"
msgstr ""

msgid "Model methods ``short_description`` attribute values"
msgstr ""

msgid ""
"For model methods, you can provide translations to Django and the admin site "
"with the ``short_description`` attribute::"
msgstr ""

msgid "Working with lazy translation objects"
msgstr ""

msgid ""
"The result of a ``gettext_lazy()`` call can be used wherever you would use a "
"string (a :class:`str` object) in other Django code, but it may not work "
"with arbitrary Python code. For example, the following won't work because "
"the `requests <https://pypi.org/project/requests/>`_ library doesn't handle "
"``gettext_lazy`` objects::"
msgstr ""

msgid ""
"You can avoid such problems by casting ``gettext_lazy()`` objects to text "
"strings before passing them to non-Django code::"
msgstr ""

msgid ""
"If you don't like the long ``gettext_lazy`` name, you can just alias it as "
"``_`` (underscore), like so::"
msgstr ""

msgid ""
"Using ``gettext_lazy()`` and ``ngettext_lazy()`` to mark strings in models "
"and utility functions is a common operation. When you're working with these "
"objects elsewhere in your code, you should ensure that you don't "
"accidentally convert them to strings, because they should be converted as "
"late as possible (so that the correct locale is in effect). This "
"necessitates the use of the helper function described next."
msgstr ""

msgid "Lazy translations and plural"
msgstr ""

msgid ""
"When using lazy translation for a plural string (``[u]n[p]gettext_lazy``), "
"you generally don't know the ``number`` argument at the time of the string "
"definition. Therefore, you are authorized to pass a key name instead of an "
"integer as the ``number`` argument. Then ``number`` will be looked up in the "
"dictionary under that key during string interpolation. Here's example::"
msgstr ""

msgid ""
"If the string contains exactly one unnamed placeholder, you can interpolate "
"directly with the ``number`` argument::"
msgstr ""

msgid "Formatting strings: ``format_lazy()``"
msgstr ""

msgid ""
"Python's :meth:`str.format()` method will not work when either the "
"``format_string`` or any of the arguments to :meth:`str.format()` contains "
"lazy translation objects. Instead, you can use :func:`django.utils.text."
"format_lazy()`, which creates a lazy object that runs the ``str.format()`` "
"method only when the result is included in a string. For example::"
msgstr ""

msgid ""
"In this case, the lazy translations in ``result`` will only be converted to "
"strings when ``result`` itself is used in a string (usually at template "
"rendering time)."
msgstr ""

msgid "Other uses of lazy in delayed translations"
msgstr ""

msgid ""
"For any other case where you would like to delay the translation, but have "
"to pass the translatable string as argument to another function, you can "
"wrap this function inside a lazy call yourself. For example::"
msgstr ""

msgid "And then later::"
msgstr ""

msgid "Localized names of languages"
msgstr ""

msgid ""
"The ``get_language_info()`` function provides detailed information about "
"languages::"
msgstr ""

msgid ""
"The ``name``, ``name_local``, and ``name_translated`` attributes of the "
"dictionary contain the name of the language in English, in the language "
"itself, and in your current active language respectively.  The ``bidi`` "
"attribute is True only for bi-directional languages."
msgstr ""

msgid ""
"The source of the language information is the ``django.conf.locale`` module. "
"Similar access to this information is available for template code. See below."
msgstr ""

msgid "Internationalization: in template code"
msgstr ""

msgid ""
"Translations in :doc:`Django templates </ref/templates/language>` uses two "
"template tags and a slightly different syntax than in Python code. To give "
"your template access to these tags, put ``{% load i18n %}`` toward the top "
"of your template. As with all template tags, this tag needs to be loaded in "
"all templates which use translations, even those templates that extend from "
"other templates which have already loaded the ``i18n`` tag."
msgstr ""

msgid "``trans`` template tag"
msgstr ""

msgid ""
"The ``{% trans %}`` template tag translates either a constant string "
"(enclosed in single or double quotes) or variable content::"
msgstr ""

msgid ""
"If the ``noop`` option is present, variable lookup still takes place but the "
"translation is skipped. This is useful when \"stubbing out\" content that "
"will require translation in the future::"
msgstr ""

msgid ""
"Internally, inline translations use an :func:`~django.utils.translation."
"gettext` call."
msgstr ""

msgid ""
"In case a template var (``myvar`` above) is passed to the tag, the tag will "
"first resolve such variable to a string at run-time and then look up that "
"string in the message catalogs."
msgstr ""

msgid ""
"It's not possible to mix a template variable inside a string within ``{% "
"trans %}``. If your translations require strings with variables "
"(placeholders), use :ttag:`{% blocktrans %}<blocktrans>` instead."
msgstr ""

msgid ""
"If you'd like to retrieve a translated string without displaying it, you can "
"use the following syntax::"
msgstr ""

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters::"
msgstr ""

msgid ""
"``{% trans %}`` also supports :ref:`contextual markers<contextual-markers>` "
"using the ``context`` keyword:"
msgstr ""

msgid "``blocktrans`` template tag"
msgstr ""

msgid ""
"Contrarily to the :ttag:`trans` tag, the ``blocktrans`` tag allows you to "
"mark complex sentences consisting of literals and variable content for "
"translation by making use of placeholders::"
msgstr ""

msgid ""
"To translate a template expression -- say, accessing object attributes or "
"using template filters -- you need to bind the expression to a local "
"variable for use within the translation block. Examples::"
msgstr ""

msgid "You can use multiple expressions inside a single ``blocktrans`` tag::"
msgstr ""

msgid ""
"The previous more verbose format is still supported: ``{% blocktrans with "
"book|title as book_t and author|title as author_t %}``"
msgstr ""

msgid ""
"Other block tags (for example ``{% for %}`` or ``{% if %}``) are not allowed "
"inside a ``blocktrans`` tag."
msgstr ""

msgid ""
"If resolving one of the block arguments fails, ``blocktrans`` will fall back "
"to the default language by deactivating the currently active language "
"temporarily with the :func:`~django.utils.translation.deactivate_all` "
"function."
msgstr ""

msgid "This tag also provides for pluralization. To use it:"
msgstr ""

msgid ""
"Designate and bind a counter value with the name ``count``. This value will "
"be the one used to select the right plural form."
msgstr ""

msgid ""
"Specify both the singular and plural forms separating them with the ``{% "
"plural %}`` tag within the ``{% blocktrans %}`` and ``{% endblocktrans %}`` "
"tags."
msgstr ""

msgid "A more complex example::"
msgstr ""

msgid ""
"When you use both the pluralization feature and bind values to local "
"variables in addition to the counter value, keep in mind that the "
"``blocktrans`` construct is internally converted to an ``ngettext`` call. "
"This means the same :ref:`notes regarding ngettext variables <pluralization-"
"var-notes>` apply."
msgstr ""

msgid ""
"Reverse URL lookups cannot be carried out within the ``blocktrans`` and "
"should be retrieved (and stored) beforehand::"
msgstr ""

msgid ""
"In practice you'll use this to get a string you can use in multiple places "
"in a template or so you can use the output as an argument for other template "
"tags or filters."
msgstr ""

msgid ""
"``{% blocktrans %}`` also supports :ref:`contextual markers<contextual-"
"markers>` using the ``context`` keyword:"
msgstr ""

msgid ""
"Another feature ``{% blocktrans %}`` supports is the ``trimmed`` option. "
"This option will remove newline characters from the beginning and the end of "
"the content of the ``{% blocktrans %}`` tag, replace any whitespace at the "
"beginning and end of a line and merge all lines into one using a space "
"character to separate them. This is quite useful for indenting the content "
"of a ``{% blocktrans %}`` tag without having the indentation characters end "
"up in the corresponding entry in the PO file, which makes the translation "
"process easier."
msgstr ""

msgid "For instance, the following ``{% blocktrans %}`` tag::"
msgstr ""

msgid ""
"will result in the entry ``\"First sentence. Second paragraph.\"`` in the PO "
"file, compared to ``\"\\n  First sentence.\\n  Second sentence.\\n\"``, if "
"the ``trimmed`` option had not been specified."
msgstr ""

msgid "String literals passed to tags and filters"
msgstr ""

msgid ""
"You can translate string literals passed as arguments to tags and filters by "
"using the familiar ``_()`` syntax::"
msgstr ""

msgid ""
"In this case, both the tag and the filter will see the translated string, so "
"they don't need to be aware of translations."
msgstr ""

msgid ""
"In this example, the translation infrastructure will be passed the string ``"
"\"yes,no\"``, not the individual strings ``\"yes\"`` and ``\"no\"``. The "
"translated string will need to contain the comma so that the filter parsing "
"code knows how to split up the arguments. For example, a German translator "
"might translate the string ``\"yes,no\"`` as ``\"ja,nein\"`` (keeping the "
"comma intact)."
msgstr ""

msgid "Comments for translators in templates"
msgstr ""

msgid ""
"Just like with :ref:`Python code <translator-comments>`, these notes for "
"translators can be specified using comments, either with the :ttag:`comment` "
"tag:"
msgstr ""

msgid ""
"or with the ``{#`` ... ``#}`` :ref:`one-line comment constructs <template-"
"comments>`:"
msgstr ""

msgid ""
"Just for completeness, these are the corresponding fragments of the "
"resulting ``.po`` file:"
msgstr ""

msgid "Switching language in templates"
msgstr ""

msgid ""
"If you want to select a language within a template, you can use the "
"``language`` template tag:"
msgstr ""

msgid ""
"While the first occurrence of \"Welcome to our page\" uses the current "
"language, the second will always be in English."
msgstr ""

msgid "Other tags"
msgstr ""

msgid "These tags also require a ``{% load i18n %}``."
msgstr ""

msgid "``get_available_languages``"
msgstr ""

msgid ""
"``{% get_available_languages as LANGUAGES %}`` returns a list of tuples in "
"which the first element is the :term:`language code` and the second is the "
"language name (translated into the currently active locale)."
msgstr ""

msgid "``get_current_language``"
msgstr ""

msgid ""
"``{% get_current_language as LANGUAGE_CODE %}`` returns the current user's "
"preferred language as a string. Example: ``en-us``. See :ref:`how-django-"
"discovers-language-preference`."
msgstr ""

msgid "``get_current_language_bidi``"
msgstr ""

msgid ""
"``{% get_current_language_bidi as LANGUAGE_BIDI %}`` returns the current "
"locale's direction. If ``True``, it's a right-to-left language, e.g. Hebrew, "
"Arabic. If ``False`` it's a left-to-right language, e.g. English, French, "
"German, etc."
msgstr ""

msgid "``i18n`` context processor"
msgstr ""

msgid ""
"If you enable the :class:`django.template.context_processors.i18n` context "
"processor, then each ``RequestContext`` will have access to ``LANGUAGES``, "
"``LANGUAGE_CODE``, and ``LANGUAGE_BIDI`` as defined above."
msgstr ""

msgid "``get_language_info``"
msgstr ""

msgid ""
"You can also retrieve information about any of the available languages using "
"provided template tags and filters. To get information about a single "
"language, use the ``{% get_language_info %}`` tag::"
msgstr ""

msgid "You can then access the information::"
msgstr ""

msgid "``get_language_info_list``"
msgstr ""

msgid ""
"You can also use the ``{% get_language_info_list %}`` template tag to "
"retrieve information for a list of languages (e.g. active languages as "
"specified in :setting:`LANGUAGES`). See :ref:`the section about the "
"set_language redirect view <set_language-redirect-view>` for an example of "
"how to display a language selector using ``{% get_language_info_list %}``."
msgstr ""

msgid ""
"In addition to :setting:`LANGUAGES` style list of tuples, ``{% "
"get_language_info_list %}`` supports simple lists of language codes. If you "
"do this in your view:"
msgstr ""

msgid "you can iterate over those languages in the template::"
msgstr ""

msgid "There are also simple filters available for convenience:"
msgstr ""

msgid "``{{ LANGUAGE_CODE|language_name }}`` (\"German\")"
msgstr ""

msgid "``{{ LANGUAGE_CODE|language_name_local }}`` (\"Deutsch\")"
msgstr ""

msgid "``{{ LANGUAGE_CODE|language_bidi }}`` (False)"
msgstr ""

msgid ""
"``{{ LANGUAGE_CODE|language_name_translated }}`` (\"německy\", when active "
"language is Czech)"
msgstr ""

msgid "Internationalization: in JavaScript code"
msgstr ""

msgid "Adding translations to JavaScript poses some problems:"
msgstr ""

msgid "JavaScript code doesn't have access to a ``gettext`` implementation."
msgstr ""

msgid ""
"JavaScript code doesn't have access to ``.po`` or ``.mo`` files; they need "
"to be delivered by the server."
msgstr ""

msgid ""
"The translation catalogs for JavaScript should be kept as small as possible."
msgstr ""

msgid ""
"Django provides an integrated solution for these problems: It passes the "
"translations into JavaScript, so you can call ``gettext``, etc., from within "
"JavaScript."
msgstr ""

msgid ""
"The main solution to these problems is the following ``JavaScriptCatalog`` "
"view, which generates a JavaScript code library with functions that mimic "
"the ``gettext`` interface, plus an array of translation strings."
msgstr ""

msgid "The ``JavaScriptCatalog`` view"
msgstr ""

msgid ""
"A view that produces a JavaScript code library with functions that mimic the "
"``gettext`` interface, plus an array of translation strings."
msgstr ""

msgid "**Attributes**"
msgstr ""

msgid ""
"Translation domain containing strings to add in the view output. Defaults to "
"``'djangojs'``."
msgstr ""

msgid ""
"A list of :attr:`application names <django.apps.AppConfig.name>` among "
"installed applications. Those apps should contain a ``locale`` directory. "
"All those catalogs plus all catalogs found in :setting:`LOCALE_PATHS` (which "
"are always included) are merged into one catalog. Defaults to ``None``, "
"which means that all available translations from all :setting:"
"`INSTALLED_APPS` are provided in the JavaScript output."
msgstr ""

msgid "**Example with default values**::"
msgstr ""

msgid "**Example with custom packages**::"
msgstr ""

msgid ""
"If your root URLconf uses :func:`~django.conf.urls.i18n.i18n_patterns`, "
"``JavaScriptCatalog`` must also be wrapped by ``i18n_patterns()`` for the "
"catalog to be correctly generated."
msgstr ""

msgid "**Example with** ``i18n_patterns()``::"
msgstr ""

msgid ""
"The precedence of translations is such that the packages appearing later in "
"the ``packages`` argument have higher precedence than the ones appearing at "
"the beginning. This is important in the case of clashing translations for "
"the same literal."
msgstr ""

msgid ""
"If you use more than one ``JavaScriptCatalog`` view on a site and some of "
"them define the same strings, the strings in the catalog that was loaded "
"last take precedence."
msgstr ""

msgid "Using the JavaScript translation catalog"
msgstr ""

msgid ""
"To use the catalog, just pull in the dynamically generated script like this:"
msgstr ""

msgid ""
"This uses reverse URL lookup to find the URL of the JavaScript catalog view. "
"When the catalog is loaded, your JavaScript code can use the following "
"methods:"
msgstr ""

msgid "``gettext``"
msgstr ""

msgid "``ngettext``"
msgstr ""

msgid "``interpolate``"
msgstr ""

msgid "``get_format``"
msgstr ""

msgid "``gettext_noop``"
msgstr ""

msgid "``pgettext``"
msgstr ""

msgid "``npgettext``"
msgstr ""

msgid "``pluralidx``"
msgstr ""

msgid ""
"The ``gettext`` function behaves similarly to the standard ``gettext`` "
"interface within your Python code::"
msgstr ""

msgid ""
"The ``ngettext`` function provides an interface to pluralize words and "
"phrases::"
msgstr ""

msgid ""
"The ``interpolate`` function supports dynamically populating a format "
"string. The interpolation syntax is borrowed from Python, so the "
"``interpolate`` function supports both positional and named interpolation:"
msgstr ""

msgid ""
"Positional interpolation: ``obj`` contains a JavaScript Array object whose "
"elements values are then sequentially interpolated in their corresponding "
"``fmt`` placeholders in the same order they appear. For example::"
msgstr ""

msgid ""
"Named interpolation: This mode is selected by passing the optional boolean "
"``named`` parameter as ``true``. ``obj`` contains a JavaScript object or "
"associative array. For example::"
msgstr ""

msgid ""
"You shouldn't go over the top with string interpolation, though: this is "
"still JavaScript, so the code has to make repeated regular-expression "
"substitutions. This isn't as fast as string interpolation in Python, so keep "
"it to those cases where you really need it (for example, in conjunction with "
"``ngettext`` to produce proper pluralizations)."
msgstr ""

msgid ""
"The ``get_format`` function has access to the configured i18n formatting "
"settings and can retrieve the format string for a given setting name::"
msgstr ""

msgid "It has access to the following settings:"
msgstr ""

msgid ":setting:`DATE_FORMAT`"
msgstr ""

msgid ":setting:`DATE_INPUT_FORMATS`"
msgstr ""

msgid ":setting:`DATETIME_FORMAT`"
msgstr ""

msgid ":setting:`DATETIME_INPUT_FORMATS`"
msgstr ""

msgid ":setting:`DECIMAL_SEPARATOR`"
msgstr ""

msgid ":setting:`FIRST_DAY_OF_WEEK`"
msgstr ""

msgid ":setting:`MONTH_DAY_FORMAT`"
msgstr ""

msgid ":setting:`NUMBER_GROUPING`"
msgstr ""

msgid ":setting:`SHORT_DATE_FORMAT`"
msgstr ""

msgid ":setting:`SHORT_DATETIME_FORMAT`"
msgstr ""

msgid ":setting:`THOUSAND_SEPARATOR`"
msgstr ""

msgid ":setting:`TIME_FORMAT`"
msgstr ""

msgid ":setting:`TIME_INPUT_FORMATS`"
msgstr ""

msgid ":setting:`YEAR_MONTH_FORMAT`"
msgstr ""

msgid ""
"This is useful for maintaining formatting consistency with the Python-"
"rendered values."
msgstr ""

msgid ""
"This emulates the ``gettext`` function but does nothing, returning whatever "
"is passed to it::"
msgstr ""

msgid ""
"This is useful for stubbing out portions of the code that will need "
"translation in the future."
msgstr ""

msgid ""
"The ``pgettext`` function behaves like the Python variant (:func:`~django."
"utils.translation.pgettext()`), providing a contextually translated word::"
msgstr ""

msgid ""
"The ``npgettext`` function also behaves like the Python variant (:func:"
"`~django.utils.translation.npgettext()`), providing a **pluralized** "
"contextually translated word::"
msgstr ""

msgid ""
"The ``pluralidx`` function works in a similar way to the :tfilter:"
"`pluralize` template filter, determining if a given ``count`` should use a "
"plural form of a word or not::"
msgstr ""

msgid ""
"In the simplest case, if no custom pluralization is needed, this returns "
"``false`` for the integer ``1`` and ``true`` for all other numbers."
msgstr ""

msgid ""
"However, pluralization is not this simple in all languages. If the language "
"does not support pluralization, an empty value is provided."
msgstr ""

msgid ""
"Additionally, if there are complex rules around pluralization, the catalog "
"view will render a conditional expression. This will evaluate to either a "
"``true`` (should pluralize) or ``false`` (should **not** pluralize) value."
msgstr ""

msgid "The ``JSONCatalog`` view"
msgstr ""

msgid ""
"In order to use another client-side library to handle translations, you may "
"want to take advantage of the ``JSONCatalog`` view. It's similar to :class:"
"`~django.views.i18n.JavaScriptCatalog` but returns a JSON response."
msgstr ""

msgid ""
"See the documentation for :class:`~django.views.i18n.JavaScriptCatalog` to "
"learn about possible values and use of the ``domain`` and ``packages`` "
"attributes."
msgstr ""

msgid "The response format is as follows:"
msgstr ""

msgid "Note on performance"
msgstr ""

msgid ""
"The various JavaScript/JSON i18n views generate the catalog from ``.mo`` "
"files on every request. Since its output is constant, at least for a given "
"version of a site, it's a good candidate for caching."
msgstr ""

msgid ""
"Server-side caching will reduce CPU load. It's easily implemented with the :"
"func:`~django.views.decorators.cache.cache_page` decorator. To trigger cache "
"invalidation when your translations change, provide a version-dependent key "
"prefix, as shown in the example below, or map the view at a version-"
"dependent URL::"
msgstr ""

msgid ""
"Client-side caching will save bandwidth and make your site load faster. If "
"you're using ETags (:class:`~django.middleware.http."
"ConditionalGetMiddleware`), you're already covered. Otherwise, you can "
"apply :ref:`conditional decorators <conditional-decorators>`. In the "
"following example, the cache is invalidated whenever you restart your "
"application server::"
msgstr ""

msgid ""
"You can even pre-generate the JavaScript catalog as part of your deployment "
"procedure and serve it as a static file. This radical technique is "
"implemented in django-statici18n_."
msgstr ""

msgid "Internationalization: in URL patterns"
msgstr ""

msgid "Django provides two mechanisms to internationalize URL patterns:"
msgstr ""

msgid ""
"Adding the language prefix to the root of the URL patterns to make it "
"possible for :class:`~django.middleware.locale.LocaleMiddleware` to detect "
"the language to activate from the requested URL."
msgstr ""

msgid ""
"Making URL patterns themselves translatable via the :func:`django.utils."
"translation.gettext_lazy()` function."
msgstr ""

msgid ""
"Using either one of these features requires that an active language be set "
"for each request; in other words, you need to have :class:`django.middleware."
"locale.LocaleMiddleware` in your :setting:`MIDDLEWARE` setting."
msgstr ""

msgid "Language prefix in URL patterns"
msgstr ""

msgid ""
"This function can be used in a root URLconf and Django will automatically "
"prepend the current active language code to all URL patterns defined within :"
"func:`~django.conf.urls.i18n.i18n_patterns`."
msgstr ""

msgid ""
"Setting ``prefix_default_language`` to ``False`` removes the prefix from the "
"default language (:setting:`LANGUAGE_CODE`). This can be useful when adding "
"translations to existing site so that the current URLs won't change."
msgstr ""

msgid "Example URL patterns::"
msgstr ""

msgid ""
"After defining these URL patterns, Django will automatically add the "
"language prefix to the URL patterns that were added by the ``i18n_patterns`` "
"function. Example::"
msgstr ""

msgid ""
"With ``prefix_default_language=False`` and  ``LANGUAGE_CODE='en'``, the URLs "
"will be::"
msgstr ""

msgid ""
":func:`~django.conf.urls.i18n.i18n_patterns` is only allowed in a root "
"URLconf. Using it within an included URLconf will throw an :exc:`~django."
"core.exceptions.ImproperlyConfigured` exception."
msgstr ""

msgid ""
"Ensure that you don't have non-prefixed URL patterns that might collide with "
"an automatically-added language prefix."
msgstr ""

msgid "Translating URL patterns"
msgstr ""

msgid ""
"URL patterns can also be marked translatable using the :func:`~django.utils."
"translation.gettext_lazy` function. Example::"
msgstr ""

msgid ""
"After you've created the translations, the :func:`~django.urls.reverse` "
"function will return the URL in the active language. Example::"
msgstr ""

msgid ""
"In most cases, it's best to use translated URLs only within a language code "
"prefixed block of patterns (using :func:`~django.conf.urls.i18n."
"i18n_patterns`), to avoid the possibility that a carelessly translated URL "
"causes a collision with a non-translated URL pattern."
msgstr ""

msgid "Reversing in templates"
msgstr ""

msgid ""
"If localized URLs get reversed in templates they always use the current "
"language. To link to a URL in another language use the :ttag:`language` "
"template tag. It enables the given language in the enclosed template section:"
msgstr ""

msgid ""
"The :ttag:`language` tag expects the language code as the only argument."
msgstr ""

msgid "Localization: how to create language files"
msgstr ""

msgid ""
"Once the string literals of an application have been tagged for later "
"translation, the translation themselves need to be written (or obtained). "
"Here's how that works."
msgstr ""

msgid "Message files"
msgstr ""

msgid ""
"The first step is to create a :term:`message file` for a new language. A "
"message file is a plain-text file, representing a single language, that "
"contains all available translation strings and how they should be "
"represented in the given language. Message files have a ``.po`` file "
"extension."
msgstr ""

msgid ""
"Django comes with a tool, :djadmin:`django-admin makemessages "
"<makemessages>`, that automates the creation and upkeep of these files."
msgstr ""

msgid "Gettext utilities"
msgstr ""

msgid ""
"The ``makemessages`` command (and ``compilemessages`` discussed later) use "
"commands from the GNU gettext toolset: ``xgettext``, ``msgfmt``, "
"``msgmerge`` and ``msguniq``."
msgstr ""

msgid "The minimum version of the ``gettext`` utilities supported is 0.15."
msgstr ""

msgid "To create or update a message file, run this command::"
msgstr ""

msgid ""
"...where ``de`` is the :term:`locale name` for the message file you want to "
"create. For example, ``pt_BR`` for Brazilian Portuguese, ``de_AT`` for "
"Austrian German or ``id`` for Indonesian."
msgstr ""

msgid "The script should be run from one of two places:"
msgstr ""

msgid ""
"The root directory of your Django project (the one that contains ``manage."
"py``)."
msgstr ""

msgid "The root directory of one of your Django apps."
msgstr ""

msgid ""
"The script runs over your project source tree or your application source "
"tree and pulls out all strings marked for translation (see :ref:`how-django-"
"discovers-translations` and be sure :setting:`LOCALE_PATHS` is configured "
"correctly). It creates (or updates) a message file in the directory ``locale/"
"LANG/LC_MESSAGES``. In the ``de`` example, the file will be ``locale/de/"
"LC_MESSAGES/django.po``."
msgstr ""

msgid ""
"When you run ``makemessages`` from the root directory of your project, the "
"extracted strings will be automatically distributed to the proper message "
"files. That is, a string extracted from a file of an app containing a "
"``locale`` directory will go in a message file under that directory. A "
"string extracted from a file of an app without any ``locale`` directory will "
"either go in a message file under the directory listed first in :setting:"
"`LOCALE_PATHS` or will generate an error if :setting:`LOCALE_PATHS` is empty."
msgstr ""

msgid ""
"By default :djadmin:`django-admin makemessages <makemessages>` examines "
"every file that has the ``.html``, ``.txt`` or ``.py`` file extension. If "
"you want to override that default, use the :option:`--extension "
"<makemessages --extension>` or ``-e`` option to specify the file extensions "
"to examine::"
msgstr ""

msgid ""
"Separate multiple extensions with commas and/or use ``-e`` or ``--"
"extension`` multiple times::"
msgstr ""

msgid ""
"When :ref:`creating message files from JavaScript source code <creating-"
"message-files-from-js-code>` you need to use the special ``djangojs`` "
"domain, **not** ``-e js``."
msgstr ""

msgid "Using Jinja2 templates?"
msgstr ""

msgid ""
":djadmin:`makemessages` doesn't understand the syntax of Jinja2 templates. "
"To extract strings from a project containing Jinja2 templates, use `Message "
"Extracting`_ from Babel_ instead."
msgstr ""

msgid "Here's an example ``babel.cfg`` configuration file::"
msgstr ""

msgid ""
"Make sure you list all extensions you're using! Otherwise Babel won't "
"recognize the tags defined by these extensions and will ignore Jinja2 "
"templates containing them entirely."
msgstr ""

msgid ""
"Babel provides similar features to :djadmin:`makemessages`, can replace it "
"in general, and doesn't depend on ``gettext``. For more information, read "
"its documentation about `working with message catalogs`_."
msgstr ""

msgid "No gettext?"
msgstr ""

msgid ""
"If you don't have the ``gettext`` utilities installed, :djadmin:"
"`makemessages` will create empty files. If that's the case, either install "
"the ``gettext`` utilities or just copy the English message file (``locale/en/"
"LC_MESSAGES/django.po``) if available and use it as a starting point; it's "
"just an empty translation file."
msgstr ""

msgid "Working on Windows?"
msgstr ""

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`makemessages` works, see :ref:`gettext_on_windows` for more "
"information."
msgstr ""
"如果你正在使用Windows并且需要安装 GNU gettext 程序以便 :djadmin:"
"`makemessages` 工作，请参阅 :ref:`gettext_on_windows` 了解更多信息。"

msgid ""
"The format of ``.po`` files is straightforward. Each ``.po`` file contains a "
"small bit of metadata, such as the translation maintainer's contact "
"information, but the bulk of the file is a list of **messages** -- simple "
"mappings between translation strings and the actual translated text for the "
"particular language."
msgstr ""

msgid ""
"For example, if your Django app contained a translation string for the text "
"``\"Welcome to my site.\"``, like so::"
msgstr ""

msgid ""
"...then :djadmin:`django-admin makemessages <makemessages>` will have "
"created a ``.po`` file containing the following snippet -- a message:"
msgstr ""

msgid "A quick explanation:"
msgstr ""

msgid ""
"``msgid`` is the translation string, which appears in the source. Don't "
"change it."
msgstr ""

msgid ""
"``msgstr`` is where you put the language-specific translation. It starts out "
"empty, so it's your responsibility to change it. Make sure you keep the "
"quotes around your translation."
msgstr ""

msgid ""
"As a convenience, each message includes, in the form of a comment line "
"prefixed with ``#`` and located above the ``msgid`` line, the filename and "
"line number from which the translation string was gleaned."
msgstr ""

msgid ""
"Long messages are a special case. There, the first string directly after the "
"``msgstr`` (or ``msgid``) is an empty string. Then the content itself will "
"be written over the next few lines as one string per line. Those strings are "
"directly concatenated. Don't forget trailing spaces within the strings; "
"otherwise, they'll be tacked together without whitespace!"
msgstr ""

msgid "Mind your charset"
msgstr ""

msgid ""
"Due to the way the ``gettext`` tools work internally and because we want to "
"allow non-ASCII source strings in Django's core and your applications, you "
"**must** use UTF-8 as the encoding for your PO files (the default when PO "
"files are created).  This means that everybody will be using the same "
"encoding, which is important when Django processes the PO files."
msgstr ""

msgid ""
"To reexamine all source code and templates for new translation strings and "
"update all message files for **all** languages, run this::"
msgstr ""

msgid "Compiling message files"
msgstr ""

msgid ""
"After you create your message file -- and each time you make changes to it "
"-- you'll need to compile it into a more efficient form, for use by "
"``gettext``. Do this with the :djadmin:`django-admin compilemessages "
"<compilemessages>` utility."
msgstr ""

msgid ""
"This tool runs over all available ``.po`` files and creates ``.mo`` files, "
"which are binary files optimized for use by ``gettext``. In the same "
"directory from which you ran :djadmin:`django-admin makemessages "
"<makemessages>`, run :djadmin:`django-admin compilemessages "
"<compilemessages>` like this::"
msgstr ""

msgid "That's it. Your translations are ready for use."
msgstr ""

msgid ""
"If you're using Windows and need to install the GNU gettext utilities so :"
"djadmin:`django-admin compilemessages <compilemessages>` works see :ref:"
"`gettext_on_windows` for more information."
msgstr ""
"如果你正在使用Windows并且需要安装 GNU gettext 程序以便 :djadmin:`django-"
"admin compilemessages <compilemessages>` 工作，请参阅 :ref:"
"`gettext_on_windows` 了解更多信息。"

msgid ".po files: Encoding and BOM usage."
msgstr ""

msgid ""
"Django only supports ``.po`` files encoded in UTF-8 and without any BOM "
"(Byte Order Mark) so if your text editor adds such marks to the beginning of "
"files by default then you will need to reconfigure it."
msgstr ""

msgid ""
"Troubleshooting: ``gettext()`` incorrectly detects ``python-format`` in "
"strings with percent signs"
msgstr ""

msgid ""
"In some cases, such as strings with a percent sign followed by a space and "
"a :ref:`string conversion type <old-string-formatting>` (e.g. ``_(\"10% "
"interest\")``), :func:`~django.utils.translation.gettext` incorrectly flags "
"strings with ``python-format``."
msgstr ""

msgid ""
"If you try to compile message files with incorrectly flagged strings, you'll "
"get an error message like ``number of format specifications in 'msgid' and "
"'msgstr' does not match`` or ``'msgstr' is not a valid Python format string, "
"unlike 'msgid'``."
msgstr ""

msgid ""
"To workaround this, you can escape percent signs by adding a second percent "
"sign::"
msgstr ""

msgid ""
"Or you can use ``no-python-format`` so that all percent signs are treated as "
"literals::"
msgstr ""

msgid "Creating message files from JavaScript source code"
msgstr ""

msgid ""
"You create and update the message files the same way as the other Django "
"message files -- with the :djadmin:`django-admin makemessages "
"<makemessages>` tool. The only difference is you need to explicitly specify "
"what in gettext parlance is known as a domain in this case the ``djangojs`` "
"domain, by providing a ``-d djangojs`` parameter, like this::"
msgstr ""

msgid ""
"This would create or update the message file for JavaScript for German. "
"After updating message files, just run :djadmin:`django-admin "
"compilemessages <compilemessages>` the same way as you do with normal Django "
"message files."
msgstr ""

msgid "``gettext`` on Windows"
msgstr ""

msgid ""
"This is only needed for people who either want to extract message IDs or "
"compile message files (``.po``). Translation work itself just involves "
"editing existing files of this type, but if you want to create your own "
"message files, or want to test or compile a changed message file, download "
"`a precompiled binary installer <https://mlocati.github.io/articles/gettext-"
"iconv-windows.html>`_."
msgstr ""

msgid ""
"You may also use ``gettext`` binaries you have obtained elsewhere, so long "
"as the ``xgettext --version`` command works properly. Do not attempt to use "
"Django translation utilities with a ``gettext`` package if the command "
"``xgettext --version`` entered at a Windows command prompt causes a popup "
"window saying \"xgettext.exe has generated errors and will be closed by "
"Windows\"."
msgstr ""

msgid "Customizing the ``makemessages`` command"
msgstr ""

msgid ""
"If you want to pass additional parameters to ``xgettext``, you need to "
"create a custom :djadmin:`makemessages` command and override its "
"``xgettext_options`` attribute::"
msgstr ""

msgid ""
"If you need more flexibility, you could also add a new argument to your "
"custom :djadmin:`makemessages` command::"
msgstr ""

msgid "Miscellaneous"
msgstr "杂项"

msgid "The ``set_language`` redirect view"
msgstr ""

msgid ""
"As a convenience, Django comes with a view, :func:`django.views.i18n."
"set_language`, that sets a user's language preference and redirects to a "
"given URL or, by default, back to the previous page."
msgstr ""

msgid "Activate this view by adding the following line to your URLconf::"
msgstr ""

msgid ""
"(Note that this example makes the view available at ``/i18n/setlang/``.)"
msgstr ""

msgid ""
"Make sure that you don't include the above URL within :func:`~django.conf."
"urls.i18n.i18n_patterns` - it needs to be language-independent itself to "
"work correctly."
msgstr ""

msgid ""
"The view expects to be called via the ``POST`` method, with a ``language`` "
"parameter set in request. If session support is enabled, the view saves the "
"language choice in the user's session. It also saves the language choice in "
"a cookie that is named ``django_language`` by default. (The name can be "
"changed through the :setting:`LANGUAGE_COOKIE_NAME` setting.)"
msgstr ""

msgid ""
"In older versions, the cookie is only set if session support isn't enabled."
msgstr ""

msgid ""
"After setting the language choice, Django looks for a ``next`` parameter in "
"the ``POST`` or ``GET`` data. If that is found and Django considers it to be "
"a safe URL (i.e. it doesn't point to a different host and uses a safe "
"scheme), a redirect to that URL will be performed. Otherwise, Django may "
"fall back to redirecting the user to the URL from the ``Referer`` header or, "
"if it is not set, to ``/``, depending on the nature of the request:"
msgstr ""

msgid ""
"For AJAX requests, the fallback will be performed only if the ``next`` "
"parameter was set. Otherwise a 204 status code (No Content) will be returned."
msgstr ""

msgid "For non-AJAX requests, the fallback will always be performed."
msgstr ""

msgid "Here's example HTML template code:"
msgstr ""

msgid ""
"In this example, Django looks up the URL of the page to which the user will "
"be redirected in the ``redirect_to`` context variable."
msgstr ""

msgid "Explicitly setting the active language"
msgstr ""

msgid ""
"You may want to set the active language for the current session explicitly. "
"Perhaps a user's language preference is retrieved from another system, for "
"example. You've already been introduced to :func:`django.utils.translation."
"activate()`. That applies to the current thread only. To persist the "
"language for the entire session, also modify :data:`~django.utils."
"translation.LANGUAGE_SESSION_KEY` in the session::"
msgstr ""

msgid ""
"You would typically want to use both: :func:`django.utils.translation."
"activate()` will change the language for this thread, and modifying the "
"session makes this preference persist in future requests."
msgstr ""

msgid ""
"If you are not using sessions, the language will persist in a cookie, whose "
"name is configured in :setting:`LANGUAGE_COOKIE_NAME`. For example::"
msgstr ""

msgid "Using translations outside views and templates"
msgstr ""

msgid ""
"While Django provides a rich set of i18n tools for use in views and "
"templates, it does not restrict the usage to Django-specific code. The "
"Django translation mechanisms can be used to translate arbitrary texts to "
"any language that is supported by Django (as long as an appropriate "
"translation catalog exists, of course). You can load a translation catalog, "
"activate it and translate text to language of your choice, but remember to "
"switch back to original language, as activating a translation catalog is "
"done on per-thread basis and such change will affect code running in the "
"same thread."
msgstr ""

msgid ""
"Calling this function with the value ``'de'`` will give you ``\"Willkommen"
"\"``, regardless of :setting:`LANGUAGE_CODE` and language set by middleware."
msgstr ""

msgid ""
"Functions of particular interest are :func:`django.utils.translation."
"get_language()` which returns the language used in the current thread, :func:"
"`django.utils.translation.activate()` which activates a translation catalog "
"for the current thread, and :func:`django.utils.translation."
"check_for_language()` which checks if the given language is supported by "
"Django."
msgstr ""

msgid ""
"To help write more concise code, there is also a context manager :func:"
"`django.utils.translation.override()` that stores the current language on "
"enter and restores it on exit. With it, the above example becomes::"
msgstr ""

msgid "Language cookie"
msgstr ""

msgid "A number of settings can be used to adjust language cookie options:"
msgstr ""

msgid ":setting:`LANGUAGE_COOKIE_NAME`"
msgstr ""

msgid ":setting:`LANGUAGE_COOKIE_AGE`"
msgstr ""

msgid ":setting:`LANGUAGE_COOKIE_DOMAIN`"
msgstr ""

msgid ":setting:`LANGUAGE_COOKIE_PATH`"
msgstr ""

msgid "Implementation notes"
msgstr ""

msgid "Specialties of Django translation"
msgstr ""

msgid ""
"Django's translation machinery uses the standard ``gettext`` module that "
"comes with Python. If you know ``gettext``, you might note these specialties "
"in the way Django does translation:"
msgstr ""

msgid ""
"The string domain is ``django`` or ``djangojs``. This string domain is used "
"to differentiate between different programs that store their data in a "
"common message-file library (usually ``/usr/share/locale/``). The ``django`` "
"domain is used for Python and template translation strings and is loaded "
"into the global translation catalogs. The ``djangojs`` domain is only used "
"for JavaScript translation catalogs to make sure that those are as small as "
"possible."
msgstr ""

msgid ""
"Django doesn't use ``xgettext`` alone. It uses Python wrappers around "
"``xgettext`` and ``msgfmt``. This is mostly for convenience."
msgstr ""

msgid "How Django discovers language preference"
msgstr ""

msgid ""
"Once you've prepared your translations -- or, if you just want to use the "
"translations that come with Django -- you'll just need to activate "
"translation for your app."
msgstr ""

msgid ""
"Behind the scenes, Django has a very flexible model of deciding which "
"language should be used -- installation-wide, for a particular user, or both."
msgstr ""

msgid ""
"To set an installation-wide language preference, set :setting:"
"`LANGUAGE_CODE`. Django uses this language as the default translation -- the "
"final attempt if no better matching translation is found through one of the "
"methods employed by the locale middleware (see below)."
msgstr ""

msgid ""
"If all you want is to run Django with your native language all you need to "
"do is set :setting:`LANGUAGE_CODE` and make sure the corresponding :term:"
"`message files <message file>` and their compiled versions (``.mo``) exist."
msgstr ""

msgid ""
"If you want to let each individual user specify which language they prefer, "
"then you also need to use the ``LocaleMiddleware``. ``LocaleMiddleware`` "
"enables language selection based on data from the request. It customizes "
"content for each user."
msgstr ""

msgid ""
"To use ``LocaleMiddleware``, add ``'django.middleware.locale."
"LocaleMiddleware'`` to your :setting:`MIDDLEWARE` setting. Because "
"middleware order matters, follow these guidelines:"
msgstr ""

msgid "Make sure it's one of the first middleware installed."
msgstr ""

msgid ""
"It should come after ``SessionMiddleware``, because ``LocaleMiddleware`` "
"makes use of session data. And it should come before ``CommonMiddleware`` "
"because ``CommonMiddleware`` needs an activated language in order to resolve "
"the requested URL."
msgstr ""

msgid "If you use ``CacheMiddleware``, put ``LocaleMiddleware`` after it."
msgstr ""

msgid "For example, your :setting:`MIDDLEWARE` might look like this::"
msgstr ""

msgid ""
"(For more on middleware, see the :doc:`middleware documentation </topics/"
"http/middleware>`.)"
msgstr ""

msgid ""
"``LocaleMiddleware`` tries to determine the user's language preference by "
"following this algorithm:"
msgstr ""

msgid ""
"First, it looks for the language prefix in the requested URL.  This is only "
"performed when you are using the ``i18n_patterns`` function in your root "
"URLconf. See :ref:`url-internationalization` for more information about the "
"language prefix and how to internationalize URL patterns."
msgstr ""

msgid ""
"Failing that, it looks for the :data:`~django.utils.translation."
"LANGUAGE_SESSION_KEY` key in the current user's session."
msgstr ""

msgid "Failing that, it looks for a cookie."
msgstr ""

msgid ""
"The name of the cookie used is set by the :setting:`LANGUAGE_COOKIE_NAME` "
"setting. (The default name is ``django_language``.)"
msgstr ""

msgid ""
"Failing that, it looks at the ``Accept-Language`` HTTP header. This header "
"is sent by your browser and tells the server which language(s) you prefer, "
"in order by priority. Django tries each language in the header until it "
"finds one with available translations."
msgstr ""

msgid "Failing that, it uses the global :setting:`LANGUAGE_CODE` setting."
msgstr ""

msgid ""
"In each of these places, the language preference is expected to be in the "
"standard :term:`language format<language code>`, as a string. For example, "
"Brazilian Portuguese is ``pt-br``."
msgstr ""

msgid ""
"If a base language is available but the sublanguage specified is not, Django "
"uses the base language. For example, if a user specifies ``de-at`` (Austrian "
"German) but Django only has ``de`` available, Django uses ``de``."
msgstr ""

msgid ""
"Only languages listed in the :setting:`LANGUAGES` setting can be selected. "
"If you want to restrict the language selection to a subset of provided "
"languages (because your application doesn't provide all those languages), "
"set :setting:`LANGUAGES` to a list of languages. For example::"
msgstr ""

msgid ""
"This example restricts languages that are available for automatic selection "
"to German and English (and any sublanguage, like ``de-ch`` or ``en-us``)."
msgstr ""

msgid ""
"If you define a custom :setting:`LANGUAGES` setting, as explained in the "
"previous bullet, you can mark the language names as translation strings -- "
"but use :func:`~django.utils.translation.gettext_lazy` instead of :func:"
"`~django.utils.translation.gettext` to avoid a circular import."
msgstr ""

msgid "Here's a sample settings file::"
msgstr ""

msgid ""
"Once ``LocaleMiddleware`` determines the user's preference, it makes this "
"preference available as ``request.LANGUAGE_CODE`` for each :class:`~django."
"http.HttpRequest`. Feel free to read this value in your view code. Here's a "
"simple example::"
msgstr ""

msgid ""
"Note that, with static (middleware-less) translation, the language is in "
"``settings.LANGUAGE_CODE``, while with dynamic (middleware) translation, "
"it's in ``request.LANGUAGE_CODE``."
msgstr ""

msgid "How Django discovers translations"
msgstr ""

msgid ""
"At runtime, Django builds an in-memory unified catalog of literals-"
"translations. To achieve this it looks for translations by following this "
"algorithm regarding the order in which it examines the different file paths "
"to load the compiled :term:`message files <message file>` (``.mo``) and the "
"precedence of multiple translations for the same literal:"
msgstr ""

msgid ""
"The directories listed in :setting:`LOCALE_PATHS` have the highest "
"precedence, with the ones appearing first having higher precedence than the "
"ones appearing later."
msgstr ""

msgid ""
"Then, it looks for and uses if it exists a ``locale`` directory in each of "
"the installed apps listed in :setting:`INSTALLED_APPS`.  The ones appearing "
"first have higher precedence than the ones appearing later."
msgstr ""

msgid ""
"Finally, the Django-provided base translation in ``django/conf/locale`` is "
"used as a fallback."
msgstr ""

msgid ""
"The translations for literals included in JavaScript assets are looked up "
"following a similar but not identical algorithm. See :class:`."
"JavaScriptCatalog` for more details."
msgstr ""

msgid ""
"You can also put :ref:`custom format files <custom-format-files>` in the :"
"setting:`LOCALE_PATHS` directories if you also set :setting:"
"`FORMAT_MODULE_PATH`."
msgstr ""

msgid ""
"In all cases the name of the directory containing the translation is "
"expected to be named using :term:`locale name` notation. E.g. ``de``, "
"``pt_BR``, ``es_AR``, etc. Untranslated strings for territorial language "
"variants use the translations of the generic language. For example, "
"untranslated ``pt_BR`` strings use ``pt`` translations."
msgstr ""

msgid "Fallback to the generic language as described above was added."
msgstr ""

msgid ""
"This way, you can write applications that include their own translations, "
"and you can override base translations in your project. Or, you can just "
"build a big project out of several apps and put all translations into one "
"big common message file specific to the project you are composing. The "
"choice is yours."
msgstr ""

msgid "All message file repositories are structured the same way. They are:"
msgstr ""

msgid ""
"All paths listed in :setting:`LOCALE_PATHS` in your settings file are "
"searched for ``<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

msgid "``$APPPATH/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

msgid ""
"``$PYTHONPATH/django/conf/locale/<language>/LC_MESSAGES/django.(po|mo)``"
msgstr ""

msgid ""
"To create message files, you use the :djadmin:`django-admin makemessages "
"<makemessages>` tool. And you use :djadmin:`django-admin compilemessages "
"<compilemessages>` to produce the binary ``.mo`` files that are used by "
"``gettext``."
msgstr ""

msgid ""
"You can also run :djadmin:`django-admin compilemessages --settings=path.to."
"settings <compilemessages>` to make the compiler process all the directories "
"in your :setting:`LOCALE_PATHS` setting."
msgstr ""

msgid "Using a non-English base language"
msgstr ""

msgid ""
"Django makes the general assumption that the original strings in a "
"translatable project are written in English. You can choose another "
"language, but you must be aware of certain limitations:"
msgstr ""

msgid ""
"``gettext`` only provides two plural forms for the original messages, so you "
"will also need to provide a translation for the base language to include all "
"plural forms if the plural rules for the base language are different from "
"English."
msgstr ""

msgid ""
"When an English variant is activated and English strings are missing, the "
"fallback language will not be the :setting:`LANGUAGE_CODE` of the project, "
"but the original strings. For example, an English user visiting a site with :"
"setting:`LANGUAGE_CODE` set to Spanish and original strings written in "
"Russian will see Russian text rather than Spanish."
msgstr ""

msgid "Using Django"
msgstr ""

msgid "Introductions to all the key parts of Django you'll need to know:"
msgstr "你需要知道的所有Django关键部分介绍："

msgid "How to install Django"
msgstr "如何安装Django"

msgid "This document will get you up and running with Django."
msgstr "本文档将帮助您使用Django。"

msgid "Install Python"
msgstr "安装Python"

msgid ""
"Django is a Python Web framework. See :ref:`faq-python-version-support` for "
"details."
msgstr ""

msgid ""
"Get the latest version of Python at https://www.python.org/downloads/ or "
"with your operating system's package manager."
msgstr ""
"获取最新版本的Python可以通过：访问 https://www.python.org/downloads/ ；或者操"
"作系统的包管理工具。"

msgid "Django on Jython"
msgstr "基于 Jython 的 Django"

msgid ""
"Jython_ (a Python implementation for the Java platform) is not compatible "
"with Python 3, so Django ≥ 2.0 cannot run on Jython."
msgstr ""
"Jython_ （一个针对Java平台的Python实现）和Python 3不兼容，所以Django 2.0及以"
"上的版本无法在Jython上运行。"

msgid "Python on Windows"
msgstr "Windows上的Python"

msgid ""
"If you are just starting with Django and using Windows, you may find :doc:`/"
"howto/windows` useful."
msgstr ""
"如果您刚刚开始学习Django并且使用Windows，查看 :doc:`/howto/windows`  可能对你"
"有帮助。"

msgid "Install Apache and ``mod_wsgi``"
msgstr "安装Apache和 ``mod_wsgi``"

msgid ""
"If you just want to experiment with Django, skip ahead to the next section; "
"Django includes a lightweight web server you can use for testing, so you "
"won't need to set up Apache until you're ready to deploy Django in "
"production."
msgstr ""
"如果您只是想试验Django，请跳到下一部分；Django包含一个可用于测试的轻量级Web服"
"务器，因此在准备好在生产环境中部署Django之前，您不需要设置Apache。"

msgid ""
"If you want to use Django on a production site, use `Apache`_ with "
"`mod_wsgi`_. mod_wsgi operates in one of two modes: embedded mode or daemon "
"mode. In embedded mode, mod_wsgi is similar to mod_perl -- it embeds Python "
"within Apache and loads Python code into memory when the server starts. Code "
"stays in memory throughout the life of an Apache process, which leads to "
"significant performance gains over other server arrangements. In daemon "
"mode, mod_wsgi spawns an independent daemon process that handles requests. "
"The daemon process can run as a different user than the Web server, possibly "
"leading to improved security. The daemon process can be restarted without "
"restarting the entire Apache Web server, possibly making refreshing your "
"codebase more seamless. Consult the mod_wsgi documentation to determine "
"which mode is right for your setup. Make sure you have Apache installed with "
"the mod_wsgi module activated. Django will work with any version of Apache "
"that supports mod_wsgi."
msgstr ""
"如果要在生产站点上使用Django，请将 `Apache`_ 与 `mod_wsgi`_ 一起使用。 "
"mod_wsgi以两种模式中的一种运行：嵌入模式或守护进程模式。在嵌入模式下，"
"mod_wsgi类似于mod_perl —— 它在Apache中嵌入Python，并在服务器启动时将Python代"
"码加载到内存中。代码在Apache进程的整个生命周期中都保留在内存中，与其他服务器"
"相比，这可以显着提高性能。在守护进程模式下，mod_wsgi 会生成一个处理请求的独立"
"守护进程。守护进程可以作为与Web服务器不同的用户运行，可能会提高安全性。可以在"
"不重新启动整个Apache Web服务器的情况下重新启动守护进程，从而可以更加无缝地刷"
"新代码库。请参阅mod_wsgi文档以确定适合您的设置的模式。确保你在安装了Apache并"
"且启用了mod_wsgi模块。 Django将在任何支持mod_wsgi的Apache版本上工作。"

msgid ""
"See :doc:`How to use Django with mod_wsgi </howto/deployment/wsgi/modwsgi>` "
"for information on how to configure mod_wsgi once you have it installed."
msgstr ""
"关于如何在安装后配置mod_wsgi模块，请查看 :doc:`How to use Django with "
"mod_wsgi </howto/deployment/wsgi/modwsgi>` 。"

msgid ""
"If you can't use mod_wsgi for some reason, fear not: Django supports many "
"other deployment options. One is :doc:`uWSGI </howto/deployment/wsgi/"
"uwsgi>`; it works very well with `nginx`_. Additionally, Django follows the "
"WSGI spec (:pep:`3333`), which allows it to run on a variety of server "
"platforms."
msgstr ""
"如果由于某种原因你不能使用mod_wsgi，请不要担心： Django支持许多其他部署选项。"
"一个是 :doc:`uWSGI </howto/deployment/wsgi/uwsgi>` ；它和 `nginx`_ 配合使用很"
"好。此外，Django遵循 WSGI 规范（ :pep:`3333` ），允许它在各种服务器平台上运"
"行。"

msgid "Get your database running"
msgstr "运行你的数据库"

msgid ""
"If you plan to use Django's database API functionality, you'll need to make "
"sure a database server is running. Django supports many different database "
"servers and is officially supported with PostgreSQL_, MySQL_, Oracle_ and "
"SQLite_."
msgstr ""
"如果你打算使用Django的数据库API功能，则需要确保数据库服务器正在运行。Django支"
"持很多不同的数据库服务器，并且正式支持 PostgreSQL_， MySQL_， Oracle_ 和 "
"SQLite_ 。"

msgid ""
"If you are developing a simple project or something you don't plan to deploy "
"in a production environment, SQLite is generally the simplest option as it "
"doesn't require running a separate server. However, SQLite has many "
"differences from other databases, so if you are working on something "
"substantial, it's recommended to develop with the same database that you "
"plan on using in production."
msgstr ""
"如果你正在开发一个简单的项目或者你不打算在生产环境中部署的东西，SQLite通常是"
"最简单的选择，因为它不需要运行一个独立的服务器。但是，SQLite与其他数据库有许"
"多不同之处，因此如果你正在开展大量工作，建议使用你计划在生产中使用的相同数据"
"库进行开发。"

msgid ""
"In addition to the officially supported databases, there are :ref:`backends "
"provided by 3rd parties <third-party-notes>` that allow you to use other "
"databases with Django."
msgstr ""
"除了官方支持的数据库，还有 :ref:`backends provided by 3rd parties <third-"
"party-notes>` 允许你在Django中使用其他数据库。"

msgid ""
"In addition to a database backend, you'll need to make sure your Python "
"database bindings are installed."
msgstr "除了数据库后端，你还要确保安装了Python数据库绑定。"

msgid ""
"If you're using PostgreSQL, you'll need the `psycopg2`_ package. Refer to "
"the :ref:`PostgreSQL notes <postgresql-notes>` for further details."
msgstr ""
"如果你正在使用PostgreSQL，你需要 `psycopg2`_ 包。相关详细信息请参阅 :ref:"
"`PostgreSQL notes <postgresql-notes>` 。"

msgid ""
"If you're using MySQL, you'll need a :ref:`DB API driver <mysql-db-api-"
"drivers>` like ``mysqlclient``. See :ref:`notes for the MySQL backend <mysql-"
"notes>` for details."
msgstr ""
"如果你正在使用MySQL，则需要一个像 ``mysqlclient``这样的 :ref:`DB API driver "
"<mysql-db-api-drivers>` 。相关详细信息请参阅 :ref:`notes for the MySQL "
"backend <mysql-notes>` 。"

msgid ""
"If you're using SQLite you might want to read the :ref:`SQLite backend notes "
"<sqlite-notes>`."
msgstr ""
"如果你正在使用SQLite，则可能需要阅读 :ref:`SQLite backend notes <sqlite-"
"notes>` 。"

msgid ""
"If you're using Oracle, you'll need a copy of cx_Oracle_, but please read "
"the :ref:`notes for the Oracle backend <oracle-notes>` for details regarding "
"supported versions of both Oracle and ``cx_Oracle``."
msgstr ""
"如果你正在使用Oracle，则需要 cx_Oracle_ 的副本，但请阅读 :ref:`notes for the "
"Oracle backend <oracle-notes>` 以获取有关 Oracle 和 ``cx_Oracle`` 的支持的版"
"本的详细信息。"

msgid ""
"If you're using an unofficial 3rd party backend, please consult the "
"documentation provided for any additional requirements."
msgstr "如果你使用的是非官方的第三方后端，请参阅提供的文档以了解任何其他要求。"

msgid ""
"If you plan to use Django's ``manage.py migrate`` command to automatically "
"create database tables for your models (after first installing Django and "
"creating a project), you'll need to ensure that Django has permission to "
"create and alter tables in the database you're using; if you plan to "
"manually create the tables, you can simply grant Django ``SELECT``, "
"``INSERT``, ``UPDATE`` and ``DELETE`` permissions. After creating a database "
"user with these permissions, you'll specify the details in your project's "
"settings file, see :setting:`DATABASES` for details."
msgstr ""
"如果您打算使用Django的 ``manage.py migrate`` 命令为您的模型自动创建数据库表"
"（在首次安装Django并创建项目之后），您需要确保Django有权在您正在使用的数据库"
"中创建和更改表；如果你打算手动创建这些表，你可以只需授予Django ``SELECT``，"
"``INSERT``，``UPDATE`` 和 ``DELETE``权限。创建具有这些权限的数据库用户后，您"
"要在项目的配置文件中指定详细信息，请参阅 :setting:`DATABASES` 以获取详细信"
"息。"

msgid ""
"If you're using Django's :doc:`testing framework</topics/testing/index>` to "
"test database queries, Django will need permission to create a test database."
msgstr ""
"如果你正在使用Django的 :doc:`testing framework</topics/testing/index>` 来测试"
"数据库查询，Django将需要创建测试数据库的权限。"

msgid "Install the Django code"
msgstr "安装Django代码"

msgid ""
"Installation instructions are slightly different depending on whether you're "
"installing a distribution-specific package, downloading the latest official "
"release, or fetching the latest development version."
msgstr ""

msgid "It's easy, no matter which way you choose."
msgstr ""

msgid "Installing an official release with ``pip``"
msgstr ""

msgid "This is the recommended way to install Django."
msgstr ""

msgid ""
"Install pip_. The easiest is to use the `standalone pip installer`_. If your "
"distribution already has ``pip`` installed, you might need to update it if "
"it's outdated. If it's outdated, you'll know because installation won't work."
msgstr ""

msgid ""
"Take a look at virtualenv_ and virtualenvwrapper_. These tools provide "
"isolated Python environments, which are more practical than installing "
"packages systemwide. They also allow installing packages without "
"administrator privileges. The :doc:`contributing tutorial </intro/"
"contributing>` walks through how to create a virtualenv."
msgstr ""

msgid ""
"After you've created and activated a virtual environment, enter the command:"
msgstr ""

msgid "Installing a distribution-specific package"
msgstr ""

msgid ""
"Check the :doc:`distribution specific notes </misc/distributions>` to see if "
"your platform/distribution provides official Django packages/installers. "
"Distribution-provided packages will typically allow for automatic "
"installation of dependencies and easy upgrade paths; however, these packages "
"will rarely contain the latest release of Django."
msgstr ""

msgid "Installing the development version"
msgstr ""

msgid "Tracking Django development"
msgstr ""

msgid ""
"If you decide to use the latest development version of Django, you'll want "
"to pay close attention to `the development timeline`_, and you'll want to "
"keep an eye on the :ref:`release notes for the upcoming release "
"<development_release_notes>`. This will help you stay on top of any new "
"features you might want to use, as well as any changes you'll need to make "
"to your code when updating your copy of Django. (For stable releases, any "
"necessary changes are documented in the release notes.)"
msgstr ""

msgid ""
"If you'd like to be able to update your Django code occasionally with the "
"latest bug fixes and improvements, follow these instructions:"
msgstr ""

msgid ""
"Make sure that you have Git_ installed and that you can run its commands "
"from a shell. (Enter ``git help`` at a shell prompt to test this.)"
msgstr ""

msgid "Check out Django's main development branch like so:"
msgstr ""

msgid "This will create a directory ``django`` in your current directory."
msgstr ""

msgid ""
"Make sure that the Python interpreter can load Django's code. The most "
"convenient way to do this is to use virtualenv_, virtualenvwrapper_, and "
"pip_. The :doc:`contributing tutorial </intro/contributing>` walks through "
"how to create a virtualenv."
msgstr ""

msgid ""
"After setting up and activating the virtualenv, run the following command:"
msgstr ""

msgid ""
"This will make Django's code importable, and will also make the ``django-"
"admin`` utility command available. In other words, you're all set!"
msgstr ""

msgid ""
"When you want to update your copy of the Django source code, just run the "
"command ``git pull`` from within the ``django`` directory. When you do this, "
"Git will automatically download any changes."
msgstr ""

msgid "Logging"
msgstr "日志"

msgid "A quick logging primer"
msgstr "日志管理快速入门"

msgid ""
"Django uses Python's builtin :mod:`logging` module to perform system "
"logging. The usage of this module is discussed in detail in Python's own "
"documentation. However, if you've never used Python's logging framework (or "
"even if you have), here's a quick primer."
msgstr ""
"Django 使用 Python 内置的 :mod:`logging` 模块处理系统日志。关于该模块的使用，"
"Python 自己的文档里有更详细的探讨。不过，如果你从来没用过 Python 的 logging "
"框架（或者即便你用过），这里是一篇快速的入门讲解。"

msgid "The cast of players"
msgstr "日志框架的组成元素"

msgid "A Python logging configuration consists of four parts:"
msgstr "一份 Python logging 配置有下面四个部分组成："

msgid ":ref:`topic-logging-parts-loggers`"
msgstr ":ref:`topic-logging-parts-loggers`"

msgid ":ref:`topic-logging-parts-handlers`"
msgstr ":ref:`topic-logging-parts-handlers`"

msgid ":ref:`topic-logging-parts-filters`"
msgstr ":ref:`topic-logging-parts-filters`"

msgid ":ref:`topic-logging-parts-formatters`"
msgstr ":ref:`topic-logging-parts-formatters`"

msgid "Loggers"
msgstr "Loggers"

msgid ""
"A logger is the entry point into the logging system. Each logger is a named "
"bucket to which messages can be written for processing."
msgstr ""
"logger 是日志系统的入口。每个 logger 都是命名了的 bucket， 消息写入 bucket 以"
"便进一步处理。"

msgid ""
"A logger is configured to have a *log level*. This log level describes the "
"severity of the messages that the logger will handle. Python defines the "
"following log levels:"
msgstr ""
"logger 可以配置 *日志级别*。日志级别描述了由该 logger 处理的消息的严重性。"
"Python 定义了下面几种日志级别："

msgid "``DEBUG``: Low level system information for debugging purposes"
msgstr "``DEBUG``：排查故障时使用的低级别系统信息"

msgid "``INFO``: General system information"
msgstr "``INFO``：一般的系统信息"

msgid "``WARNING``: Information describing a minor problem that has occurred."
msgstr "``WARNING``：描述系统发生了一些小问题的信息"

msgid "``ERROR``: Information describing a major problem that has occurred."
msgstr "``ERROR``：描述系统发生了大问题的信息"

msgid ""
"``CRITICAL``: Information describing a critical problem that has occurred."
msgstr "``CRITICAL``：描述系统发生严重问题的信息"

msgid ""
"Each message that is written to the logger is a *Log Record*. Each log "
"record also has a *log level* indicating the severity of that specific "
"message. A log record can also contain useful metadata that describes the "
"event that is being logged. This can include details such as a stack trace "
"or an error code."
msgstr ""
"每一条写入 logger 的消息都是一条*日志记录*。每一条日志记录也包含*日志级别*，"
"代表对应消息的严重程度。日志记录还包含有用的元数据，来描述被记录了日志的事件"
"细节，例如堆栈跟踪或者错误码。"

msgid ""
"When a message is given to the logger, the log level of the message is "
"compared to the log level of the logger. If the log level of the message "
"meets or exceeds the log level of the logger itself, the message will "
"undergo further processing. If it doesn't, the message will be ignored."
msgstr ""
"当 logger 处理一条消息时，会将自己的日志级别和这条消息的日志级别做对比。如果"
"消息的日志级别匹配或者高于 logger 的日志级别，它就会被进一步处理。否则这条消"
"息就会被忽略掉。"

msgid ""
"Once a logger has determined that a message needs to be processed, it is "
"passed to a *Handler*."
msgstr "当 logger 确定了一条消息需要处理之后，会把它传给 *Handler*。"

msgid "Handlers"
msgstr "Handlers"

msgid ""
"The handler is the engine that determines what happens to each message in a "
"logger. It describes a particular logging behavior, such as writing a "
"message to the screen, to a file, or to a network socket."
msgstr ""
"Handler 是决定如何处理 logger 中每一条消息的引擎。它描述特定的日志行为，比如"
"把消息输出到屏幕、文件或网络 socket。"

msgid ""
"Like loggers, handlers also have a log level. If the log level of a log "
"record doesn't meet or exceed the level of the handler, the handler will "
"ignore the message."
msgstr ""
"和 logger 一样，handler 也有日志级别的概念。如果一条日志记录的级别不匹配或者"
"低于 handler 的日志级别，对应的消息会被 handler 忽略。"

msgid ""
"A logger can have multiple handlers, and each handler can have a different "
"log level. In this way, it is possible to provide different forms of "
"notification depending on the importance of a message. For example, you "
"could install one handler that forwards ``ERROR`` and ``CRITICAL`` messages "
"to a paging service, while a second handler logs all messages (including "
"``ERROR`` and ``CRITICAL`` messages) to a file for later analysis."
msgstr ""
"一个 logger 可以有多个 handler，每一个 handler 可以有不同的日志级别。这样就可"
"以根据消息的重要性不同，来提供不同格式的输出。例如，你可以添加一个 handler "
"把  ``ERROR`` 和 ``CRITICAL`` 消息发到寻呼机，再添加另一个 handler 把所有的消"
"息（包括 ``ERROR`` 和 ``CRITICAL`` 消息）保存到文件里以便日后分析。"

msgid "Filters"
msgstr "过滤器"

msgid ""
"A filter is used to provide additional control over which log records are "
"passed from logger to handler."
msgstr ""
"在日志记录从 logger 传到 handler 的过程中，使用 Filter 来做额外的控制。"

msgid ""
"By default, any log message that meets log level requirements will be "
"handled. However, by installing a filter, you can place additional criteria "
"on the logging process. For example, you could install a filter that only "
"allows ``ERROR`` messages from a particular source to be emitted."
msgstr ""
"默认情况下，只要级别匹配，任何日志消息都会被处理。不过，也可以通过添加 "
"filter 来给日志处理的过程增加额外条件。例如，可以添加一个 filter 只允许某个特"
"定来源的 ``ERROR`` 消息输出。"

msgid ""
"Filters can also be used to modify the logging record prior to being "
"emitted. For example, you could write a filter that downgrades ``ERROR`` log "
"records to ``WARNING`` records if a particular set of criteria are met."
msgstr ""
"Filter 还被用来在日志输出之前对日志记录做修改。例如，可以写一个 filter，当满"
"足一定条件时，把日志记录从 ``ERROR`` 降到 ``WARNING`` 级别。"

msgid ""
"Filters can be installed on loggers or on handlers; multiple filters can be "
"used in a chain to perform multiple filtering actions."
msgstr ""
"Filter 在 logger 和 handler 中都可以添加；多个 filter 可以链接起来使用，来做"
"多重过滤操作。"

msgid "Formatters"
msgstr "Formatters"

msgid ""
"Ultimately, a log record needs to be rendered as text. Formatters describe "
"the exact format of that text. A formatter usually consists of a Python "
"formatting string containing :ref:`LogRecord attributes <python:logrecord-"
"attributes>`; however, you can also write custom formatters to implement "
"specific formatting behavior."
msgstr ""
"日志记录最终是需要以文本来呈现的。Formatter 描述了文本的格式。一个 formatter "
"通常由包含 :ref:`LogRecord attributes `<python:logrecord-attributes> 的 "
"Python 格式化字符串组成，不过你也可以为特定的格式来配置自定义的 formatter。"

msgid "Using logging"
msgstr "使用 logging 模块"

msgid ""
"Once you have configured your loggers, handlers, filters and formatters, you "
"need to place logging calls into your code. Using the logging framework is "
"very simple. Here's an example::"
msgstr ""
"配置好了 logger，handler，filter 和 formatter 之后，需要在代码里发起 logging "
"的调用。使用 logging 框架非常简单，下面是个例子："

msgid ""
"And that's it! Every time the ``bad_mojo`` condition is activated, an error "
"log record will be written."
msgstr "就这么简单！``bad_mojo`` 条件每次满足都会写一条 error 日志。"

msgid "Naming loggers"
msgstr "为 logger 命名"

msgid ""
"The call to :func:`logging.getLogger()` obtains (creating, if necessary) an "
"instance of a logger. The logger instance is identified by a name. This name "
"is used to identify the logger for configuration purposes."
msgstr ""
"对 :func:`logging.getLogger()` 的调用会获取（必要时会创建）一个 logger 的实"
"例。不同的 logger 实例用名字来区分。这个名字是为了在配置的时候指定 logger。"

msgid ""
"By convention, the logger name is usually ``__name__``, the name of the "
"Python module that contains the logger. This allows you to filter and handle "
"logging calls on a per-module basis. However, if you have some other way of "
"organizing your logging messages, you can provide any dot-separated name to "
"identify your logger::"
msgstr ""
"按照惯例，logger 的名字通常是包含该 logger 的 Python 模块名，即  "
"``__name__``。这样可以基于模块来过滤和处理日志请求。不过，如果你有其他的方式"
"来组织你的日志消息，可以为 logger 提供点号分割的名字来标识它："

msgid ""
"The dotted paths of logger names define a hierarchy. The ``project."
"interesting`` logger is considered to be a parent of the ``project."
"interesting.stuff`` logger; the ``project`` logger is a parent of the "
"``project.interesting`` logger."
msgstr ""
"这种 logger 的名字，用点号分隔的路径定义了一种层次结构。``project."
"interesting`` 这个 logger 是 ``project.interesting.stuff`` logger 的上级；而 "
"``project`` logger 是 ``project.interesting`` logger 的上级。"

msgid ""
"Why is the hierarchy important? Well, because loggers can be set to "
"*propagate* their logging calls to their parents. In this way, you can "
"define a single set of handlers at the root of a logger tree, and capture "
"all logging calls in the subtree of loggers. A logging handler defined in "
"the ``project`` namespace will catch all logging messages issued on the "
"``project.interesting`` and ``project.interesting.stuff`` loggers."
msgstr ""
"为什么这种层级结构是重要的呢？因为 logger 可以设置为将日志的请求*传播*给上"
"级。这样就可以在 logger 树结构的顶层定义一组单独的 handler，来捕获所有下层的"
"日志请求。在 ``project`` 命名空间中定义的 logger handler 将会捕获 ``project."
"interesting`` 和 ``project.interesting.stuff`` 这两个 logger 中的所有日志请"
"求。"

msgid ""
"This propagation can be controlled on a per-logger basis. If you don't want "
"a particular logger to propagate to its parents, you can turn off this "
"behavior."
msgstr ""
"可以基于 logger 来控制传播的行为。 如果你不希望某个 logger 传播给上级，可以关"
"闭它。"

msgid "Making logging calls"
msgstr "发起 logging 调用"

msgid ""
"The logger instance contains an entry method for each of the default log "
"levels:"
msgstr "logger 实例包含了每种默认日志级别的入口方法："

msgid "``logger.debug()``"
msgstr "``logger.debug()``"

msgid "``logger.info()``"
msgstr "``logger.info()``"

msgid "``logger.warning()``"
msgstr "``logger.warning()``"

msgid "``logger.error()``"
msgstr "``logger.error()``"

msgid "``logger.critical()``"
msgstr "``logger.critical()``"

msgid "There are two other logging calls available:"
msgstr "还有两种其他的调用方法："

msgid ""
"``logger.log()``: Manually emits a logging message with a specific log level."
msgstr "``logger.log()``：手动输出一条指定日志级别的日志消息。"

msgid ""
"``logger.exception()``: Creates an ``ERROR`` level logging message wrapping "
"the current exception stack frame."
msgstr ""
"``logger.exception()``：创建一个包含当前异常堆栈帧的 ``ERROR`` 级别日志消息。"

msgid "Configuring logging"
msgstr "日志模块的配置"

msgid ""
"Of course, it isn't enough to just put logging calls into your code. You "
"also need to configure the loggers, handlers, filters and formatters to "
"ensure that logging output is output in a useful way."
msgstr ""
"当然，仅仅在代码里调用 logging 是不够的。还需要配置 logger、handler、filter "
"和 formatter 来确保日志框架能有效地输出日志。"

msgid ""
"Python's logging library provides several techniques to configure logging, "
"ranging from a programmatic interface to configuration files. By default, "
"Django uses the :ref:`dictConfig format <logging-config-dictschema>`."
msgstr ""
"Python 的日志库提供了一些配置方法，可以使用编程接口或者配置文件。Django默认使"
"用 :ref:`dictConfig format <logging-config-dictschema>`。"

msgid ""
"In order to configure logging, you use :setting:`LOGGING` to define a "
"dictionary of logging settings. These settings describes the loggers, "
"handlers, filters and formatters that you want in your logging setup, and "
"the log levels and other properties that you want those components to have."
msgstr ""
"为了配置 logging ，用字典的格式定义一个 :setting:`LOGGING` 配置项，这些配置描"
"述了你想要的 logger、handler、filter 和 formatter，以及它们的日志级别和其他你"
"想要的属性。"

msgid ""
"By default, the :setting:`LOGGING` setting is merged with :ref:`Django's "
"default logging configuration <default-logging-configuration>` using the "
"following scheme."
msgstr ""
"默认情况下 :setting:`LOGGING` 配置和 :ref:`Django's default logging "
"configuration <default-logging-configuration>`  按照下面的方式合并在一起："

msgid ""
"If the ``disable_existing_loggers`` key in the :setting:`LOGGING` dictConfig "
"is set to ``True`` (which is the default) then all loggers from the default "
"configuration will be disabled. Disabled loggers are not the same as "
"removed; the logger will still exist, but will silently discard anything "
"logged to it, not even propagating entries to a parent logger. Thus you "
"should be very careful using ``'disable_existing_loggers': True``; it's "
"probably not what you want. Instead, you can set "
"``disable_existing_loggers`` to ``False`` and redefine some or all of the "
"default loggers; or you can set :setting:`LOGGING_CONFIG` to ``None`` and :"
"ref:`handle logging config yourself <disabling-logging-configuration>`."
msgstr ""
"如果 :setting:`LOGGING` 这个配置项中的 ``disable_existing_loggers``  被设置"
"为 ``True`` （默认就是 Ture），那么默认配置中的 logger 全部被禁用。被禁用的 "
"logger 并不是被删除了，它们仍然存在，只是静默地丢弃所有发来的日志请求，甚至不"
"会传播给上级 logger。所以你要谨慎使用 ``'disable_existing_loggers': True``；"
"这很可能不是你想要的。相反你应该把 ``disable_existing_loggers`` 设置为 "
"``False``，然后再重新定义其中的一些默认 loggers，或者你也可以将  :setting:"
"`LOGGING_CONFIG` 设置为 ``None`` 然后 :ref:`handle logging config yourself "
"<disabling-logging-configuration>`。"

msgid ""
"Logging is configured as part of the general Django ``setup()`` function. "
"Therefore, you can be certain that loggers are always ready for use in your "
"project code."
msgstr ""
"logging 被配置成了 Django  ``setup()`` 函数的一部分。因此，你可以确定的是，"
"logger 一直都可以在项目代码里使用。"

msgid ""
"The full documentation for :ref:`dictConfig format <logging-config-"
"dictschema>` is the best source of information about logging configuration "
"dictionaries. However, to give you a taste of what is possible, here are "
"several examples."
msgstr ""

msgid ""
"First, here's a simple configuration which writes all logging from the :ref:"
"`django-logger` logger to a local file::"
msgstr ""

msgid ""
"If you use this example, be sure to change the ``'filename'`` path to a "
"location that's writable by the user that's running the Django application."
msgstr ""

msgid ""
"Second, here's an example of how to make the logging system print Django's "
"logging to the console. It may be useful during local development."
msgstr ""

msgid ""
"By default, this config only sends messages of level ``INFO`` or higher to "
"the console (same as Django's default logging config, except that the "
"default only displays log records when ``DEBUG=True``). Django does not log "
"many such messages. With this config, however, you can also set the "
"environment variable ``DJANGO_LOG_LEVEL=DEBUG`` to see all of Django's debug "
"logging which is very verbose as it includes all database queries::"
msgstr ""

msgid "Finally, here's an example of a fairly complex logging setup::"
msgstr ""

msgid "This logging configuration does the following things:"
msgstr ""

msgid ""
"Identifies the configuration as being in 'dictConfig version 1' format. At "
"present, this is the only dictConfig format version."
msgstr ""

msgid "Defines two formatters:"
msgstr ""

msgid ""
"``simple``, that just outputs the log level name (e.g., ``DEBUG``) and the "
"log message."
msgstr ""

msgid ""
"The ``format`` string is a normal Python formatting string describing the "
"details that are to be output on each logging line. The full list of detail "
"that can be output can be found in :ref:`formatter-objects`."
msgstr ""

msgid ""
"``verbose``, that outputs the log level name, the log message, plus the "
"time, process, thread and module that generate the log message."
msgstr ""

msgid "Defines two filters:"
msgstr ""

msgid ""
"``project.logging.SpecialFilter``, using the alias ``special``. If this "
"filter required additional arguments, they can be provided as additional "
"keys in the filter configuration dictionary. In this case, the argument "
"``foo`` will be given a value of ``bar`` when instantiating "
"``SpecialFilter``."
msgstr ""

msgid ""
"``django.utils.log.RequireDebugTrue``, which passes on records when :setting:"
"`DEBUG` is ``True``."
msgstr ""

msgid "Defines two handlers:"
msgstr ""

msgid ""
"``console``, a :class:`~logging.StreamHandler`, which prints any ``INFO`` "
"(or higher) message to ``sys.stderr``. This handler uses the ``simple`` "
"output format."
msgstr ""

msgid ""
"``mail_admins``, an :class:`AdminEmailHandler`, which emails any ``ERROR`` "
"(or higher) message to the site :setting:`ADMINS`. This handler uses the "
"``special`` filter."
msgstr ""

msgid "Configures three loggers:"
msgstr ""

msgid "``django``, which passes all messages to the ``console`` handler."
msgstr ""

msgid ""
"``django.request``, which passes all ``ERROR`` messages to the "
"``mail_admins`` handler. In addition, this logger is marked to *not* "
"propagate messages. This means that log messages written to ``django."
"request`` will not be handled by the ``django`` logger."
msgstr ""

msgid ""
"``myproject.custom``, which passes all messages at ``INFO`` or higher that "
"also pass the ``special`` filter to two handlers -- the ``console``, and "
"``mail_admins``. This means that all ``INFO`` level messages (or higher) "
"will be printed to the console; ``ERROR`` and ``CRITICAL`` messages will "
"also be output via email."
msgstr ""

msgid "Custom logging configuration"
msgstr ""

msgid ""
"If you don't want to use Python's dictConfig format to configure your "
"logger, you can specify your own configuration scheme."
msgstr ""

msgid ""
"The :setting:`LOGGING_CONFIG` setting defines the callable that will be used "
"to configure Django's loggers. By default, it points at Python's :func:"
"`logging.config.dictConfig()` function. However, if you want to use a "
"different configuration process, you can use any other callable that takes a "
"single argument. The contents of :setting:`LOGGING` will be provided as the "
"value of that argument when logging is configured."
msgstr ""

msgid "Disabling logging configuration"
msgstr ""

msgid ""
"If you don't want to configure logging at all (or you want to manually "
"configure logging using your own approach), you can set :setting:"
"`LOGGING_CONFIG` to ``None``. This will disable the configuration process "
"for :ref:`Django's default logging <default-logging-configuration>`. Here's "
"an example that disables Django's logging configuration and then manually "
"configures logging:"
msgstr ""

msgid "settings.py"
msgstr ""

msgid ""
"Setting :setting:`LOGGING_CONFIG` to ``None`` only means that the automatic "
"configuration process is disabled, not logging itself. If you disable the "
"configuration process, Django will still make logging calls, falling back to "
"whatever default logging behavior is defined."
msgstr ""

msgid "Django's logging extensions"
msgstr ""

msgid ""
"Django provides a number of utilities to handle the unique requirements of "
"logging in Web server environment."
msgstr ""

msgid "Django provides several built-in loggers."
msgstr ""

msgid "``django``"
msgstr ""

msgid ""
"The catch-all logger for messages in the  ``django`` hierarchy. No messages "
"are posted using this name but instead using one of the loggers below."
msgstr ""

msgid "``django.request``"
msgstr ""

msgid ""
"Log messages related to the handling of requests. 5XX responses are raised "
"as ``ERROR`` messages; 4XX responses are raised as ``WARNING`` messages. "
"Requests that are logged to the ``django.security`` logger aren't logged to "
"``django.request``."
msgstr ""

msgid "Messages to this logger have the following extra context:"
msgstr ""

msgid "``status_code``: The HTTP response code associated with the request."
msgstr ""

msgid "``request``: The request object that generated the logging message."
msgstr ""

msgid "``django.server``"
msgstr ""

msgid ""
"Log messages related to the handling of requests received by the server "
"invoked by the :djadmin:`runserver` command. HTTP 5XX responses are logged "
"as ``ERROR`` messages, 4XX responses are logged as ``WARNING`` messages, and "
"everything else is logged as ``INFO``."
msgstr ""

msgid "``django.template``"
msgstr ""

msgid "Log messages related to the rendering of templates."
msgstr ""

msgid "Missing context variables are logged as ``DEBUG`` messages."
msgstr ""

msgid "``django.db.backends``"
msgstr ""

msgid ""
"Messages relating to the interaction of code with the database. For example, "
"every application-level SQL statement executed by a request is logged at the "
"``DEBUG`` level to this logger."
msgstr ""

msgid "``duration``: The time taken to execute the SQL statement."
msgstr ""

msgid "``sql``: The SQL statement that was executed."
msgstr ""

msgid "``params``: The parameters that were used in the SQL call."
msgstr ""

msgid ""
"For performance reasons, SQL logging is only enabled when ``settings.DEBUG`` "
"is set to ``True``, regardless of the logging level or handlers that are "
"installed."
msgstr ""

msgid ""
"This logging does not include framework-level initialization (e.g. ``SET "
"TIMEZONE``) or transaction management queries (e.g. ``BEGIN``, ``COMMIT``, "
"and ``ROLLBACK``). Turn on query logging in your database if you wish to "
"view all database queries."
msgstr ""

msgid "``django.security.*``"
msgstr ""

msgid ""
"The security loggers will receive messages on any occurrence of :exc:"
"`~django.core.exceptions.SuspiciousOperation` and other security-related "
"errors. There is a sub-logger for each subtype of security error, including "
"all ``SuspiciousOperation``\\s. The level of the log event depends on where "
"the exception is handled.  Most occurrences are logged as a warning, while "
"any ``SuspiciousOperation`` that reaches the WSGI handler will be logged as "
"an error. For example, when an HTTP ``Host`` header is included in a request "
"from a client that does not match :setting:`ALLOWED_HOSTS`, Django will "
"return a 400 response, and an error message will be logged to the ``django."
"security.DisallowedHost`` logger."
msgstr ""

msgid ""
"These log events will reach the ``django`` logger by default, which mails "
"error events to admins when ``DEBUG=False``. Requests resulting in a 400 "
"response due to a ``SuspiciousOperation`` will not be logged to the ``django."
"request`` logger, but only to the ``django.security`` logger."
msgstr ""

msgid ""
"To silence a particular type of ``SuspiciousOperation``, you can override "
"that specific logger following this example:"
msgstr ""

msgid ""
"Other ``django.security`` loggers not based on ``SuspiciousOperation`` are:"
msgstr ""

msgid ""
"``django.security.csrf``: For :ref:`CSRF failures <csrf-rejected-requests>`."
msgstr ""

msgid "``django.db.backends.schema``"
msgstr ""

msgid ""
"Logs the SQL queries that are executed during schema changes to the database "
"by the :doc:`migrations framework </topics/migrations>`. Note that it won't "
"log the queries executed by :class:`~django.db.migrations.operations."
"RunPython`. Messages to this logger have ``params`` and ``sql`` in their "
"extra context (but unlike ``django.db.backends``, not duration). The values "
"have the same meaning as explained in :ref:`django-db-logger`."
msgstr ""

msgid ""
"Django provides one log handler in addition to those provided by the Python "
"logging module."
msgstr ""

msgid ""
"This handler sends an email to the site :setting:`ADMINS` for each log "
"message it receives."
msgstr ""

msgid ""
"If the log record contains a ``request`` attribute, the full details of the "
"request will be included in the email. The email subject will include the "
"phrase \"internal IP\" if the client's IP address is in the :setting:"
"`INTERNAL_IPS` setting; if not, it will include \"EXTERNAL IP\"."
msgstr ""

msgid ""
"If the log record contains stack trace information, that stack trace will be "
"included in the email."
msgstr ""

msgid ""
"The ``include_html`` argument of ``AdminEmailHandler`` is used to control "
"whether the traceback email includes an HTML attachment containing the full "
"content of the debug Web page that would have been produced if :setting:"
"`DEBUG` were ``True``. To set this value in your configuration, include it "
"in the handler definition for ``django.utils.log.AdminEmailHandler``, like "
"this:"
msgstr ""

msgid ""
"Note that this HTML version of the email contains a full traceback, with "
"names and values of local variables at each level of the stack, plus the "
"values of your Django settings. This information is potentially very "
"sensitive, and you may not want to send it over email. Consider using "
"something such as `Sentry`_ to get the best of both worlds -- the rich "
"information of full tracebacks plus the security of *not* sending the "
"information over email. You may also explicitly designate certain sensitive "
"information to be filtered out of error reports -- learn more on :ref:"
"`Filtering error reports<filtering-error-reports>`."
msgstr ""

msgid ""
"By setting the ``email_backend`` argument of ``AdminEmailHandler``, the :ref:"
"`email backend <topic-email-backends>` that is being used by the handler can "
"be overridden, like this:"
msgstr ""

msgid ""
"By default, an instance of the email backend specified in :setting:"
"`EMAIL_BACKEND` will be used."
msgstr ""

msgid ""
"Sends emails to admin users. To customize this behavior, you can subclass "
"the :class:`~django.utils.log.AdminEmailHandler` class and override this "
"method."
msgstr ""

msgid ""
"Django provides some log filters in addition to those provided by the Python "
"logging module."
msgstr ""

msgid ""
"This filter accepts a callback function (which should accept a single "
"argument, the record to be logged), and calls it for each record that passes "
"through the filter. Handling of that record will not proceed if the callback "
"returns False."
msgstr ""

msgid ""
"For instance, to filter out :exc:`~django.http.UnreadablePostError` (raised "
"when a user cancels an upload) from the admin emails, you would create a "
"filter function::"
msgstr ""

msgid "and then add it to your logging config:"
msgstr ""

msgid "This filter will only pass on records when settings.DEBUG is False."
msgstr ""

msgid ""
"This filter is used as follows in the default :setting:`LOGGING` "
"configuration to ensure that the :class:`AdminEmailHandler` only sends error "
"emails to admins when :setting:`DEBUG` is ``False``:"
msgstr ""

msgid ""
"This filter is similar to :class:`RequireDebugFalse`, except that records "
"are passed only when :setting:`DEBUG` is ``True``."
msgstr ""

msgid "Django's default logging configuration"
msgstr ""

msgid "By default, Django configures the following logging:"
msgstr ""

msgid "When :setting:`DEBUG` is ``True``:"
msgstr ""

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``) at the ``INFO`` level or higher to the console."
msgstr ""

msgid "When :setting:`DEBUG` is ``False``:"
msgstr ""

msgid ""
"The ``django`` logger sends messages in the ``django`` hierarchy (except "
"``django.server``)  with ``ERROR`` or ``CRITICAL`` level to :class:"
"`AdminEmailHandler`."
msgstr ""

msgid "Independent of the value of :setting:`DEBUG`:"
msgstr ""

msgid ""
"The :ref:`django-server-logger` logger sends messages at the ``INFO`` level "
"or higher to the console."
msgstr ""

msgid ""
"All loggers except :ref:`django-server-logger` propagate logging to their "
"parents, up to the root ``django`` logger. The ``console`` and "
"``mail_admins`` handlers are attached to the root logger to provide the "
"behavior described above."
msgstr ""

msgid ""
"See also :ref:`Configuring logging <configuring-logging>` to learn how you "
"can complement or replace this default logging configuration."
msgstr ""

msgid "Migrations"
msgstr ""

msgid ""
"Migrations are Django's way of propagating changes you make to your models "
"(adding a field, deleting a model, etc.) into your database schema. They're "
"designed to be mostly automatic, but you'll need to know when to make "
"migrations, when to run them, and the common problems you might run into."
msgstr ""

msgid "The Commands"
msgstr ""

msgid ""
"There are several commands which you will use to interact with migrations "
"and Django's handling of database schema:"
msgstr ""

msgid ""
":djadmin:`migrate`, which is responsible for applying and unapplying "
"migrations."
msgstr ""

msgid ""
":djadmin:`makemigrations`, which is responsible for creating new migrations "
"based on the changes you have made to your models."
msgstr ""

msgid ""
":djadmin:`sqlmigrate`, which displays the SQL statements for a migration."
msgstr ""

msgid ""
":djadmin:`showmigrations`, which lists a project's migrations and their "
"status."
msgstr ""

msgid ""
"You should think of migrations as a version control system for your database "
"schema. ``makemigrations`` is responsible for packaging up your model "
"changes into individual migration files - analogous to commits - and "
"``migrate`` is responsible for applying those to your database."
msgstr ""

msgid ""
"The migration files for each app live in a \"migrations\" directory inside "
"of that app, and are designed to be committed to, and distributed as part "
"of, its codebase. You should be making them once on your development machine "
"and then running the same migrations on your colleagues' machines, your "
"staging machines, and eventually your production machines."
msgstr ""

msgid ""
"It is possible to override the name of the package which contains the "
"migrations on a per-app basis by modifying the :setting:`MIGRATION_MODULES` "
"setting."
msgstr ""

msgid ""
"Migrations will run the same way on the same dataset and produce consistent "
"results, meaning that what you see in development and staging is, under the "
"same circumstances, exactly what will happen in production."
msgstr ""

msgid ""
"Django will make migrations for any change to your models or fields - even "
"options that don't affect the database - as the only way it can reconstruct "
"a field correctly is to have all the changes in the history, and you might "
"need those options in some data migrations later on (for example, if you've "
"set custom validators)."
msgstr ""

msgid "Backend Support"
msgstr ""

msgid ""
"Migrations are supported on all backends that Django ships with, as well as "
"any third-party backends if they have programmed in support for schema "
"alteration (done via the :doc:`SchemaEditor </ref/schema-editor>` class)."
msgstr ""

msgid ""
"However, some databases are more capable than others when it comes to schema "
"migrations; some of the caveats are covered below."
msgstr ""

msgid ""
"PostgreSQL is the most capable of all the databases here in terms of schema "
"support."
msgstr ""

msgid ""
"The only caveat is that prior to PostgreSQL 11, adding columns with default "
"values causes a full rewrite of the table, for a time proportional to its "
"size. For this reason, it's recommended you always create new columns with "
"``null=True``, as this way they will be added immediately."
msgstr ""

msgid "MySQL"
msgstr "MySQL"

msgid ""
"MySQL lacks support for transactions around schema alteration operations, "
"meaning that if a migration fails to apply you will have to manually unpick "
"the changes in order to try again (it's impossible to roll back to an "
"earlier point)."
msgstr ""

msgid ""
"In addition, MySQL will fully rewrite tables for almost every schema "
"operation and generally takes a time proportional to the number of rows in "
"the table to add or remove columns. On slower hardware this can be worse "
"than a minute per million rows - adding a few columns to a table with just a "
"few million rows could lock your site up for over ten minutes."
msgstr ""

msgid ""
"Finally, MySQL has relatively small limits on name lengths for columns, "
"tables and indexes, as well as a limit on the combined size of all columns "
"an index covers. This means that indexes that are possible on other backends "
"will fail to be created under MySQL."
msgstr ""

msgid "SQLite"
msgstr "SQLite"

msgid ""
"SQLite has very little built-in schema alteration support, and so Django "
"attempts to emulate it by:"
msgstr ""

msgid "Creating a new table with the new schema"
msgstr ""

msgid "Copying the data across"
msgstr ""

msgid "Dropping the old table"
msgstr ""

msgid "Renaming the new table to match the original name"
msgstr ""

msgid ""
"This process generally works well, but it can be slow and occasionally "
"buggy. It is not recommended that you run and migrate SQLite in a production "
"environment unless you are very aware of the risks and its limitations; the "
"support Django ships with is designed to allow developers to use SQLite on "
"their local machines to develop less complex Django projects without the "
"need for a full database."
msgstr ""

msgid "Workflow"
msgstr ""

msgid ""
"Working with migrations is simple. Make changes to your models - say, add a "
"field and remove a model - and then run :djadmin:`makemigrations`::"
msgstr ""

msgid ""
"Your models will be scanned and compared to the versions currently contained "
"in your migration files, and then a new set of migrations will be written "
"out. Make sure to read the output to see what ``makemigrations`` thinks you "
"have changed - it's not perfect, and for complex changes it might not be "
"detecting what you expect."
msgstr ""

msgid ""
"Once you have your new migration files, you should apply them to your "
"database to make sure they work as expected::"
msgstr ""

msgid ""
"Once the migration is applied, commit the migration and the models change to "
"your version control system as a single commit - that way, when other "
"developers (or your production servers) check out the code, they'll get both "
"the changes to your models and the accompanying migration at the same time."
msgstr ""

msgid ""
"If you want to give the migration(s) a meaningful name instead of a "
"generated one, you can use the :option:`makemigrations --name` option::"
msgstr ""

msgid "Version control"
msgstr ""

msgid ""
"Because migrations are stored in version control, you'll occasionally come "
"across situations where you and another developer have both committed a "
"migration to the same app at the same time, resulting in two migrations with "
"the same number."
msgstr ""

msgid ""
"Don't worry - the numbers are just there for developers' reference, Django "
"just cares that each migration has a different name. Migrations specify "
"which other migrations they depend on - including earlier migrations in the "
"same app - in the file, so it's possible to detect when there's two new "
"migrations for the same app that aren't ordered."
msgstr ""

msgid ""
"When this happens, Django will prompt you and give you some options. If it "
"thinks it's safe enough, it will offer to automatically linearize the two "
"migrations for you. If not, you'll have to go in and modify the migrations "
"yourself - don't worry, this isn't difficult, and is explained more in :ref:"
"`migration-files` below."
msgstr ""

msgid "Dependencies"
msgstr ""

msgid ""
"While migrations are per-app, the tables and relationships implied by your "
"models are too complex to be created for just one app at a time. When you "
"make a migration that requires something else to run - for example, you add "
"a ``ForeignKey`` in your ``books`` app to your ``authors`` app - the "
"resulting migration will contain a dependency on a migration in ``authors``."
msgstr ""

msgid ""
"This means that when you run the migrations, the ``authors`` migration runs "
"first and creates the table the ``ForeignKey`` references, and then the "
"migration that makes the ``ForeignKey`` column runs afterwards and creates "
"the constraint. If this didn't happen, the migration would try to create the "
"``ForeignKey`` column without the table it's referencing existing and your "
"database would throw an error."
msgstr ""

msgid ""
"This dependency behavior affects most migration operations where you "
"restrict to a single app. Restricting to a single app (either in "
"``makemigrations`` or ``migrate``) is a best-efforts promise, and not a "
"guarantee; any other apps that need to be used to get dependencies correct "
"will be."
msgstr ""

msgid "Migration files"
msgstr ""

msgid ""
"Migrations are stored as an on-disk format, referred to here as \"migration "
"files\". These files are actually just normal Python files with an agreed-"
"upon object layout, written in a declarative style."
msgstr ""

msgid "A basic migration file looks like this::"
msgstr ""

msgid ""
"What Django looks for when it loads a migration file (as a Python module) is "
"a subclass of ``django.db.migrations.Migration`` called ``Migration``. It "
"then inspects this object for four attributes, only two of which are used "
"most of the time:"
msgstr ""

msgid "``dependencies``, a list of migrations this one depends on."
msgstr ""

msgid ""
"``operations``, a list of ``Operation`` classes that define what this "
"migration does."
msgstr ""

msgid ""
"The operations are the key; they are a set of declarative instructions which "
"tell Django what schema changes need to be made. Django scans them and "
"builds an in-memory representation of all of the schema changes to all apps, "
"and uses this to generate the SQL which makes the schema changes."
msgstr ""

msgid ""
"That in-memory structure is also used to work out what the differences are "
"between your models and the current state of your migrations; Django runs "
"through all the changes, in order, on an in-memory set of models to come up "
"with the state of your models last time you ran ``makemigrations``. It then "
"uses these models to compare against the ones in your ``models.py`` files to "
"work out what you have changed."
msgstr ""

msgid ""
"You should rarely, if ever, need to edit migration files by hand, but it's "
"entirely possible to write them manually if you need to. Some of the more "
"complex operations are not autodetectable and are only available via a hand-"
"written migration, so don't be scared about editing them if you have to."
msgstr ""

msgid "Custom fields"
msgstr ""

msgid ""
"You can't modify the number of positional arguments in an already migrated "
"custom field without raising a ``TypeError``. The old migration will call "
"the modified ``__init__`` method with the old signature. So if you need a "
"new argument, please create a keyword argument and add something like "
"``assert 'argument_name' in kwargs`` in the constructor."
msgstr ""

msgid "Model managers"
msgstr ""

msgid ""
"You can optionally serialize managers into migrations and have them "
"available in :class:`~django.db.migrations.operations.RunPython` operations. "
"This is done by defining a ``use_in_migrations`` attribute on the manager "
"class::"
msgstr ""

msgid ""
"If you are using the :meth:`~django.db.models.from_queryset` function to "
"dynamically generate a manager class, you need to inherit from the generated "
"class to make it importable::"
msgstr ""

msgid ""
"Please refer to the notes about :ref:`historical-models` in migrations to "
"see the implications that come along."
msgstr ""

msgid "Initial migrations"
msgstr ""

msgid ""
"The \"initial migrations\" for an app are the migrations that create the "
"first version of that app's tables. Usually an app will have just one "
"initial migration, but in some cases of complex model interdependencies it "
"may have two or more."
msgstr ""

msgid ""
"Initial migrations are marked with an ``initial = True`` class attribute on "
"the migration class. If an ``initial`` class attribute isn't found, a "
"migration will be considered \"initial\" if it is the first migration in the "
"app (i.e. if it has no dependencies on any other migration in the same app)."
msgstr ""

msgid ""
"When the :option:`migrate --fake-initial` option is used, these initial "
"migrations are treated specially. For an initial migration that creates one "
"or more tables (``CreateModel`` operation), Django checks that all of those "
"tables already exist in the database and fake-applies the migration if so. "
"Similarly, for an initial migration that adds one or more fields "
"(``AddField`` operation), Django checks that all of the respective columns "
"already exist in the database and fake-applies the migration if so. Without "
"``--fake-initial``, initial migrations are treated no differently from any "
"other migration."
msgstr ""

msgid "History consistency"
msgstr ""

msgid ""
"As previously discussed, you may need to linearize migrations manually when "
"two development branches are joined. While editing migration dependencies, "
"you can inadvertently create an inconsistent history state where a migration "
"has been applied but some of its dependencies haven't. This is a strong "
"indication that the dependencies are incorrect, so Django will refuse to run "
"migrations or make new migrations until it's fixed. When using multiple "
"databases, you can use the :meth:`allow_migrate` method of :ref:`database "
"routers <topics-db-multi-db-routing>` to control which databases :djadmin:"
"`makemigrations` checks for consistent history."
msgstr ""

msgid "Adding migrations to apps"
msgstr ""

msgid ""
"Adding migrations to new apps is straightforward - they come preconfigured "
"to accept migrations, and so just run :djadmin:`makemigrations` once you've "
"made some changes."
msgstr ""

msgid ""
"If your app already has models and database tables, and doesn't have "
"migrations yet (for example, you created it against a previous Django "
"version), you'll need to convert it to use migrations; this is a simple "
"process::"
msgstr ""

msgid ""
"This will make a new initial migration for your app. Now, run ``python "
"manage.py migrate --fake-initial``, and Django will detect that you have an "
"initial migration *and* that the tables it wants to create already exist, "
"and will mark the migration as already applied. (Without the :option:"
"`migrate --fake-initial` flag, the command would error out because the "
"tables it wants to create already exist.)"
msgstr ""

msgid "Note that this only works given two things:"
msgstr ""

msgid ""
"You have not changed your models since you made their tables. For migrations "
"to work, you must make the initial migration *first* and then make changes, "
"as Django compares changes against migration files, not the database."
msgstr ""

msgid ""
"You have not manually edited your database - Django won't be able to detect "
"that your database doesn't match your models, you'll just get errors when "
"migrations try to modify those tables."
msgstr ""

msgid "Historical models"
msgstr ""

msgid ""
"When you run migrations, Django is working from historical versions of your "
"models stored in the migration files. If you write Python code using the :"
"class:`~django.db.migrations.operations.RunPython` operation, or if you have "
"``allow_migrate`` methods on your database routers, you **need to use** "
"these historical model versions rather than importing them directly."
msgstr ""

msgid ""
"If you import models directly rather than using the historical models, your "
"migrations *may work initially* but will fail in the future when you try to "
"re-run old migrations (commonly, when you set up a new installation and run "
"through all the migrations to set up the database)."
msgstr ""

msgid ""
"This means that historical model problems may not be immediately obvious. If "
"you run into this kind of failure, it's OK to edit the migration to use the "
"historical models rather than direct imports and commit those changes."
msgstr ""

msgid ""
"Because it's impossible to serialize arbitrary Python code, these historical "
"models will not have any custom methods that you have defined. They will, "
"however, have the same fields, relationships, managers (limited to those "
"with ``use_in_migrations = True``) and ``Meta`` options (also versioned, so "
"they may be different from your current ones)."
msgstr ""

msgid ""
"This means that you will NOT have custom ``save()`` methods called on "
"objects when you access them in migrations, and you will NOT have any custom "
"constructors or instance methods. Plan appropriately!"
msgstr ""

msgid ""
"References to functions in field options such as ``upload_to`` and "
"``limit_choices_to`` and model manager declarations with managers having "
"``use_in_migrations = True`` are serialized in migrations, so the functions "
"and classes will need to be kept around for as long as there is a migration "
"referencing them. Any :doc:`custom model fields </howto/custom-model-"
"fields>` will also need to be kept, since these are imported directly by "
"migrations."
msgstr ""

msgid ""
"In addition, the base classes of the model are just stored as pointers, so "
"you must always keep base classes around for as long as there is a migration "
"that contains a reference to them. On the plus side, methods and managers "
"from these base classes inherit normally, so if you absolutely need access "
"to these you can opt to move them into a superclass."
msgstr ""

msgid ""
"To remove old references, you can :ref:`squash migrations <migration-"
"squashing>` or, if there aren't many references, copy them into the "
"migration files."
msgstr ""

msgid "Considerations when removing model fields"
msgstr ""

msgid ""
"Similar to the \"references to historical functions\" considerations "
"described in the previous section, removing custom model fields from your "
"project or third-party app will cause a problem if they are referenced in "
"old migrations."
msgstr ""

msgid ""
"To help with this situation, Django provides some model field attributes to "
"assist with model field deprecation using the :doc:`system checks framework "
"</topics/checks>`."
msgstr ""

msgid ""
"Add the ``system_check_deprecated_details`` attribute to your model field "
"similar to the following::"
msgstr ""

msgid ""
"After a deprecation period of your choosing (two or three feature releases "
"for fields in Django itself), change the ``system_check_deprecated_details`` "
"attribute to ``system_check_removed_details`` and update the dictionary "
"similar to::"
msgstr ""

msgid ""
"You should keep the field's methods that are required for it to operate in "
"database migrations such as ``__init__()``, ``deconstruct()``, and "
"``get_internal_type()``. Keep this stub field for as long as any migrations "
"which reference the field exist. For example, after squashing migrations and "
"removing the old ones, you should be able to remove the field completely."
msgstr ""

msgid "Data Migrations"
msgstr ""

msgid ""
"As well as changing the database schema, you can also use migrations to "
"change the data in the database itself, in conjunction with the schema if "
"you want."
msgstr ""

msgid ""
"Migrations that alter data are usually called \"data migrations\"; they're "
"best written as separate migrations, sitting alongside your schema "
"migrations."
msgstr ""

msgid ""
"Django can't automatically generate data migrations for you, as it does with "
"schema migrations, but it's not very hard to write them. Migration files in "
"Django are made up of :doc:`Operations </ref/migration-operations>`, and the "
"main operation you use for data migrations is :class:`~django.db.migrations."
"operations.RunPython`."
msgstr ""

msgid ""
"To start, make an empty migration file you can work from (Django will put "
"the file in the right place, suggest a name, and add dependencies for you)::"
msgstr ""

msgid "Then, open up the file; it should look something like this::"
msgstr ""

msgid ""
"Now, all you need to do is create a new function and have :class:`~django.db."
"migrations.operations.RunPython` use it. :class:`~django.db.migrations."
"operations.RunPython` expects a callable as its argument which takes two "
"arguments - the first is an :doc:`app registry </ref/applications/>` that "
"has the historical versions of all your models loaded into it to match where "
"in your history the migration sits, and the second is a :doc:`SchemaEditor </"
"ref/schema-editor>`, which you can use to manually effect database schema "
"changes (but beware, doing this can confuse the migration autodetector!)"
msgstr ""

msgid ""
"Let's write a simple migration that populates our new ``name`` field with "
"the combined values of ``first_name`` and ``last_name`` (we've come to our "
"senses and realized that not everyone has first and last names). All we need "
"to do is use the historical model and iterate over the rows::"
msgstr ""

msgid ""
"Once that's done, we can just run ``python manage.py migrate`` as normal and "
"the data migration will run in place alongside other migrations."
msgstr ""

msgid ""
"You can pass a second callable to :class:`~django.db.migrations.operations."
"RunPython` to run whatever logic you want executed when migrating backwards. "
"If this callable is omitted, migrating backwards will raise an exception."
msgstr ""

msgid "Accessing models from other apps"
msgstr ""

msgid ""
"When writing a ``RunPython`` function that uses models from apps other than "
"the one in which the migration is located, the migration's ``dependencies`` "
"attribute should include the latest migration of each app that is involved, "
"otherwise you may get an error similar to: ``LookupError: No installed app "
"with label 'myappname'`` when you try to retrieve the model in the "
"``RunPython`` function using ``apps.get_model()``."
msgstr ""

msgid ""
"In the following example, we have a migration in ``app1`` which needs to use "
"models in ``app2``. We aren't concerned with the details of ``move_m1`` "
"other than the fact it will need to access models from both apps. Therefore "
"we've added a dependency that specifies the last migration of ``app2``::"
msgstr ""

msgid "More advanced migrations"
msgstr ""

msgid ""
"If you're interested in the more advanced migration operations, or want to "
"be able to write your own, see the :doc:`migration operations reference </"
"ref/migration-operations>` and the \"how-to\" on :doc:`writing migrations </"
"howto/writing-migrations>`."
msgstr ""

msgid "Squashing migrations"
msgstr ""

msgid ""
"You are encouraged to make migrations freely and not worry about how many "
"you have; the migration code is optimized to deal with hundreds at a time "
"without much slowdown. However, eventually you will want to move back from "
"having several hundred migrations to just a few, and that's where squashing "
"comes in."
msgstr ""

msgid ""
"Squashing is the act of reducing an existing set of many migrations down to "
"one (or sometimes a few) migrations which still represent the same changes."
msgstr ""

msgid ""
"Django does this by taking all of your existing migrations, extracting their "
"``Operation``\\s and putting them all in sequence, and then running an "
"optimizer over them to try and reduce the length of the list - for example, "
"it knows that :class:`~django.db.migrations.operations.CreateModel` and :"
"class:`~django.db.migrations.operations.DeleteModel` cancel each other out, "
"and it knows that :class:`~django.db.migrations.operations.AddField` can be "
"rolled into :class:`~django.db.migrations.operations.CreateModel`."
msgstr ""

msgid ""
"Once the operation sequence has been reduced as much as possible - the "
"amount possible depends on how closely intertwined your models are and if "
"you have any :class:`~django.db.migrations.operations.RunSQL` or :class:"
"`~django.db.migrations.operations.RunPython` operations (which can't be "
"optimized through unless they are marked as ``elidable``) - Django will then "
"write it back out into a new set of migration files."
msgstr ""

msgid ""
"These files are marked to say they replace the previously-squashed "
"migrations, so they can coexist with the old migration files, and Django "
"will intelligently switch between them depending where you are in the "
"history. If you're still part-way through the set of migrations that you "
"squashed, it will keep using them until it hits the end and then switch to "
"the squashed history, while new installs will just use the new squashed "
"migration and skip all the old ones."
msgstr ""

msgid ""
"This enables you to squash and not mess up systems currently in production "
"that aren't fully up-to-date yet. The recommended process is to squash, "
"keeping the old files, commit and release, wait until all systems are "
"upgraded with the new release (or if you're a third-party project, just "
"ensure your users upgrade releases in order without skipping any), and then "
"remove the old files, commit and do a second release."
msgstr ""

msgid ""
"The command that backs all this is :djadmin:`squashmigrations` - just pass "
"it the app label and migration name you want to squash up to, and it'll get "
"to work::"
msgstr ""

msgid ""
"Use the :option:`squashmigrations --squashed-name` option if you want to set "
"the name of the squashed migration rather than use an autogenerated one."
msgstr ""

msgid ""
"Note that model interdependencies in Django can get very complex, and "
"squashing may result in migrations that do not run; either mis-optimized (in "
"which case you can try again with ``--no-optimize``, though you should also "
"report an issue), or with a ``CircularDependencyError``, in which case you "
"can manually resolve it."
msgstr ""

msgid ""
"To manually resolve a ``CircularDependencyError``, break out one of the "
"ForeignKeys in the circular dependency loop into a separate migration, and "
"move the dependency on the other app with it. If you're unsure, see how :"
"djadmin:`makemigrations` deals with the problem when asked to create brand "
"new migrations from your models. In a future release of Django, :djadmin:"
"`squashmigrations` will be updated to attempt to resolve these errors itself."
msgstr ""

msgid ""
"Once you've squashed your migration, you should then commit it alongside the "
"migrations it replaces and distribute this change to all running instances "
"of your application, making sure that they run ``migrate`` to store the "
"change in their database."
msgstr ""

msgid ""
"You must then transition the squashed migration to a normal migration by:"
msgstr ""

msgid "Deleting all the migration files it replaces."
msgstr ""

msgid ""
"Updating all migrations that depend on the deleted migrations to depend on "
"the squashed migration instead."
msgstr ""

msgid ""
"Removing the ``replaces`` attribute in the ``Migration`` class of the "
"squashed migration (this is how Django tells that it is a squashed "
"migration)."
msgstr ""

msgid ""
"Once you've squashed a migration, you should not then re-squash that "
"squashed migration until you have fully transitioned it to a normal "
"migration."
msgstr ""

msgid "Serializing values"
msgstr ""

msgid ""
"Migrations are just Python files containing the old definitions of your "
"models - thus, to write them, Django must take the current state of your "
"models and serialize them out into a file."
msgstr ""

msgid ""
"While Django can serialize most things, there are some things that we just "
"can't serialize out into a valid Python representation - there's no Python "
"standard for how a value can be turned back into code (``repr()`` only works "
"for basic values, and doesn't specify import paths)."
msgstr ""

msgid "Django can serialize the following:"
msgstr ""

msgid "``int``, ``float``, ``bool``, ``str``, ``bytes``, ``None``"
msgstr ""

msgid "``list``, ``set``, ``tuple``, ``dict``"
msgstr ""

msgid ""
"``datetime.date``, ``datetime.time``, and ``datetime.datetime`` instances "
"(include those that are timezone-aware)"
msgstr ""

msgid "``decimal.Decimal`` instances"
msgstr ""

msgid "``enum.Enum`` instances"
msgstr ""

msgid "``uuid.UUID`` instances"
msgstr ""

msgid ""
":func:`functools.partial` and :class:`functools.partialmethod` instances "
"which have serializable ``func``, ``args``, and ``keywords`` values."
msgstr ""

msgid "``LazyObject`` instances which wrap a serializable value."
msgstr ""

msgid "Any Django field"
msgstr ""

msgid ""
"Any function or method reference (e.g. ``datetime.datetime.today``) (must be "
"in module's top-level scope)"
msgstr ""

msgid "Unbound methods used from within the class body"
msgstr ""

msgid "Any class reference (must be in module's top-level scope)"
msgstr ""

msgid ""
"Anything with a custom ``deconstruct()`` method (:ref:`see below <custom-"
"deconstruct-method>`)"
msgstr ""

msgid "Serialization support for :class:`functools.partialmethod` was added."
msgstr ""

msgid "Django cannot serialize:"
msgstr ""

msgid "Nested classes"
msgstr ""

msgid "Arbitrary class instances (e.g. ``MyClass(4.3, 5.7)``)"
msgstr ""

msgid "Lambdas"
msgstr ""

msgid "Adding a ``deconstruct()`` method"
msgstr ""

msgid ""
"You can let Django serialize your own custom class instances by giving the "
"class a ``deconstruct()`` method. It takes no arguments, and should return a "
"tuple of three things ``(path, args, kwargs)``:"
msgstr ""

msgid ""
"``path`` should be the Python path to the class, with the class name "
"included as the last part (for example, ``myapp.custom_things.MyClass``). If "
"your class is not available at the top level of a module it is not "
"serializable."
msgstr ""

msgid ""
"``args`` should be a list of positional arguments to pass to your class' "
"``__init__`` method. Everything in this list should itself be serializable."
msgstr ""

msgid ""
"``kwargs`` should be a dict of keyword arguments to pass to your class' "
"``__init__`` method. Every value should itself be serializable."
msgstr ""

msgid ""
"This return value is different from the ``deconstruct()`` method :ref:`for "
"custom fields <custom-field-deconstruct-method>` which returns a tuple of "
"four items."
msgstr ""

msgid ""
"Django will write out the value as an instantiation of your class with the "
"given arguments, similar to the way it writes out references to Django "
"fields."
msgstr ""

msgid ""
"To prevent a new migration from being created each time :djadmin:"
"`makemigrations` is run, you should also add a ``__eq__()`` method to the "
"decorated class. This function will be called by Django's migration "
"framework to detect changes between states."
msgstr ""

msgid ""
"As long as all of the arguments to your class' constructor are themselves "
"serializable, you can use the ``@deconstructible`` class decorator from "
"``django.utils.deconstruct`` to add the ``deconstruct()`` method::"
msgstr ""

msgid ""
"The decorator adds logic to capture and preserve the arguments on their way "
"into your constructor, and then returns those arguments exactly when "
"deconstruct() is called."
msgstr ""

msgid "Supporting multiple Django versions"
msgstr ""

msgid ""
"If you are the maintainer of a third-party app with models, you may need to "
"ship migrations that support multiple Django versions. In this case, you "
"should always run :djadmin:`makemigrations` **with the lowest Django version "
"you wish to support**."
msgstr ""

msgid ""
"The migrations system will maintain backwards-compatibility according to the "
"same policy as the rest of Django, so migration files generated on Django X."
"Y should run unchanged on Django X.Y+1. The migrations system does not "
"promise forwards-compatibility, however. New features may be added, and "
"migration files generated with newer versions of Django may not work on "
"older versions."
msgstr ""

msgid ":doc:`The Migrations Operations Reference </ref/migration-operations>`"
msgstr ""

msgid ""
"Covers the schema operations API, special operations, and writing your own "
"operations."
msgstr ""

msgid ":doc:`The Writing Migrations \"how-to\" </howto/writing-migrations>`"
msgstr ""

msgid ""
"Explains how to structure and write database migrations for different "
"scenarios you might encounter."
msgstr ""

msgid "Pagination"
msgstr "分页"

msgid ""
"Django provides a few classes that help you manage paginated data -- that "
"is, data that's split across several pages, with \"Previous/Next\" links. "
"These classes live in :file:`django/core/paginator.py`."
msgstr ""

msgid ""
"Give :class:`Paginator` a list of objects, plus the number of items you'd "
"like to have on each page, and it gives you methods for accessing the items "
"for each page::"
msgstr ""

msgid ""
"Note that you can give ``Paginator`` a list/tuple, a Django ``QuerySet``, or "
"any other object with a ``count()`` or ``__len__()`` method. When "
"determining the number of objects contained in the passed object, "
"``Paginator`` will first try calling ``count()``, then fallback to using "
"``len()`` if the passed object has no ``count()`` method. This allows "
"objects such as Django's ``QuerySet`` to use a more efficient ``count()`` "
"method when available."
msgstr ""

msgid "Using ``Paginator`` in a view"
msgstr "在视图中使用 ``Paginator`` "

msgid ""
"Here's a slightly more complex example using :class:`Paginator` in a view to "
"paginate a queryset. We give both the view and the accompanying template to "
"show how you can display the results. This example assumes you have a "
"``Contacts`` model that has already been imported."
msgstr ""

msgid "The view function looks like this::"
msgstr ""

msgid ""
"In the template :file:`list.html`, you'll want to include navigation between "
"pages along with any interesting information from the objects themselves:"
msgstr ""

msgid "``Paginator`` objects"
msgstr "``Paginator`` 对象"

msgid "The :class:`Paginator` class has this constructor:"
msgstr ":class:`Paginator` 类的构造方法是:"

msgid "``object_list``"
msgstr ""

msgid ""
"A list, tuple, ``QuerySet``, or other sliceable object with a ``count()`` or "
"``__len__()`` method. For consistent pagination, ``QuerySet``\\s should be "
"ordered, e.g. with an :meth:`~django.db.models.query.QuerySet.order_by` "
"clause or with a default :attr:`~django.db.models.Options.ordering` on the "
"model."
msgstr ""

msgid "Performance issues paginating large ``QuerySet``\\s"
msgstr ""

msgid ""
"If you're using a ``QuerySet`` with a very large number of items, requesting "
"high page numbers might be slow on some databases, because the resulting "
"``LIMIT``/``OFFSET`` query needs to count the number of ``OFFSET`` records "
"which takes longer as the page number gets higher."
msgstr ""

msgid "``per_page``"
msgstr ""

msgid ""
"The maximum number of items to include on a page, not including orphans (see "
"the ``orphans`` optional argument below)."
msgstr ""

msgid "``orphans``"
msgstr ""

msgid ""
"Use this when you don't want to have a last page with very few items. If the "
"last page would normally have a number of items less than or equal to "
"``orphans``, then those items will be added to the previous page (which "
"becomes the last page) instead of leaving the items on a page by themselves. "
"For example, with 23 items, ``per_page=10``, and ``orphans=3``, there will "
"be two pages; the first page with 10 items and the second (and last) page "
"with 13 items. ``orphans`` defaults to zero, which means pages are never "
"combined and the last page may have one item."
msgstr ""

msgid "``allow_empty_first_page``"
msgstr ""

msgid ""
"Whether or not the first page is allowed to be empty.  If ``False`` and "
"``object_list`` is  empty, then an ``EmptyPage`` error will be raised."
msgstr ""

msgid "Methods"
msgstr "方法"

msgid ""
"Returns a :class:`Page` object with the given 1-based index, while also "
"handling out of range and invalid page numbers."
msgstr ""

msgid ""
"If the page isn't a number, it returns the first page. If the page number is "
"negative or greater than the number of pages, it returns the last page."
msgstr ""

msgid ""
"It raises an exception (:exc:`EmptyPage`) only if you specify "
"``Paginator(..., allow_empty_first_page=False)`` and the ``object_list`` is "
"empty."
msgstr ""

msgid ""
"Returns a :class:`Page` object with the given 1-based index. Raises :exc:"
"`InvalidPage` if the given page number doesn't exist."
msgstr ""

msgid "Attributes"
msgstr "属性"

msgid "The total number of objects, across all pages."
msgstr ""

msgid ""
"When determining the number of objects contained in ``object_list``, "
"``Paginator`` will first try calling ``object_list.count()``. If "
"``object_list`` has no ``count()`` method, then ``Paginator`` will fallback "
"to using ``len(object_list)``. This allows objects, such as Django's "
"``QuerySet``, to use a more efficient ``count()`` method when available."
msgstr ""

msgid "The total number of pages."
msgstr ""

msgid ""
"A 1-based range iterator of page numbers, e.g. yielding ``[1, 2, 3, 4]``."
msgstr ""

msgid "``InvalidPage`` exceptions"
msgstr ""

msgid ""
"A base class for exceptions raised when a paginator is passed an invalid "
"page number."
msgstr "当paginator对象试图访问无效页码时引发异常的基类。"

msgid ""
"The :meth:`Paginator.page` method raises an exception if the requested page "
"is invalid (i.e., not an integer) or contains no objects. Generally, it's "
"enough to catch the ``InvalidPage`` exception, but if you'd like more "
"granularity, you can catch either of the following exceptions:"
msgstr ""

msgid "Raised when ``page()`` is given a value that isn't an integer."
msgstr ""

msgid ""
"Raised when ``page()`` is given a valid value but no objects exist on that "
"page."
msgstr ""

msgid ""
"Both of the exceptions are subclasses of :exc:`InvalidPage`, so you can "
"handle them both with a simple ``except InvalidPage``."
msgstr ""

msgid "``Page`` objects"
msgstr ""

msgid ""
"You usually won't construct ``Page`` objects by hand -- you'll get them "
"using :meth:`Paginator.page`."
msgstr "你通常不会手动实例化Page对象 - 你会使用方法Paginator.page()。"

msgid ""
"A page acts like a sequence of :attr:`Page.object_list` when using ``len()`` "
"or iterating it directly."
msgstr ""

msgid "Returns ``True`` if there's a next page."
msgstr ""

msgid "Returns ``True`` if there's a previous page."
msgstr ""

msgid "Returns ``True`` if there's a next *or* previous page."
msgstr ""

msgid ""
"Returns the next page number. Raises :exc:`InvalidPage` if next page doesn't "
"exist."
msgstr ""

msgid ""
"Returns the previous page number. Raises :exc:`InvalidPage` if previous page "
"doesn't exist."
msgstr ""

msgid ""
"Returns the 1-based index of the first object on the page, relative to all "
"of the objects in the paginator's list. For example, when paginating a list "
"of 5 objects with 2 objects per page, the second page's :meth:`~Page."
"start_index` would return ``3``."
msgstr ""

msgid ""
"Returns the 1-based index of the last object on the page, relative to all of "
"the objects in the paginator's list. For example, when paginating a list of "
"5 objects with 2 objects per page, the second page's :meth:`~Page.end_index` "
"would return ``4``."
msgstr ""

msgid "The list of objects on this page."
msgstr "此页上的对象列表。"

msgid "The 1-based page number for this page."
msgstr "此页的基于 1 的页码。"

msgid "The associated :class:`Paginator` object."
msgstr "关联的 :class:`Paginator` 对象。"

msgid "Performance and optimization"
msgstr "性能和优化"

msgid ""
"This document provides an overview of techniques and tools that can help get "
"your Django code running more efficiently - faster, and using fewer system "
"resources."
msgstr ""
"本文档概述了一些技术和工具，这些技术和工具可以帮助您更有效地运行Django代码——"
"更快，并且使用更少的系统资源。"

msgid ""
"Generally one's first concern is to write code that *works*, whose logic "
"functions as required to produce the expected output. Sometimes, however, "
"this will not be enough to make the code work as *efficiently* as one would "
"like."
msgstr ""
"通常，首先要考虑的是编写*工作的*代码，它的逻辑功能与产生预期输出所需的逻辑功"
"能相同。然而，有时，这并不足以使代码像人们所希望的那样*高效地*工作。"

msgid ""
"In this case, what's needed is something - and in practice, often a "
"collection of things - to improve the code's performance without, or only "
"minimally, affecting its behavior."
msgstr ""
"在这种情况下，需要的是一些东西——在实践中，通常是一组东西——以提高代码的性能，"
"而不影响或只影响其行为。"

msgid "General approaches"
msgstr "一般方法"

msgid "What are you optimizing *for*?"
msgstr "你在*为*什么而优化？"

msgid ""
"It's important to have a clear idea what you mean by 'performance'. There is "
"not just one metric of it."
msgstr "清楚地理解你所说的“绩效”是什么很重要，因为它不仅仅是一个指标。"

msgid ""
"Improved speed might be the most obvious aim for a program, but sometimes "
"other performance improvements might be sought, such as lower memory "
"consumption or fewer demands on the database or network."
msgstr ""
"提高速度可能是程序最明显的目标，但有时可能会寻求其他性能改进，例如降低内存消"
"耗或减少对数据库或网络的要求。"

msgid ""
"Improvements in one area will often bring about improved performance in "
"another, but not always; sometimes one can even be at the expense of "
"another. For example, an improvement in a program's speed might cause it to "
"use more memory. Even worse, it can be self-defeating - if the speed "
"improvement is so memory-hungry that the system starts to run out of memory, "
"you'll have done more harm than good."
msgstr ""
"一个领域的改进通常会提高另一个领域的性能，但并不总是如此；有时甚至会牺牲另一"
"个领域的性能。例如，一个程序速度的提高可能会导致它使用更多的内存。更糟糕的"
"是，如果速度提高太过内存不足，以致于系统开始耗尽内存，那么你所做的弊大于利。"

msgid ""
"There are other trade-offs to bear in mind. Your own time is a valuable "
"resource, more precious than CPU time. Some improvements might be too "
"difficult to be worth implementing, or might affect the portability or "
"maintainability of the code. Not all performance improvements are worth the "
"effort."
msgstr ""
"还有其他的权衡。你自己的时间是一个宝贵的资源，比CPU时间更宝贵。一些改进可能太"
"难实现，或者可能影响代码的可移植性或可维护性。并非所有的性能改进都值得付出努"
"力。"

msgid ""
"So, you need to know what performance improvements you are aiming for, and "
"you also need to know that you have a good reason for aiming in that "
"direction - and for that you need:"
msgstr ""
"所以，你需要知道你的目标是什么样的性能改进，你也需要知道你有一个很好的理由去"
"瞄准那个方向——而且你需要："

msgid "Performance benchmarking"
msgstr "性能标竿"

msgid ""
"It's no good just guessing or assuming where the inefficiencies lie in your "
"code."
msgstr "仅仅猜测或假设代码中存在效率低下的原因是没有好处的。"

msgid "Django tools"
msgstr "Django工具"

msgid ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_ "
"is a very handy tool that provides insights into what your code is doing and "
"how much time it spends doing it. In particular it can show you all the SQL "
"queries your page is generating, and how long each one has taken."
msgstr ""
"`django-debug-toolbar <https://github.com/jazzband/django-debug-toolbar/>`_是"
"一个非常方便的工具，它可以深入了解您的代码正在做什么以及花费了多少时间。特别"
"是它可以显示您的页面生成的所有SQL查询，以及每个查询所用的时间。"

msgid ""
"Third-party panels are also available for the toolbar, that can (for "
"example) report on cache performance and template rendering times."
msgstr "第三方面板也可用于工具栏，可以（例如）报告缓存性能和模板呈现时间。"

msgid "Third-party services"
msgstr "第三方服务"

msgid ""
"There are a number of free services that will analyze and report on the "
"performance of your site's pages from the perspective of a remote HTTP "
"client, in effect simulating the experience of an actual user."
msgstr ""

msgid ""
"These can't report on the internals of your code, but can provide a useful "
"insight into your site's overall performance, including aspects that can't "
"be adequately measured from within Django environment. Examples include:"
msgstr ""

msgid "`Yahoo's Yslow <http://yslow.org/>`_"
msgstr ""

msgid "`Google PageSpeed <https://developers.google.com/speed/pagespeed/>`_"
msgstr ""

msgid ""
"There are also several paid-for services that perform a similar analysis, "
"including some that are Django-aware and can integrate with your codebase to "
"profile its performance far more comprehensively."
msgstr ""

msgid "Get things right from the start"
msgstr ""

msgid ""
"Some work in optimization involves tackling performance shortcomings, but "
"some of the work can simply be built in to what you'd do anyway, as part of "
"the good practices you should adopt even before you start thinking about "
"improving performance."
msgstr ""

msgid ""
"In this respect Python is an excellent language to work with, because "
"solutions that look elegant and feel right usually are the best performing "
"ones. As with most skills, learning what \"looks right\" takes practice, but "
"one of the most useful guidelines is:"
msgstr ""

msgid "Work at the appropriate level"
msgstr ""

msgid ""
"Django offers many different ways of approaching things, but just because "
"it's possible to do something in a certain way doesn't mean that it's the "
"most appropriate way to do it. For example, you might find that you could "
"calculate the same thing - the number of items in a collection, perhaps - in "
"a ``QuerySet``, in Python, or in a template."
msgstr ""

msgid ""
"However, it will almost always be faster to do this work at lower rather "
"than higher levels. At higher levels the system has to deal with objects "
"through multiple levels of abstraction and layers of machinery."
msgstr ""

msgid ""
"That is, the database can typically do things faster than Python can, which "
"can do them faster than the template language can::"
msgstr ""

msgid ""
"Generally speaking, the most appropriate level for the job is the lowest-"
"level one that it is comfortable to code for."
msgstr ""

msgid "The example above is merely illustrative."
msgstr ""

msgid ""
"Firstly, in a real-life case you need to consider what is happening before "
"and after your count to work out what's an optimal way of doing it *in that "
"particular context*. The database optimization documents describes :ref:`a "
"case where counting in the template would be better "
"<overuse_of_count_and_exists>`."
msgstr ""

msgid ""
"Secondly, there are other options to consider: in a real-life case, "
"``{{ my_bicycles.count }}``, which invokes the ``QuerySet`` ``count()`` "
"method directly from the template, might be the most appropriate choice."
msgstr ""

msgid ""
"Often it is expensive (that is, resource-hungry and slow) to compute a "
"value, so there can be huge benefit in saving the value to a quickly "
"accessible cache, ready for the next time it's required."
msgstr ""

msgid ""
"It's a sufficiently significant and powerful technique that Django includes "
"a comprehensive caching framework, as well as other smaller pieces of "
"caching functionality."
msgstr ""

msgid ":doc:`The caching framework </topics/cache>`"
msgstr ""

msgid ""
"Django's :doc:`caching framework </topics/cache>` offers very significant "
"opportunities for performance gains, by saving dynamic content so that it "
"doesn't need to be calculated for each request."
msgstr ""

msgid ""
"For convenience, Django offers different levels of cache granularity: you "
"can cache the output of specific views, or only the pieces that are "
"difficult to produce, or even an entire site."
msgstr ""

msgid ""
"Implementing caching should not be regarded as an alternative to improving "
"code that's performing poorly because it has been written badly. It's one of "
"the final steps towards producing well-performing code, not a shortcut."
msgstr ""

msgid ":class:`~django.utils.functional.cached_property`"
msgstr ""

msgid ""
"It's common to have to call a class instance's method more than once. If "
"that function is expensive, then doing so can be wasteful."
msgstr ""

msgid ""
"Using the :class:`~django.utils.functional.cached_property` decorator saves "
"the value returned by a property; the next time the function is called on "
"that instance, it will return the saved value rather than re-computing it. "
"Note that this only works on methods that take ``self`` as their only "
"argument and that it changes the method to a property."
msgstr ""

msgid ""
"Certain Django components also have their own caching functionality; these "
"are discussed below in the sections related to those components."
msgstr ""

msgid "Understanding laziness"
msgstr ""

msgid ""
"*Laziness* is a strategy complementary to caching. Caching avoids "
"recomputation by saving results; laziness delays computation until it's "
"actually required."
msgstr ""

msgid ""
"Laziness allows us to refer to things before they are instantiated, or even "
"before it's possible to instantiate them. This has numerous uses."
msgstr ""

msgid ""
"For example, :ref:`lazy translation <lazy-translations>` can be used before "
"the target language is even known, because it doesn't take place until the "
"translated string is actually required, such as in a rendered template."
msgstr ""

msgid ""
"Laziness is also a way to save effort by trying to avoid work in the first "
"place. That is, one aspect of laziness is not doing anything until it has to "
"be done, because it may not turn out to be necessary after all. Laziness can "
"therefore have performance implications, and the more expensive the work "
"concerned, the more there is to gain through laziness."
msgstr ""

msgid ""
"Python provides a number of tools for lazy evaluation, particularly through "
"the :py:term:`generator` and :py:term:`generator expression` constructs. "
"It's worth reading up on laziness in Python to discover opportunities for "
"making use of lazy patterns in your code."
msgstr ""

msgid "Laziness in Django"
msgstr ""

msgid ""
"Django is itself quite lazy. A good example of this can be found in the "
"evaluation of ``QuerySets``. :ref:`QuerySets are lazy <querysets-are-lazy>`. "
"Thus a ``QuerySet`` can be created, passed around and combined with other "
"``QuerySets``, without actually incurring any trips to the database to fetch "
"the items it describes. What gets passed around is the ``QuerySet`` object, "
"not the collection of items that - eventually - will be required from the "
"database."
msgstr ""

msgid ""
"On the other hand, :ref:`certain operations will force the evaluation of a "
"QuerySet <when-querysets-are-evaluated>`. Avoiding the premature evaluation "
"of a ``QuerySet`` can save making an expensive and unnecessary trip to the "
"database."
msgstr ""

msgid ""
"Django also offers a :meth:`~django.utils.functional.keep_lazy` decorator. "
"This allows a function that has been called with a lazy argument to behave "
"lazily itself, only being evaluated when it needs to be. Thus the lazy "
"argument - which could be an expensive one - will not be called upon for "
"evaluation until it's strictly required."
msgstr ""

msgid "Databases"
msgstr ""

msgid "Database optimization"
msgstr ""

msgid ""
"Django's database layer provides various ways to help developers get the "
"best performance from their databases. The :doc:`database optimization "
"documentation </topics/db/optimization>` gathers together links to the "
"relevant documentation and adds various tips that outline the steps to take "
"when attempting to optimize your database usage."
msgstr ""

msgid "Other database-related tips"
msgstr ""

msgid ""
"Enabling :ref:`persistent-database-connections` can speed up connections to "
"the database accounts for a significant part of the request processing time."
msgstr ""

msgid ""
"This helps a lot on virtualized hosts with limited network performance, for "
"example."
msgstr ""

msgid "HTTP performance"
msgstr ""

msgid ""
"Django comes with a few helpful pieces of :doc:`middleware </ref/"
"middleware>` that can help optimize your site's performance. They include:"
msgstr ""

msgid ":class:`~django.middleware.http.ConditionalGetMiddleware`"
msgstr ""

msgid ""
"Adds support for modern browsers to conditionally GET responses based on the "
"``ETag`` and ``Last-Modified`` headers. It also calculates and sets an ETag "
"if needed."
msgstr ""

msgid ":class:`~django.middleware.gzip.GZipMiddleware`"
msgstr ""

msgid ""
"Compresses responses for all modern browsers, saving bandwidth and transfer "
"time. Note that GZipMiddleware is currently considered a security risk, and "
"is vulnerable to attacks that nullify the protection provided by TLS/SSL. "
"See the warning in :class:`~django.middleware.gzip.GZipMiddleware` for more "
"information."
msgstr ""

msgid "Sessions"
msgstr "会话"

msgid ""
":ref:`Using cached sessions <cached-sessions-backend>` may be a way to "
"increase performance by eliminating the need to load session data from a "
"slower storage source like the database and instead storing frequently used "
"session data in memory."
msgstr ""

msgid "Static files"
msgstr ""

msgid ""
"Static files, which by definition are not dynamic, make an excellent target "
"for optimization gains."
msgstr ""

msgid ":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage`"
msgstr ""

msgid ""
"By taking advantage of web browsers' caching abilities, you can eliminate "
"network hits entirely for a given file after the initial download."
msgstr ""

msgid ""
":class:`~django.contrib.staticfiles.storage.CachedStaticFilesStorage` "
"appends a content-dependent tag to the filenames of :doc:`static files </ref/"
"contrib/staticfiles>` to make it safe for browsers to cache them long-term "
"without missing future changes - when a file changes, so will the tag, so "
"browsers will reload the asset automatically."
msgstr ""

msgid "\"Minification\""
msgstr ""

msgid ""
"Several third-party Django tools and packages provide the ability to \"minify"
"\" HTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, "
"and comments, and shorten variable names, and thus reduce the size of the "
"documents that your site publishes."
msgstr ""

msgid "Template performance"
msgstr ""

msgid "Note that:"
msgstr ""

msgid "using ``{% block %}`` is faster than using ``{% include %}``"
msgstr ""

msgid ""
"heavily-fragmented templates, assembled from many small pieces, can affect "
"performance"
msgstr ""

msgid "The cached template loader"
msgstr ""

msgid ""
"Enabling the :class:`cached template loader <django.template.loaders.cached."
"Loader>` often improves performance drastically, as it avoids compiling each "
"template every time it needs to be rendered."
msgstr ""

msgid "Using different versions of available software"
msgstr ""

msgid ""
"It can sometimes be worth checking whether different and better-performing "
"versions of the software that you're using are available."
msgstr ""

msgid ""
"These techniques are targeted at more advanced users who want to push the "
"boundaries of performance of an already well-optimized Django site."
msgstr ""

msgid ""
"However, they are not magic solutions to performance problems, and they're "
"unlikely to bring better than marginal gains to sites that don't already do "
"the more basic things the right way."
msgstr ""

msgid ""
"It's worth repeating: **reaching for alternatives to software you're already "
"using is never the first answer to performance problems**. When you reach "
"this level of optimization, you need a formal benchmarking solution."
msgstr ""

msgid "Newer is often - but not always - better"
msgstr ""

msgid ""
"It's fairly rare for a new release of well-maintained software to be less "
"efficient, but the maintainers can't anticipate every possible use-case - so "
"while being aware that newer versions are likely to perform better, don't "
"simply assume that they always will."
msgstr ""

msgid ""
"This is true of Django itself. Successive releases have offered a number of "
"improvements across the system, but you should still check the real-world "
"performance of your application, because in some cases you may find that "
"changes mean it performs worse rather than better."
msgstr ""

msgid ""
"Newer versions of Python, and also of Python packages, will often perform "
"better too - but measure, rather than assume."
msgstr ""

msgid ""
"Unless you've encountered an unusual performance problem in a particular "
"version, you'll generally find better features, reliability, and security in "
"a new release and that these benefits are far more significant than any "
"performance you might win or lose."
msgstr ""

msgid "Alternatives to Django's template language"
msgstr ""

msgid ""
"For nearly all cases, Django's built-in template language is perfectly "
"adequate. However, if the bottlenecks in your Django project seem to lie in "
"the template system and you have exhausted other opportunities to remedy "
"this, a third-party alternative may be the answer."
msgstr ""

msgid ""
"`Jinja2 <http://jinja.pocoo.org/docs/>`_ can offer performance improvements, "
"particularly when it comes to speed."
msgstr ""

msgid ""
"Alternative template systems vary in the extent to which they share Django's "
"templating language."
msgstr ""

msgid ""
"*If* you experience performance issues in templates, the first thing to do "
"is to understand exactly why. Using an alternative template system may prove "
"faster, but the same gains may also be available without going to that "
"trouble - for example, expensive processing and logic in your templates "
"could be done more efficiently in your views."
msgstr ""

msgid "Alternative software implementations"
msgstr ""

msgid ""
"It may be worth checking whether Python software you're using has been "
"provided in a different implementation that can execute the same code faster."
msgstr ""

msgid ""
"However: most performance problems in well-written Django sites aren't at "
"the Python execution level, but rather in inefficient database querying, "
"caching, and templates. If you're relying on poorly-written Python code, "
"your performance problems are unlikely to be solved by having it execute "
"faster."
msgstr ""

msgid ""
"Using an alternative implementation may introduce compatibility, deployment, "
"portability, or maintenance issues. It goes without saying that before "
"adopting a non-standard implementation you should ensure it provides "
"sufficient performance gains for your application to outweigh the potential "
"risks."
msgstr ""

msgid "With these caveats in mind, you should be aware of:"
msgstr ""

msgid "`PyPy <https://pypy.org/>`_"
msgstr ""

msgid ""
"`PyPy <https://pypy.org/>`_ is an implementation of Python in Python itself "
"(the 'standard' Python implementation is in C). PyPy can offer substantial "
"performance gains, typically for heavyweight applications."
msgstr ""

msgid ""
"A key aim of the PyPy project is `compatibility <https://pypy.org/compat."
"html>`_ with existing Python APIs and libraries. Django is compatible, but "
"you will need to check the compatibility of other libraries you rely on."
msgstr ""

msgid "C implementations of Python libraries"
msgstr ""

msgid ""
"Some Python libraries are also implemented in C, and can be much faster. "
"They aim to offer the same APIs. Note that compatibility issues and behavior "
"differences are not unknown (and not always immediately evident)."
msgstr ""

msgid "Security in Django"
msgstr ""

msgid ""
"This document is an overview of Django's security features. It includes "
"advice on securing a Django-powered site."
msgstr ""

msgid "Cross site scripting (XSS) protection"
msgstr ""

msgid ""
"XSS attacks allow a user to inject client side scripts into the browsers of "
"other users. This is usually achieved by storing the malicious scripts in "
"the database where it will be retrieved and displayed to other users, or by "
"getting users to click a link which will cause the attacker's JavaScript to "
"be executed by the user's browser. However, XSS attacks can originate from "
"any untrusted source of data, such as cookies or Web services, whenever the "
"data is not sufficiently sanitized before including in a page."
msgstr ""

msgid ""
"Using Django templates protects you against the majority of XSS attacks. "
"However, it is important to understand what protections it provides and its "
"limitations."
msgstr ""

msgid ""
"Django templates :ref:`escape specific characters <automatic-html-escaping>` "
"which are particularly dangerous to HTML. While this protects users from "
"most malicious input, it is not entirely foolproof. For example, it will not "
"protect the following:"
msgstr ""

msgid ""
"If ``var`` is set to ``'class1 onmouseover=javascript:func()'``, this can "
"result in unauthorized JavaScript execution, depending on how the browser "
"renders imperfect HTML. (Quoting the attribute value would fix this case.)"
msgstr ""

msgid ""
"It is also important to be particularly careful when using ``is_safe`` with "
"custom template tags, the :tfilter:`safe` template tag, :mod:`mark_safe "
"<django.utils.safestring>`, and when autoescape is turned off."
msgstr ""

msgid ""
"In addition, if you are using the template system to output something other "
"than HTML, there may be entirely separate characters and words which require "
"escaping."
msgstr ""

msgid ""
"You should also be very careful when storing HTML in the database, "
"especially when that HTML is retrieved and displayed."
msgstr ""

msgid "Cross site request forgery (CSRF) protection"
msgstr ""

msgid ""
"CSRF attacks allow a malicious user to execute actions using the credentials "
"of another user without that user's knowledge or consent."
msgstr ""

msgid ""
"Django has built-in protection against most types of CSRF attacks, providing "
"you have :ref:`enabled and used it <using-csrf>` where appropriate. However, "
"as with any mitigation technique, there are limitations. For example, it is "
"possible to disable the CSRF module globally or for particular views. You "
"should only do this if you know what you are doing. There are other :ref:"
"`limitations <csrf-limitations>` if your site has subdomains that are "
"outside of your control."
msgstr ""

msgid ""
":ref:`CSRF protection works <how-csrf-works>` by checking for a secret in "
"each POST request. This ensures that a malicious user cannot simply \"replay"
"\" a form POST to your website and have another logged in user unwittingly "
"submit that form. The malicious user would have to know the secret, which is "
"user specific (using a cookie)."
msgstr ""

msgid ""
"When deployed with :ref:`HTTPS <security-recommendation-ssl>`, "
"``CsrfViewMiddleware`` will check that the HTTP referer header is set to a "
"URL on the same origin (including subdomain and port). Because HTTPS "
"provides additional security, it is imperative to ensure connections use "
"HTTPS where it is available by forwarding insecure connection requests and "
"using HSTS for supported browsers."
msgstr ""

msgid ""
"Be very careful with marking views with the ``csrf_exempt`` decorator unless "
"it is absolutely necessary."
msgstr ""

msgid "SQL injection protection"
msgstr ""

msgid ""
"SQL injection is a type of attack where a malicious user is able to execute "
"arbitrary SQL code on a database. This can result in records being deleted "
"or data leakage."
msgstr ""

msgid ""
"Django's querysets are protected from SQL injection since their queries are "
"constructed using query parameterization. A query's SQL code is defined "
"separately from the query's parameters. Since parameters may be user-"
"provided and therefore unsafe, they are escaped by the underlying database "
"driver."
msgstr ""

msgid ""
"Django also gives developers power to write :ref:`raw queries <executing-raw-"
"queries>` or execute :ref:`custom sql <executing-custom-sql>`. These "
"capabilities should be used sparingly and you should always be careful to "
"properly escape any parameters that the user can control. In addition, you "
"should exercise caution when using :meth:`~django.db.models.query.QuerySet."
"extra` and :class:`~django.db.models.expressions.RawSQL`."
msgstr ""

msgid "Clickjacking protection"
msgstr ""

msgid ""
"Clickjacking is a type of attack where a malicious site wraps another site "
"in a frame. This attack can result in an unsuspecting user being tricked "
"into performing unintended actions on the target site."
msgstr ""

msgid ""
"Django contains :ref:`clickjacking protection <clickjacking-prevention>` in "
"the form of the :mod:`X-Frame-Options middleware <django.middleware."
"clickjacking.XFrameOptionsMiddleware>` which in a supporting browser can "
"prevent a site from being rendered inside a frame. It is possible to disable "
"the protection on a per view basis or to configure the exact header value "
"sent."
msgstr ""

msgid ""
"The middleware is strongly recommended for any site that does not need to "
"have its pages wrapped in a frame by third party sites, or only needs to "
"allow that for a small section of the site."
msgstr ""

msgid "SSL/HTTPS"
msgstr ""

msgid ""
"It is always better for security to deploy your site behind HTTPS. Without "
"this, it is possible for malicious network users to sniff authentication "
"credentials or any other information transferred between client and server, "
"and in some cases -- **active** network attackers -- to alter data that is "
"sent in either direction."
msgstr ""

msgid ""
"If you want the protection that HTTPS provides, and have enabled it on your "
"server, there are some additional steps you may need:"
msgstr ""

msgid ""
"If necessary, set :setting:`SECURE_PROXY_SSL_HEADER`, ensuring that you have "
"understood the warnings there thoroughly. Failure to do this can result in "
"CSRF vulnerabilities, and failure to do it correctly can also be dangerous!"
msgstr ""

msgid ""
"Set :setting:`SECURE_SSL_REDIRECT` to ``True``, so that requests over HTTP "
"are redirected to HTTPS."
msgstr ""

msgid ""
"Please note the caveats under :setting:`SECURE_PROXY_SSL_HEADER`. For the "
"case of a reverse proxy, it may be easier or more secure to configure the "
"main Web server to do the redirect to HTTPS."
msgstr ""

msgid "Use 'secure' cookies."
msgstr ""

msgid ""
"If a browser connects initially via HTTP, which is the default for most "
"browsers, it is possible for existing cookies to be leaked. For this reason, "
"you should set your :setting:`SESSION_COOKIE_SECURE` and :setting:"
"`CSRF_COOKIE_SECURE` settings to ``True``. This instructs the browser to "
"only send these cookies over HTTPS connections. Note that this will mean "
"that sessions will not work over HTTP, and the CSRF protection will prevent "
"any POST data being accepted over HTTP (which will be fine if you are "
"redirecting all HTTP traffic to HTTPS)."
msgstr ""

msgid "Use :ref:`http-strict-transport-security` (HSTS)"
msgstr ""

msgid ""
"HSTS is an HTTP header that informs a browser that all future connections to "
"a particular site should always use HTTPS. Combined with redirecting "
"requests over HTTP to HTTPS, this will ensure that connections always enjoy "
"the added security of SSL provided one successful connection has occurred. "
"HSTS may either be configured with :setting:`SECURE_HSTS_SECONDS`, :setting:"
"`SECURE_HSTS_INCLUDE_SUBDOMAINS`, and :setting:`SECURE_HSTS_PRELOAD`, or on "
"the Web server."
msgstr ""

msgid "Host header validation"
msgstr ""

msgid ""
"Django uses the ``Host`` header provided by the client to construct URLs in "
"certain cases. While these values are sanitized to prevent Cross Site "
"Scripting attacks, a fake ``Host`` value can be used for Cross-Site Request "
"Forgery, cache poisoning attacks, and poisoning links in emails."
msgstr ""

msgid ""
"Because even seemingly-secure web server configurations are susceptible to "
"fake ``Host`` headers, Django validates ``Host`` headers against the :"
"setting:`ALLOWED_HOSTS` setting in the :meth:`django.http.HttpRequest."
"get_host()` method."
msgstr ""

msgid ""
"This validation only applies via :meth:`~django.http.HttpRequest."
"get_host()`; if your code accesses the ``Host`` header directly from "
"``request.META`` you are bypassing this security protection."
msgstr ""

msgid "For more details see the full :setting:`ALLOWED_HOSTS` documentation."
msgstr ""

msgid ""
"Previous versions of this document recommended configuring your web server "
"to ensure it validates incoming HTTP ``Host`` headers. While this is still "
"recommended, in many common web servers a configuration that seems to "
"validate the ``Host`` header may not in fact do so. For instance, even if "
"Apache is configured such that your Django site is served from a non-default "
"virtual host with the ``ServerName`` set, it is still possible for an HTTP "
"request to match this virtual host and supply a fake ``Host`` header. Thus, "
"Django now requires that you set :setting:`ALLOWED_HOSTS` explicitly rather "
"than relying on web server configuration."
msgstr ""

msgid ""
"Additionally, Django requires you to explicitly enable support for the ``X-"
"Forwarded-Host`` header (via the :setting:`USE_X_FORWARDED_HOST` setting) if "
"your configuration requires it."
msgstr ""

msgid ""
"Similar to the :ref:`CSRF limitations <csrf-limitations>` requiring a site "
"to be deployed such that untrusted users don't have access to any "
"subdomains, :mod:`django.contrib.sessions` also has limitations. See :ref:"
"`the session topic guide section on security <topics-session-security>` for "
"details."
msgstr ""

msgid "User-uploaded content"
msgstr ""

msgid ""
"Consider :ref:`serving static files from a cloud service or CDN <staticfiles-"
"from-cdn>` to avoid some of these issues."
msgstr ""

msgid ""
"If your site accepts file uploads, it is strongly advised that you limit "
"these uploads in your Web server configuration to a reasonable size in order "
"to prevent denial of service (DOS) attacks. In Apache, this can be easily "
"set using the LimitRequestBody_ directive."
msgstr ""

msgid ""
"If you are serving your own static files, be sure that handlers like "
"Apache's ``mod_php``, which would execute static files as code, are "
"disabled. You don't want users to be able to execute arbitrary code by "
"uploading and requesting a specially crafted file."
msgstr ""

msgid ""
"Django's media upload handling poses some vulnerabilities when that media is "
"served in ways that do not follow security best practices. Specifically, an "
"HTML file can be uploaded as an image if that file contains a valid PNG "
"header followed by malicious HTML. This file will pass verification of the "
"library that Django uses for :class:`~django.db.models.ImageField` image "
"processing (Pillow). When this file is subsequently displayed to a user, it "
"may be displayed as HTML depending on the type and configuration of your web "
"server."
msgstr ""

msgid ""
"No bulletproof technical solution exists at the framework level to safely "
"validate all user uploaded file content, however, there are some other steps "
"you can take to mitigate these attacks:"
msgstr ""

msgid ""
"One class of attacks can be prevented by always serving user uploaded "
"content from a distinct top-level or second-level domain. This prevents any "
"exploit blocked by `same-origin policy`_ protections such as cross site "
"scripting. For example, if your site runs on ``example.com``, you would want "
"to serve uploaded content (the :setting:`MEDIA_URL` setting) from something "
"like ``usercontent-example.com``. It's *not* sufficient to serve content "
"from a subdomain like ``usercontent.example.com``."
msgstr ""

msgid ""
"Beyond this, applications may choose to define a whitelist of allowable file "
"extensions for user uploaded files and configure the web server to only "
"serve such files."
msgstr ""

msgid "Additional security topics"
msgstr ""

msgid ""
"While Django provides good security protection out of the box, it is still "
"important to properly deploy your application and take advantage of the "
"security protection of the Web server, operating system and other components."
msgstr ""

msgid ""
"Make sure that your Python code is outside of the Web server's root. This "
"will ensure that your Python code is not accidentally served as plain text "
"(or accidentally executed)."
msgstr ""

msgid "Take care with any :ref:`user uploaded files <file-upload-security>`."
msgstr ""

msgid ""
"Django does not throttle requests to authenticate users. To protect against "
"brute-force attacks against the authentication system, you may consider "
"deploying a Django plugin or Web server module to throttle these requests."
msgstr ""

msgid "Keep your :setting:`SECRET_KEY` a secret."
msgstr ""

msgid ""
"It is a good idea to limit the accessibility of your caching system and "
"database using a firewall."
msgstr ""

msgid ""
"Take a look at the Open Web Application Security Project (OWASP) `Top 10 "
"list`_ which identifies some common vulnerabilities in web applications. "
"While Django has tools to address some of the issues, other issues must be "
"accounted for in the design of your project."
msgstr ""

msgid "Serializing Django objects"
msgstr ""

msgid ""
"Django's serialization framework provides a mechanism for \"translating\" "
"Django models into other formats. Usually these other formats will be text-"
"based and used for sending Django data over a wire, but it's possible for a "
"serializer to handle any format (text-based or not)."
msgstr ""

msgid ""
"If you just want to get some data from your tables into a serialized form, "
"you could use the :djadmin:`dumpdata` management command."
msgstr ""

msgid "Serializing data"
msgstr ""

msgid "At the highest level, serializing data is a very simple operation::"
msgstr ""

msgid ""
"The arguments to the ``serialize`` function are the format to serialize the "
"data to (see `Serialization formats`_) and a :class:`~django.db.models.query."
"QuerySet` to serialize. (Actually, the second argument can be any iterator "
"that yields Django model instances, but it'll almost always be a QuerySet)."
msgstr ""

msgid "You can also use a serializer object directly::"
msgstr ""

msgid ""
"This is useful if you want to serialize data directly to a file-like object "
"(which includes an :class:`~django.http.HttpResponse`)::"
msgstr ""

msgid ""
"Calling :func:`~django.core.serializers.get_serializer` with an unknown :ref:"
"`format <serialization-formats>` will raise a ``django.core.serializers."
"SerializerDoesNotExist`` exception."
msgstr ""

msgid "Subset of fields"
msgstr ""

msgid ""
"If you only want a subset of fields to be serialized, you can specify a "
"``fields`` argument to the serializer::"
msgstr ""

msgid ""
"In this example, only the ``name`` and ``size`` attributes of each model "
"will be serialized. The primary key is always serialized as the ``pk`` "
"element in the resulting output; it never appears in the ``fields`` part."
msgstr ""

msgid ""
"Depending on your model, you may find that it is not possible to deserialize "
"a model that only serializes a subset of its fields. If a serialized object "
"doesn't specify all the fields that are required by a model, the "
"deserializer will not be able to save deserialized instances."
msgstr ""

msgid "Inherited models"
msgstr ""

msgid ""
"If you have a model that is defined using an :ref:`abstract base class "
"<abstract-base-classes>`, you don't have to do anything special to serialize "
"that model. Just call the serializer on the object (or objects) that you "
"want to serialize, and the output will be a complete representation of the "
"serialized object."
msgstr ""

msgid ""
"However, if you have a model that uses :ref:`multi-table inheritance <multi-"
"table-inheritance>`, you also need to serialize all of the base classes for "
"the model. This is because only the fields that are locally defined on the "
"model will be serialized. For example, consider the following models::"
msgstr ""

msgid "If you only serialize the Restaurant model::"
msgstr ""

msgid ""
"the fields on the serialized output will only contain the "
"``serves_hot_dogs`` attribute. The ``name`` attribute of the base class will "
"be ignored."
msgstr ""

msgid ""
"In order to fully serialize your ``Restaurant`` instances, you will need to "
"serialize the ``Place`` models as well::"
msgstr ""

msgid "Deserializing data"
msgstr ""

msgid "Deserializing data is also a fairly simple operation::"
msgstr ""

msgid ""
"As you can see, the ``deserialize`` function takes the same format argument "
"as ``serialize``, a string or stream of data, and returns an iterator."
msgstr ""

msgid ""
"However, here it gets slightly complicated. The objects returned by the "
"``deserialize`` iterator *aren't* simple Django objects. Instead, they are "
"special ``DeserializedObject`` instances that wrap a created -- but unsaved "
"-- object and any associated relationship data."
msgstr ""

msgid "Calling ``DeserializedObject.save()`` saves the object to the database."
msgstr ""

msgid ""
"If the ``pk`` attribute in the serialized data doesn't exist or is null, a "
"new instance will be saved to the database."
msgstr ""

msgid ""
"This ensures that deserializing is a non-destructive operation even if the "
"data in your serialized representation doesn't match what's currently in the "
"database. Usually, working with these ``DeserializedObject`` instances looks "
"something like::"
msgstr ""

msgid ""
"In other words, the usual use is to examine the deserialized objects to make "
"sure that they are \"appropriate\" for saving before doing so.  Of course, "
"if you trust your data source you could just save the object and move on."
msgstr ""

msgid ""
"The Django object itself can be inspected as ``deserialized_object.object``. "
"If fields in the serialized data do not exist on a model, a "
"``DeserializationError`` will be raised unless the ``ignorenonexistent`` "
"argument is passed in as ``True``::"
msgstr ""

msgid "Serialization formats"
msgstr ""

msgid ""
"Django supports a number of serialization formats, some of which require you "
"to install third-party Python modules:"
msgstr ""

msgid "Identifier"
msgstr ""

msgid "Information"
msgstr ""

msgid "``xml``"
msgstr ""

msgid "Serializes to and from a simple XML dialect."
msgstr ""

msgid "``json``"
msgstr ""

msgid "Serializes to and from JSON_."
msgstr ""

msgid "``yaml``"
msgstr ""

msgid ""
"Serializes to YAML (YAML Ain't a Markup Language). This serializer is only "
"available if PyYAML_ is installed."
msgstr ""

msgid "XML"
msgstr ""

msgid "The basic XML serialization format is quite simple::"
msgstr ""

msgid ""
"The whole collection of objects that is either serialized or deserialized is "
"represented by a ``<django-objects>``-tag which contains multiple "
"``<object>``-elements. Each such object has two attributes: \"pk\" and "
"\"model\", the latter being represented by the name of the app (\"sessions"
"\") and the lowercase name of the model (\"session\") separated by a dot."
msgstr ""

msgid ""
"Each field of the object is serialized as a ``<field>``-element sporting the "
"fields \"type\" and \"name\". The text content of the element represents the "
"value that should be stored."
msgstr ""

msgid ""
"Foreign keys and other relational fields are treated a little bit "
"differently::"
msgstr ""

msgid ""
"In this example we specify that the ``auth.Permission`` object with the PK "
"27 has a foreign key to the ``contenttypes.ContentType`` instance with the "
"PK 9."
msgstr ""

msgid ""
"ManyToMany-relations are exported for the model that binds them. For "
"instance, the ``auth.User`` model has such a relation to the ``auth."
"Permission`` model::"
msgstr ""

msgid ""
"This example links the given user with the permission models with PKs 46 and "
"47."
msgstr ""

msgid "Control characters"
msgstr ""

msgid ""
"If the content to be serialized contains control characters that are not "
"accepted in the XML 1.0 standard, the serialization will fail with a :exc:"
"`ValueError` exception. Read also the W3C's explanation of `HTML, XHTML, XML "
"and Control Codes <https://www.w3.org/International/questions/qa-controls>`_."
msgstr ""

msgid "JSON"
msgstr ""

msgid ""
"When staying with the same example data as before it would be serialized as "
"JSON in the following way::"
msgstr ""

msgid ""
"The formatting here is a bit simpler than with XML. The whole collection is "
"just represented as an array and the objects are represented by JSON objects "
"with three properties: \"pk\", \"model\" and \"fields\". \"fields\" is again "
"an object containing each field's name and value as property and property-"
"value respectively."
msgstr ""

msgid ""
"Foreign keys just have the PK of the linked object as property value. "
"ManyToMany-relations are serialized for the model that defines them and are "
"represented as a list of PKs."
msgstr ""

msgid ""
"Be aware that not all Django output can be passed unmodified to :mod:`json`. "
"For example, if you have some custom type in an object to be serialized, "
"you'll have to write a custom :mod:`json` encoder for it. Something like "
"this will work::"
msgstr ""

msgid ""
"You can then pass ``cls=LazyEncoder`` to the ``serializers.serialize()`` "
"function::"
msgstr ""

msgid ""
"Also note that GeoDjango provides a :doc:`customized GeoJSON serializer </"
"ref/contrib/gis/serializers>`."
msgstr ""

msgid "``DjangoJSONEncoder``"
msgstr ""

msgid ""
"The JSON serializer uses ``DjangoJSONEncoder`` for encoding. A subclass of :"
"class:`~json.JSONEncoder`, it handles these additional types:"
msgstr ""

msgid ":class:`~datetime.datetime`"
msgstr ""

msgid ""
"A string of the form ``YYYY-MM-DDTHH:mm:ss.sssZ`` or ``YYYY-MM-DDTHH:mm:ss."
"sss+HH:MM`` as defined in `ECMA-262`_."
msgstr ""

msgid ":class:`~datetime.date`"
msgstr ""

msgid "A string of the form ``YYYY-MM-DD`` as defined in `ECMA-262`_."
msgstr ""

msgid ":class:`~datetime.time`"
msgstr ""

msgid "A string of the form ``HH:MM:ss.sss`` as defined in `ECMA-262`_."
msgstr ""

msgid ":class:`~datetime.timedelta`"
msgstr ""

msgid ""
"A string representing a duration as defined in ISO-8601. For example, "
"``timedelta(days=1, hours=2, seconds=3.4)`` is represented as "
"``'P1DT02H00M03.400000S'``."
msgstr ""

msgid ""
":class:`~decimal.Decimal`, ``Promise`` (``django.utils.functional.lazy()`` "
"objects), :class:`~uuid.UUID`"
msgstr ""

msgid "A string representation of the object."
msgstr ""

msgid "YAML"
msgstr ""

msgid ""
"YAML serialization looks quite similar to JSON. The object list is "
"serialized as a sequence mappings with the keys \"pk\", \"model\" and "
"\"fields\". Each field is again a mapping with the key being name of the "
"field and the value the value::"
msgstr ""

msgid ""
"Referential fields are again just represented by the PK or sequence of PKs."
msgstr ""

msgid "Natural keys"
msgstr ""

msgid ""
"The default serialization strategy for foreign keys and many-to-many "
"relations is to serialize the value of the primary key(s) of the objects in "
"the relation. This strategy works well for most objects, but it can cause "
"difficulty in some circumstances."
msgstr ""

msgid ""
"Consider the case of a list of objects that have a foreign key referencing :"
"class:`~django.contrib.contenttypes.models.ContentType`. If you're going to "
"serialize an object that refers to a content type, then you need to have a "
"way to refer to that content type to begin with. Since ``ContentType`` "
"objects are automatically created by Django during the database "
"synchronization process, the primary key of a given content type isn't easy "
"to predict; it will depend on how and when :djadmin:`migrate` was executed. "
"This is true for all models which automatically generate objects, notably "
"including :class:`~django.contrib.auth.models.Permission`, :class:`~django."
"contrib.auth.models.Group`, and :class:`~django.contrib.auth.models.User`."
msgstr ""

msgid ""
"You should never include automatically generated objects in a fixture or "
"other serialized data. By chance, the primary keys in the fixture may match "
"those in the database and loading the fixture will have no effect. In the "
"more likely case that they don't match, the fixture loading will fail with "
"an :class:`~django.db.IntegrityError`."
msgstr ""

msgid ""
"There is also the matter of convenience. An integer id isn't always the most "
"convenient way to refer to an object; sometimes, a more natural reference "
"would be helpful."
msgstr ""

msgid ""
"It is for these reasons that Django provides *natural keys*. A natural key "
"is a tuple of values that can be used to uniquely identify an object "
"instance without using the primary key value."
msgstr ""

msgid "Deserialization of natural keys"
msgstr ""

msgid "Consider the following two models::"
msgstr ""

msgid ""
"Ordinarily, serialized data for ``Book`` would use an integer to refer to "
"the author. For example, in JSON, a Book might be serialized as::"
msgstr ""

msgid ""
"This isn't a particularly natural way to refer to an author. It requires "
"that you know the primary key value for the author; it also requires that "
"this primary key value is stable and predictable."
msgstr ""

msgid ""
"However, if we add natural key handling to Person, the fixture becomes much "
"more humane. To add natural key handling, you define a default Manager for "
"Person with a ``get_by_natural_key()`` method. In the case of a Person, a "
"good natural key might be the pair of first and last name::"
msgstr ""

msgid "Now books can use that natural key to refer to ``Person`` objects::"
msgstr ""

msgid ""
"When you try to load this serialized data, Django will use the "
"``get_by_natural_key()`` method to resolve ``[\"Douglas\", \"Adams\"]`` into "
"the primary key of an actual ``Person`` object."
msgstr ""

msgid ""
"Whatever fields you use for a natural key must be able to uniquely identify "
"an object. This will usually mean that your model will have a uniqueness "
"clause (either unique=True on a single field, or ``unique_together`` over "
"multiple fields) for the field or fields in your natural key. However, "
"uniqueness doesn't need to be enforced at the database level. If you are "
"certain that a set of fields will be effectively unique, you can still use "
"those fields as a natural key."
msgstr ""

msgid ""
"Deserialization of objects with no primary key will always check whether the "
"model's manager has a ``get_by_natural_key()`` method and if so, use it to "
"populate the deserialized object's primary key."
msgstr ""

msgid "Serialization of natural keys"
msgstr ""

msgid ""
"So how do you get Django to emit a natural key when serializing an object? "
"Firstly, you need to add another method -- this time to the model itself::"
msgstr ""

msgid ""
"That method should always return a natural key tuple -- in this example, "
"``(first name, last name)``. Then, when you call ``serializers."
"serialize()``, you provide ``use_natural_foreign_keys=True`` or "
"``use_natural_primary_keys=True`` arguments::"
msgstr ""

msgid ""
"When ``use_natural_foreign_keys=True`` is specified, Django will use the "
"``natural_key()`` method to serialize any foreign key reference to objects "
"of the type that defines the method."
msgstr ""

msgid ""
"When ``use_natural_primary_keys=True`` is specified, Django will not provide "
"the primary key in the serialized data of this object since it can be "
"calculated during deserialization::"
msgstr ""

msgid ""
"This can be useful when you need to load serialized data into an existing "
"database and you cannot guarantee that the serialized primary key value is "
"not already in use, and do not need to ensure that deserialized objects "
"retain the same primary keys."
msgstr ""

msgid ""
"If you are using :djadmin:`dumpdata` to generate serialized data, use the :"
"option:`dumpdata --natural-foreign` and :option:`dumpdata --natural-primary` "
"command line flags to generate natural keys."
msgstr ""

msgid ""
"You don't need to define both ``natural_key()`` and "
"``get_by_natural_key()``. If you don't want Django to output natural keys "
"during serialization, but you want to retain the ability to load natural "
"keys, then you can opt to not implement the ``natural_key()`` method."
msgstr ""

msgid ""
"Conversely, if (for some strange reason) you want Django to output natural "
"keys during serialization, but *not* be able to load those key values, just "
"don't define the ``get_by_natural_key()`` method."
msgstr ""

msgid "Dependencies during serialization"
msgstr ""

msgid ""
"Since natural keys rely on database lookups to resolve references, it is "
"important that the data exists before it is referenced. You can't make a "
"\"forward reference\" with natural keys -- the data you're referencing must "
"exist before you include a natural key reference to that data."
msgstr ""

msgid ""
"To accommodate this limitation, calls to :djadmin:`dumpdata` that use the :"
"option:`dumpdata --natural-foreign` option will serialize any model with a "
"``natural_key()`` method before serializing standard primary key objects."
msgstr ""

msgid ""
"However, this may not always be enough. If your natural key refers to "
"another object (by using a foreign key or natural key to another object as "
"part of a natural key), then you need to be able to ensure that the objects "
"on which a natural key depends occur in the serialized data before the "
"natural key requires them."
msgstr ""

msgid ""
"To control this ordering, you can define dependencies on your "
"``natural_key()`` methods. You do this by setting a ``dependencies`` "
"attribute on the ``natural_key()`` method itself."
msgstr ""

msgid ""
"For example, let's add a natural key to the ``Book`` model from the example "
"above::"
msgstr ""

msgid ""
"The natural key for a ``Book`` is a combination of its name and its author. "
"This means that ``Person`` must be serialized before ``Book``. To define "
"this dependency, we add one extra line::"
msgstr ""

msgid ""
"This definition ensures that all ``Person`` objects are serialized before "
"any ``Book`` objects. In turn, any object referencing ``Book`` will be "
"serialized after both ``Person`` and ``Book`` have been serialized."
msgstr ""

msgid "Django settings"
msgstr "Django settings"

msgid ""
"A Django settings file contains all the configuration of your Django "
"installation. This document explains how settings work and which settings "
"are available."
msgstr ""
"Django的settings文件包含Django应用的所有配置项。该文档会介绍settings是如何运"
"行，以及有哪些设置项是可用的。"

msgid "The basics"
msgstr "基础"

msgid "A settings file is just a Python module with module-level variables."
msgstr "配置文件只是一个使用模块级变量的一个Python模块。"

msgid "Here are a couple of example settings::"
msgstr "一组配置例子::"

msgid ""
"If you set :setting:`DEBUG` to ``False``, you also need to properly set the :"
"setting:`ALLOWED_HOSTS` setting."
msgstr ""

msgid "Because a settings file is a Python module, the following apply:"
msgstr "因为配置文件是Python模块，所以要注意以下几项:"

msgid "It doesn't allow for Python syntax errors."
msgstr "不能有Python语法错误"

msgid ""
"It can assign settings dynamically using normal Python syntax. For example::"
msgstr "可以用Python语法实现动态配置，例如::"

msgid "It can import values from other settings files."
msgstr "可以从其他配置文件中引入变量"

msgid "Designating the settings"
msgstr "指定配置文件"

msgid ""
"When you use Django, you have to tell it which settings you're using. Do "
"this by using an environment variable, ``DJANGO_SETTINGS_MODULE``."
msgstr ""
"使用Django时要通知Django当前使用的是哪个配置文件。可以改变环境变量 "
"``DJANGO_SETTINGS_MODULE`` 实现这一点。"

msgid ""
"The value of ``DJANGO_SETTINGS_MODULE`` should be in Python path syntax, e."
"g. ``mysite.settings``. Note that the settings module should be on the "
"Python `import search path`_."
msgstr ""
"``DJANGO_SETTINGS_MODULE`` 的值是一个符合Python语法的路径，比如 ``mysite."
"settings`` 。要注意settings模块应该在Python可搜索到的路径中 `import search "
"path`_."

msgid "The ``django-admin`` utility"
msgstr ""

msgid ""
"When using :doc:`django-admin </ref/django-admin>`, you can either set the "
"environment variable once, or explicitly pass in the settings module each "
"time you run the utility."
msgstr ""

msgid "Example (Unix Bash shell)::"
msgstr "例子（Unix Bash shell）::"

msgid "Example (Windows shell)::"
msgstr "例子（Windows shell）::"

msgid ""
"Use the ``--settings`` command-line argument to specify the settings "
"manually::"
msgstr "使用 ``--settings`` 命令行参数指定配置模块路径::"

msgid "On the server (``mod_wsgi``)"
msgstr ""

msgid ""
"In your live server environment, you'll need to tell your WSGI application "
"what settings file to use. Do that with ``os.environ``::"
msgstr ""
"在服务器环境下，要通知WSGI应用当前使用的是哪个配置文件，用到 ``os.environ``::"

msgid ""
"Read the :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/"
"modwsgi>` for more information and other common elements to a Django WSGI "
"application."
msgstr ""
"阅读 :doc:`Django mod_wsgi documentation </howto/deployment/wsgi/modwsgi>` 了"
"解更多关于Django WSGI应用的信息和相关设置。"

msgid "Default settings"
msgstr "默认配置"

msgid ""
"A Django settings file doesn't have to define any settings if it doesn't "
"need to. Each setting has a sensible default value. These defaults live in "
"the module :file:`django/conf/global_settings.py`."
msgstr ""
"在无需配置的情况下，Django配置文件没必要定义任何配置项。因为每个配置项都有一"
"个明确的默认值。默认值都保存在模块 :file:`django/conf/global_settings.py` "
"中。"

msgid "Here's the algorithm Django uses in compiling settings:"
msgstr "Django按如下算法编译配置模块:"

msgid "Load settings from ``global_settings.py``."
msgstr "从 ``global_settings.py`` 中加载配置项"

msgid ""
"Load settings from the specified settings file, overriding the global "
"settings as necessary."
msgstr "从指定的配置文件中加载配置项, 覆盖对应的全局配置项."

msgid ""
"Note that a settings file should *not* import from ``global_settings``, "
"because that's redundant."
msgstr ""
"注意: 配置文件中不要再重复引用 ``global_settings`` , 因为这样做是多余的."

msgid "Seeing which settings you've changed"
msgstr "查看你已经更改了哪个配置项"

msgid ""
"There's an easy way to view which of your settings deviate from the default "
"settings. The command ``python manage.py diffsettings`` displays differences "
"between the current settings file and Django's default settings."
msgstr ""
"查看你修改了哪几个配置项很容易, 在命令行输入 ``python manage.py "
"diffsettings`` 就会显示当前配置与默认配置中的不同."

msgid "For more, see the :djadmin:`diffsettings` documentation."
msgstr "想了解更多, 可以查看 :djadmin:`diffsettings` 文档."

msgid "Using settings in Python code"
msgstr "在Python代码中使用settings"

msgid ""
"In your Django apps, use settings by importing the object ``django.conf."
"settings``. Example::"
msgstr "在具体的Django应用中, 通过引入 ``django.conf.settings`` 使用配置, 例::"

msgid ""
"Note that ``django.conf.settings`` isn't a module -- it's an object. So "
"importing individual settings is not possible::"
msgstr ""
"注意 ``django.conf.settings`` 并不是一个模块！-- 而是一个对象！所以引入某个单"
"独的设置项是不可能的::"

msgid ""
"Also note that your code should *not* import from either ``global_settings`` "
"or your own settings file. ``django.conf.settings`` abstracts the concepts "
"of default settings and site-specific settings; it presents a single "
"interface. It also decouples the code that uses settings from the location "
"of your settings."
msgstr ""
"还要注意 *不应该* 直接引入 ``global_settings`` 和你自己的配置文件. ``django."
"conf.settings`` 整合了默认配置和网站指定配置, 从而只提供一个接口读取配置. 它"
"也解耦了使用自定义配置文件的代码."

msgid "Altering settings at runtime"
msgstr "运行时更改设置"

msgid ""
"You shouldn't alter settings in your applications at runtime. For example, "
"don't do this in a view::"
msgstr "不建议在运行时更改设置. 比如, 不要在view中这样用::"

msgid "The only place you should assign to settings is in a settings file."
msgstr "应该只在settings文件中更改设置."

msgid "Security"
msgstr "安全"

msgid ""
"Because a settings file contains sensitive information, such as the database "
"password, you should make every attempt to limit access to it. For example, "
"change its file permissions so that only you and your Web server's user can "
"read it. This is especially important in a shared-hosting environment."
msgstr ""
"由于配置文件包含敏感信息, 比如数据库密码, 所以应该限制对配置文件的访问. 比如"
"更改文件权限, 从而只能令你和你的WEB服务器能读取配置文件. 这在共享主机的环境中"
"非常重要!"

msgid "Available settings"
msgstr "可用的配置项"

msgid ""
"For a full list of available settings, see the :doc:`settings reference </"
"ref/settings>`."
msgstr "查看 :doc:`settings reference </ref/settings>` 了解完整的配置项列表."

msgid "Creating your own settings"
msgstr "创建你自己的配置文件"

msgid ""
"There's nothing stopping you from creating your own settings, for your own "
"Django apps. Just follow these guidelines:"
msgstr ""

msgid "Setting names must be all uppercase."
msgstr ""

msgid "Don't reinvent an already-existing setting."
msgstr "不要重新设置已存在的配置项."

msgid ""
"For settings that are sequences, Django itself uses lists, but this is only "
"a convention."
msgstr ""

msgid "Using settings without setting ``DJANGO_SETTINGS_MODULE``"
msgstr ""

msgid ""
"In some cases, you might want to bypass the ``DJANGO_SETTINGS_MODULE`` "
"environment variable. For example, if you're using the template system by "
"itself, you likely don't want to have to set up an environment variable "
"pointing to a settings module."
msgstr ""
"某些场合中, 你想绕过 ``DJANGO_SETTINGS_MODULE`` 环境变量来进行配置. 比如, 你"
"正在使用django自带的模板系统, 而你并不想使用环境变量指定某个具体的配置文件."

msgid ""
"In these cases, you can configure Django's settings manually. Do this by "
"calling:"
msgstr "在这种情况下, 可以手动设定Django的配置项. 要用到下面这个方法:"

msgid ""
"Pass ``configure()`` as many keyword arguments as you'd like, with each "
"keyword argument representing a setting and its value. Each argument name "
"should be all uppercase, with the same name as the settings described above. "
"If a particular setting is not passed to ``configure()`` and is needed at "
"some later point, Django will use the default setting value."
msgstr ""
"通过 ``configure()`` 可以设置任何配置项, 每个参数对应一个值. 参数名称必须大"
"写, 而且参数名必须是真实存在. 没有在 ``configure()`` 中出现的设置项在随后用到"
"时, 仍会使用默认值."

msgid ""
"Configuring Django in this fashion is mostly necessary -- and, indeed, "
"recommended -- when you're using a piece of the framework inside a larger "
"application."
msgstr ""
"如果你并不想使用整个框架, 仅仅是其中一小部分时, 如上述这般配置Django是非常必"
"要的. 事实上, 我们建议您这样做."

msgid ""
"Consequently, when configured via ``settings.configure()``, Django will not "
"make any modifications to the process environment variables (see the "
"documentation of :setting:`TIME_ZONE` for why this would normally occur). "
"It's assumed that you're already in full control of your environment in "
"these cases."
msgstr ""
"因此, 通过 ``settings.configure()`` 配置django时, 并不会对当前进程的环境变量"
"做任何修改.（可以查看 :setting:`TIME_ZONE` 了解为什么要这么做）. 这意味着在上"
"述情况下你仍然完全掌控着当前环境."

msgid "Custom default settings"
msgstr "定制默认配置项"

msgid ""
"If you'd like default values to come from somewhere other than ``django.conf."
"global_settings``, you can pass in a module or class that provides the "
"default settings as the ``default_settings`` argument (or as the first "
"positional argument) in the call to ``configure()``."
msgstr ""
"如果你实在不想使用 ``django.conf.global_settings``, 而想自定义配置默认值, 你"
"可以在调用 ``configure()`` 时使用 ``default_settings`` 参数(或是默认做为第一"
"个参数传入). 该参数是一个提供默认值的模块或是类."

msgid ""
"In this example, default settings are taken from ``myapp_defaults``, and "
"the :setting:`DEBUG` setting is set to ``True``, regardless of its value in "
"``myapp_defaults``::"
msgstr ""
"在下面这个例子中, 由 ``myapp_defaults`` 提供默认值, 并令 :setting:`DEBUG` 被"
"置为 ``True`` 而不是从 ``myapp_defaults`` 中获取::"

msgid ""
"The following example, which uses ``myapp_defaults`` as a positional "
"argument, is equivalent::"
msgstr ""
"接下来例子使用 ``myapp_defaults`` 做为一个位置参数, 这和上面的效果是等同的::"

msgid ""
"Normally, you will not need to override the defaults in this fashion. The "
"Django defaults are sufficiently tame that you can safely use them. Be aware "
"that if you do pass in a new default module, it entirely *replaces* the "
"Django defaults, so you must specify a value for every possible setting that "
"might be used in that code you are importing. Check in ``django.conf."
"settings.global_settings`` for the full list."
msgstr ""
"一般来说, 没必要自行设置默认值. Django的默认设置是比较宽松的, 你可以放心地使"
"用. 要注意的是, 如果你传入了新的默认模块, 那它就会完全 *替换* Django本身的默"
"认设置. 因此, 你必须为接下来可能会用到的所有设置项都重新指定默认值. 查看 "
"``django.conf.settings.global_settings`` 了解全部默认值."

msgid "Either ``configure()`` or ``DJANGO_SETTINGS_MODULE`` is required"
msgstr ""

msgid ""
"If you're not setting the ``DJANGO_SETTINGS_MODULE`` environment variable, "
"you *must* call ``configure()`` at some point before using any code that "
"reads settings."
msgstr ""
"在没有设置 ``DJANGO_SETTINGS_MODULE`` 环境的情况下, 就 *必须* 在运行读取配置"
"项的代码之前就调用 ``configure()`` ."

msgid ""
"If you don't set ``DJANGO_SETTINGS_MODULE`` and don't call ``configure()``, "
"Django will raise an ``ImportError`` exception the first time a setting is "
"accessed."
msgstr ""
"如果你没有设置 ``DJANGO_SETTINGS_MODULE`` 也没有调用 ``configure()`` , 那么"
"Django会在第一次访问配置项时抛出 ``ImportError`` 异常."

msgid ""
"If you set ``DJANGO_SETTINGS_MODULE``, access settings values somehow, "
"*then* call ``configure()``, Django will raise a ``RuntimeError`` indicating "
"that settings have already been configured. There is a property just for "
"this purpose:"
msgstr ""
"如果已经调了 ``DJANGO_SETTINGS_MODULE`` , 再调用 ``configure()`` 的话, Django"
"也会抛出一个 ``RuntimeError`` 异常, 表明已经配置了settings."

msgid ""
"Also, it's an error to call ``configure()`` more than once, or to call "
"``configure()`` after any setting has been accessed."
msgstr ""
"重复调用 ``configure()`` 或是在访问任何一个配置项后再调用 ``configure()`` , "
"也会引起错误."

msgid ""
"It boils down to this: Use exactly one of either ``configure()`` or "
"``DJANGO_SETTINGS_MODULE``. Not both, and not neither."
msgstr ""
"这意味着: 确保要使用 ``configure()`` 或 ``DJANGO_SETTINGS_MODULE`` 其中一个, "
"不要多, 也不要少."

msgid "Calling ``django.setup()`` is required for \"standalone\" Django usage"
msgstr ""

msgid ""
"If you're using components of Django \"standalone\" -- for example, writing "
"a Python script which loads some Django templates and renders them, or uses "
"the ORM to fetch some data -- there's one more step you'll need in addition "
"to configuring settings."
msgstr ""

msgid ""
"After you've either set :envvar:`DJANGO_SETTINGS_MODULE` or called "
"``configure()``, you'll need to call :func:`django.setup()` to load your "
"settings and populate Django's application registry. For example::"
msgstr ""

msgid ""
"Note that calling ``django.setup()`` is only necessary if your code is truly "
"standalone. When invoked by your Web server, or through :doc:`django-admin </"
"ref/django-admin>`, Django will handle this for you."
msgstr ""

msgid "``django.setup()`` may only be called once."
msgstr ""

msgid ""
"Therefore, avoid putting reusable application logic in standalone scripts so "
"that you have to import from the script elsewhere in your application. If "
"you can't avoid that, put the call to ``django.setup()`` inside an ``if`` "
"block::"
msgstr ""

msgid ":doc:`The Settings Reference </ref/settings>`"
msgstr ""

msgid "Contains the complete list of core and contrib app settings."
msgstr ""

msgid "Signals"
msgstr "信号"

msgid ""
"Django includes a \"signal dispatcher\" which helps allow decoupled "
"applications get notified when actions occur elsewhere in the framework. In "
"a nutshell, signals allow certain *senders* to notify a set of *receivers* "
"that some action has taken place. They're especially useful when many pieces "
"of code may be interested in the same events."
msgstr ""

msgid ""
"Django provides a :doc:`set of built-in signals </ref/signals>` that let "
"user code get notified by Django itself of certain actions. These include "
"some useful notifications:"
msgstr ""

msgid ""
":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals."
"post_save`"
msgstr ""

msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.save` method "
"is called."
msgstr ""

msgid ""
":data:`django.db.models.signals.pre_delete` & :data:`django.db.models."
"signals.post_delete`"
msgstr ""

msgid ""
"Sent before or after a model's :meth:`~django.db.models.Model.delete` method "
"or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is "
"called."
msgstr ""

msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

msgid ""
"Sent when a :class:`~django.db.models.ManyToManyField` on a model is changed."
msgstr ""

msgid ""
":data:`django.core.signals.request_started` & :data:`django.core.signals."
"request_finished`"
msgstr ""

msgid "Sent when Django starts or finishes an HTTP request."
msgstr ""

msgid ""
"See the :doc:`built-in signal documentation </ref/signals>` for a complete "
"list, and a complete explanation of each signal."
msgstr ""

msgid "You can also `define and send your own custom signals`_; see below."
msgstr ""

msgid "Listening to signals"
msgstr ""

msgid ""
"To receive a signal, register a *receiver* function using the :meth:`Signal."
"connect` method. The receiver function is called when the signal is sent."
msgstr ""

msgid ""
"The callback function which will be connected to this signal. See :ref:"
"`receiver-functions` for more information."
msgstr ""

msgid ""
"Specifies a particular sender to receive signals from. See :ref:`connecting-"
"to-specific-signals` for more information."
msgstr ""

msgid ""
"Django stores signal handlers as weak references by default. Thus, if your "
"receiver is a local function, it may be garbage collected. To prevent this, "
"pass ``weak=False`` when you call the signal's ``connect()`` method."
msgstr ""

msgid ""
"A unique identifier for a signal receiver in cases where duplicate signals "
"may be sent. See :ref:`preventing-duplicate-signals` for more information."
msgstr ""

msgid ""
"Let's see how this works by registering a signal that gets called after each "
"HTTP request is finished. We'll be connecting to the :data:`~django.core."
"signals.request_finished` signal."
msgstr ""

msgid "Receiver functions"
msgstr ""

msgid ""
"First, we need to define a receiver function. A receiver can be any Python "
"function or method::"
msgstr ""

msgid ""
"Notice that the function takes a ``sender`` argument, along with wildcard "
"keyword arguments (``**kwargs``); all signal handlers must take these "
"arguments."
msgstr ""

msgid ""
"We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` "
"argument. All signals send keyword arguments, and may change those keyword "
"arguments at any time. In the case of :data:`~django.core.signals."
"request_finished`, it's documented as sending no arguments, which means we "
"might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr ""

msgid ""
"This would be wrong -- in fact, Django will throw an error if you do so. "
"That's because at any point arguments could get added to the signal and your "
"receiver must be able to handle those new arguments."
msgstr ""

msgid "Connecting receiver functions"
msgstr ""

msgid ""
"There are two ways you can connect a receiver to a signal. You can take the "
"manual connect route::"
msgstr ""

msgid "Alternatively, you can use a :func:`receiver` decorator:"
msgstr ""

msgid "A signal or a list of signals to connect a function to."
msgstr ""

msgid "Here's how you connect with the decorator::"
msgstr ""

msgid ""
"Now, our ``my_callback`` function will be called each time a request "
"finishes."
msgstr ""

msgid "Where should this code live?"
msgstr "我的代码该放在哪？"

msgid ""
"Strictly speaking, signal handling and registration code can live anywhere "
"you like, although it's recommended to avoid the application's root module "
"and its ``models`` module to minimize side-effects of importing code."
msgstr ""

msgid ""
"In practice, signal handlers are usually defined in a ``signals`` submodule "
"of the application they relate to. Signal receivers are connected in the :"
"meth:`~django.apps.AppConfig.ready` method of your application configuration "
"class. If you're using the :func:`receiver` decorator, simply import the "
"``signals`` submodule inside :meth:`~django.apps.AppConfig.ready`."
msgstr ""

msgid ""
"The :meth:`~django.apps.AppConfig.ready` method may be executed more than "
"once during testing, so you may want to :ref:`guard your signals from "
"duplication <preventing-duplicate-signals>`, especially if you're planning "
"to send them within tests."
msgstr ""

msgid "Connecting to signals sent by specific senders"
msgstr ""

msgid ""
"Some signals get sent many times, but you'll only be interested in receiving "
"a certain subset of those signals. For example, consider the :data:`django."
"db.models.signals.pre_save` signal sent before a model gets saved. Most of "
"the time, you don't need to know when *any* model gets saved -- just when "
"one *specific* model is saved."
msgstr ""

msgid ""
"In these cases, you can register to receive signals sent only by particular "
"senders. In the case of :data:`django.db.models.signals.pre_save`, the "
"sender will be the model class being saved, so you can indicate that you "
"only want signals sent by some model::"
msgstr ""

msgid ""
"The ``my_handler`` function will only be called when an instance of "
"``MyModel`` is saved."
msgstr ""

msgid ""
"Different signals use different objects as their senders; you'll need to "
"consult the :doc:`built-in signal documentation </ref/signals>` for details "
"of each particular signal."
msgstr ""

msgid "Preventing duplicate signals"
msgstr ""

msgid ""
"In some circumstances, the code connecting receivers to signals may run "
"multiple times. This can cause your receiver function to be registered more "
"than once, and thus called multiple times for a single signal event."
msgstr ""

msgid ""
"If this behavior is problematic (such as when using signals to send an email "
"whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` "
"argument to identify your receiver function. This identifier will usually be "
"a string, although any hashable object will suffice. The end result is that "
"your receiver function will only be bound to the signal once for each unique "
"``dispatch_uid`` value::"
msgstr ""

msgid "Defining and sending signals"
msgstr ""

msgid ""
"Your applications can take advantage of the signal infrastructure and "
"provide its own signals."
msgstr ""

msgid "Defining signals"
msgstr ""

msgid ""
"All signals are :class:`django.dispatch.Signal` instances. The "
"``providing_args`` is a list of the names of arguments the signal will "
"provide to listeners. This is purely documentational, however, as there is "
"nothing that checks that the signal actually provides these arguments to its "
"listeners."
msgstr ""

msgid ""
"This declares a ``pizza_done`` signal that will provide receivers with "
"``toppings`` and ``size`` arguments."
msgstr ""

msgid ""
"Remember that you're allowed to change this list of arguments at any time, "
"so getting the API right on the first try isn't necessary."
msgstr ""

msgid "Sending signals"
msgstr ""

msgid "There are two ways to send signals in Django."
msgstr ""

msgid ""
"To send a signal, call either :meth:`Signal.send` (all built-in signals use "
"this) or :meth:`Signal.send_robust`. You must provide the ``sender`` "
"argument (which is a class most of the time) and may provide as many other "
"keyword arguments as you like."
msgstr ""

msgid "For example, here's how sending our ``pizza_done`` signal might look::"
msgstr ""

msgid ""
"Both ``send()`` and ``send_robust()`` return a list of tuple pairs "
"``[(receiver, response), ... ]``, representing the list of called receiver "
"functions and their response values."
msgstr ""

msgid ""
"``send()`` differs from ``send_robust()`` in how exceptions raised by "
"receiver functions are handled. ``send()`` does *not* catch any exceptions "
"raised by receivers; it simply allows errors to propagate. Thus not all "
"receivers may be notified of a signal in the face of an error."
msgstr ""

msgid ""
"``send_robust()`` catches all errors derived from Python's ``Exception`` "
"class, and ensures all receivers are notified of the signal. If an error "
"occurs, the error instance is returned in the tuple pair for the receiver "
"that raised the error."
msgstr ""

msgid ""
"The tracebacks are present on the ``__traceback__`` attribute of the errors "
"returned when calling ``send_robust()``."
msgstr ""

msgid "Disconnecting signals"
msgstr ""

msgid ""
"To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The "
"arguments are as described in :meth:`.Signal.connect`. The method returns "
"``True`` if a receiver was disconnected and ``False`` if not."
msgstr ""

msgid ""
"The ``receiver`` argument indicates the registered receiver to disconnect. "
"It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr ""

msgid "Cryptographic signing"
msgstr ""

msgid ""
"The golden rule of Web application security is to never trust data from "
"untrusted sources. Sometimes it can be useful to pass data through an "
"untrusted medium. Cryptographically signed values can be passed through an "
"untrusted channel safe in the knowledge that any tampering will be detected."
msgstr ""

msgid ""
"Django provides both a low-level API for signing values and a high-level API "
"for setting and reading signed cookies, one of the most common uses of "
"signing in Web applications."
msgstr ""

msgid "You may also find signing useful for the following:"
msgstr ""

msgid ""
"Generating \"recover my account\" URLs for sending to users who have lost "
"their password."
msgstr ""

msgid "Ensuring data stored in hidden form fields has not been tampered with."
msgstr ""

msgid ""
"Generating one-time secret URLs for allowing temporary access to a protected "
"resource, for example a downloadable file that a user has paid for."
msgstr ""

msgid "Protecting the ``SECRET_KEY``"
msgstr ""

msgid ""
"When you create a new Django project using :djadmin:`startproject`, the "
"``settings.py`` file is generated automatically and gets a random :setting:"
"`SECRET_KEY` value. This value is the key to securing signed data -- it is "
"vital you keep this secure, or attackers could use it to generate their own "
"signed values."
msgstr ""

msgid "Using the low-level API"
msgstr ""

msgid ""
"Django's signing methods live in the ``django.core.signing`` module. To sign "
"a value, first instantiate a ``Signer`` instance::"
msgstr ""

msgid ""
"The signature is appended to the end of the string, following the colon. You "
"can retrieve the original value using the ``unsign`` method::"
msgstr ""

msgid ""
"If the signature or value have been altered in any way, a ``django.core."
"signing.BadSignature`` exception will be raised::"
msgstr ""

msgid ""
"By default, the ``Signer`` class uses the :setting:`SECRET_KEY` setting to "
"generate signatures. You can use a different secret by passing it to the "
"``Signer`` constructor::"
msgstr ""

msgid ""
"Returns a signer which uses ``key`` to generate signatures and ``sep`` to "
"separate values. ``sep`` cannot be in the `URL safe base64 alphabet <https://"
"tools.ietf.org/html/rfc4648#section-5>`_.  This alphabet contains "
"alphanumeric characters, hyphens, and underscores."
msgstr ""

msgid "Using the ``salt`` argument"
msgstr ""

msgid ""
"If you do not wish for every occurrence of a particular string to have the "
"same signature hash, you can use the optional ``salt`` argument to the "
"``Signer`` class. Using a salt will seed the signing hash function with both "
"the salt and your :setting:`SECRET_KEY`::"
msgstr ""

msgid ""
"Using salt in this way puts the different signatures into different "
"namespaces.  A signature that comes from one namespace (a particular salt "
"value) cannot be used to validate the same plaintext string in a different "
"namespace that is using a different salt setting. The result is to prevent "
"an attacker from using a signed string generated in one place in the code as "
"input to another piece of code that is generating (and verifying) signatures "
"using a different salt."
msgstr ""

msgid ""
"Unlike your :setting:`SECRET_KEY`, your salt argument does not need to stay "
"secret."
msgstr ""

msgid "Verifying timestamped values"
msgstr ""

msgid ""
"``TimestampSigner`` is a subclass of :class:`~Signer` that appends a signed "
"timestamp to the value. This allows you to confirm that a signed value was "
"created within a specified period of time::"
msgstr ""

msgid "Sign ``value`` and append current timestamp to it."
msgstr ""

msgid ""
"Checks if ``value`` was signed less than ``max_age`` seconds ago, otherwise "
"raises ``SignatureExpired``. The ``max_age`` parameter can accept an integer "
"or a :py:class:`datetime.timedelta` object."
msgstr ""

msgid "Protecting complex data structures"
msgstr ""

msgid ""
"If you wish to protect a list, tuple or dictionary you can do so using the "
"signing module's ``dumps`` and ``loads`` functions. These imitate Python's "
"pickle module, but use JSON serialization under the hood. JSON ensures that "
"even if your :setting:`SECRET_KEY` is stolen an attacker will not be able to "
"execute arbitrary commands by exploiting the pickle format::"
msgstr ""

msgid ""
"Because of the nature of JSON (there is no native distinction between lists "
"and tuples) if you pass in a tuple, you will get a list from ``signing."
"loads(object)``::"
msgstr ""

msgid ""
"Returns URL-safe, sha1 signed base64 compressed JSON string. Serialized "
"object is signed using :class:`~TimestampSigner`."
msgstr ""

msgid ""
"Reverse of ``dumps()``, raises ``BadSignature`` if signature fails. Checks "
"``max_age`` (in seconds) if given."
msgstr ""

msgid "Templates"
msgstr "模板"

msgid ""
"Being a web framework, Django needs a convenient way to generate HTML "
"dynamically. The most common approach relies on templates. A template "
"contains the static parts of the desired HTML output as well as some special "
"syntax describing how dynamic content will be inserted. For a hands-on "
"example of creating HTML pages with templates, see :doc:`Tutorial 3 </intro/"
"tutorial03>`."
msgstr ""
"作为一个Web框架，Django需要一种动态生成HTML的便捷方法。最常用的方法依赖于模"
"板。模板包含所需HTML输出的静态部分以及描述动态内容将被插入的一些特殊语法。有"
"关创建带有模板的HTML页面的示例，请参阅:doc:`Tutorial 3</intro/tutorial03>"

msgid ""
"A Django project can be configured with one or several template engines (or "
"even zero if you don't use templates). Django ships built-in backends for "
"its own template system, creatively called the Django template language "
"(DTL), and for the popular alternative Jinja2_. Backends for other template "
"languages may be available from third-parties."
msgstr ""
"Django项目可以配置一个或多个模板引擎（或者如果不使用模板，甚至为零）。Django"
"后端内置一个自己的模板系统，创造性地称为Django template language（DTL），和一"
"个流行的替代品JICAN2*。后端也可以使用第三方提供其他可用的模板语言。"

msgid ""
"Django defines a standard API for loading and rendering templates regardless "
"of the backend. Loading consists of finding the template for a given "
"identifier and preprocessing it, usually compiling it to an in-memory "
"representation. Rendering means interpolating the template with context data "
"and returning the resulting string."
msgstr ""
"Django定义了一个标准的API，用于加载和渲染模板，而不用考虑后端的模板系统。加载"
"包括查找给定标识符的模板并对其进行预处理，通常将其编译的结果保存在内存中。渲"
"染工具将上下文数据插入模板并返回结果字符串。"

msgid ""
"The :doc:`Django template language </ref/templates/language>` is Django's "
"own template system. Until Django 1.8 it was the only built-in option "
"available. It's a good template library even though it's fairly opinionated "
"and sports a few idiosyncrasies. If you don't have a pressing reason to "
"choose another backend, you should use the DTL, especially if you're writing "
"a pluggable application and you intend to distribute templates. Django's "
"contrib apps that include templates, like :doc:`django.contrib.admin </ref/"
"contrib/admin/index>`, use the DTL."
msgstr ""
"Doc：Django template language </ref/templates/language>是Django自己的模板系"
"统。直到Django 1.8，它是唯一可用的内置选项。这是一个很好的模板库，即使它是相"
"当僵硬和使用时带有它自己特质。如果您没有紧迫的理由需要去选择另一个后端，则应"
"该使用DTL，特别是如果您正在编写可插入的应用程序并打算分发模板。在 Django's "
"contrib apps 中的有些模板，比如:doc:`django.contrib.admin </ref/contrib/"
"admin/index>，使用DTL。"

msgid ""
"For historical reasons, both the generic support for template engines and "
"the implementation of the Django template language live in the ``django."
"template`` namespace."
msgstr ""
"由于历史原因，模板引擎的通用支持和Django模板语言的实现都存在于``django."
"template`` 模块的命名空间中。"

msgid ""
"The template system isn't safe against untrusted template authors. For "
"example, a site shouldn't allow its users to provide their own templates, "
"since template authors can do things like perform XSS attacks and access "
"properties of template variables that may contain sensitive information."
msgstr ""
"模板系统使用不可信的模板作者的模板是不安全的。例如，一个站点不应该允许它的用"
"户提供他们自己的模板，因为模板作者可以做一些事情，比如执行XSS攻击和拿到包含敏"
"感信息的模板变量的访问权。"

msgid "Support for template engines"
msgstr "模板引擎的支持"

msgid "Configuration"
msgstr "配置"

msgid ""
"Templates engines are configured with the :setting:`TEMPLATES` setting. It's "
"a list of configurations, one for each engine. The default value is empty. "
"The ``settings.py`` generated by the :djadmin:`startproject` command defines "
"a more useful value::"
msgstr ""

msgid ""
":setting:`BACKEND <TEMPLATES-BACKEND>` is a dotted Python path to a template "
"engine class implementing Django's template backend API. The built-in "
"backends are :class:`django.template.backends.django.DjangoTemplates` and :"
"class:`django.template.backends.jinja2.Jinja2`."
msgstr ""

msgid ""
"Since most engines load templates from files, the top-level configuration "
"for each engine contains two common settings:"
msgstr ""

msgid ""
":setting:`DIRS <TEMPLATES-DIRS>` defines a list of directories where the "
"engine should look for template source files, in search order."
msgstr ""

msgid ""
":setting:`APP_DIRS <TEMPLATES-APP_DIRS>` tells whether the engine should "
"look for templates inside installed applications. Each backend defines a "
"conventional name for the subdirectory inside applications where its "
"templates should be stored."
msgstr ""

msgid ""
"While uncommon, it's possible to configure several instances of the same "
"backend with different options. In that case you should define a unique :"
"setting:`NAME <TEMPLATES-NAME>` for each engine."
msgstr ""

msgid ""
":setting:`OPTIONS <TEMPLATES-OPTIONS>` contains backend-specific settings."
msgstr ""

msgid ""
"The ``django.template.loader`` module defines two functions to load "
"templates."
msgstr ""

msgid ""
"This function loads the template with the given name and returns a "
"``Template`` object."
msgstr ""

msgid ""
"The exact type of the return value depends on the backend that loaded the "
"template. Each backend has its own ``Template`` class."
msgstr ""

msgid ""
"``get_template()`` tries each template engine in order until one succeeds. "
"If the template cannot be found, it raises :exc:`~django.template."
"TemplateDoesNotExist`. If the template is found but contains invalid syntax, "
"it raises :exc:`~django.template.TemplateSyntaxError`."
msgstr ""

msgid ""
"How templates are searched and loaded depends on each engine's backend and "
"configuration."
msgstr ""

msgid ""
"If you want to restrict the search to a particular template engine, pass the "
"engine's :setting:`NAME <TEMPLATES-NAME>` in the ``using`` argument."
msgstr ""

msgid ""
"``select_template()`` is just like ``get_template()``, except it takes a "
"list of template names. It tries each name in order and returns the first "
"template that exists."
msgstr ""

msgid ""
"If loading a template fails, the following two exceptions, defined in "
"``django.template``, may be raised:"
msgstr ""

msgid ""
"This exception is raised when a template cannot be found. It accepts the "
"following optional arguments for populating the :ref:`template postmortem "
"<template-postmortem>` on the debug page:"
msgstr ""

msgid "``backend``"
msgstr ""

msgid "The template backend instance from which the exception originated."
msgstr ""

msgid "``tried``"
msgstr ""

msgid ""
"A list of sources that were tried when finding the template. This is "
"formatted as a list of tuples containing ``(origin, status)``, where "
"``origin`` is an :ref:`origin-like <template-origin-api>` object and "
"``status`` is a string with the reason the template wasn't found."
msgstr ""

msgid "``chain``"
msgstr ""

msgid ""
"A list of intermediate :exc:`~django.template.TemplateDoesNotExist` "
"exceptions raised when trying to load a template. This is used by functions, "
"such as :func:`~django.template.loader.get_template`, that try to load a "
"given template from multiple engines."
msgstr ""

msgid "This exception is raised when a template was found but contains errors."
msgstr ""

msgid ""
"``Template`` objects returned by ``get_template()`` and "
"``select_template()`` must provide a ``render()`` method with the following "
"signature:"
msgstr ""

msgid "Renders this template with a given context."
msgstr ""

msgid ""
"If ``context`` is provided, it must be a :class:`dict`. If it isn't "
"provided, the engine will render the template with an empty context."
msgstr ""

msgid ""
"If ``request`` is provided, it must be an :class:`~django.http.HttpRequest`. "
"Then the engine must make it, as well as the CSRF token, available in the "
"template. How this is achieved is up to each backend."
msgstr ""

msgid ""
"Here's an example of the search algorithm. For this example the :setting:"
"`TEMPLATES` setting is::"
msgstr ""

msgid ""
"If you call ``get_template('story_detail.html')``, here are the files Django "
"will look for, in order:"
msgstr ""

msgid "``/home/html/example.com/story_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/default/story_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/jinja2/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

msgid ""
"If you call ``select_template(['story_253_detail.html', 'story_detail."
"html'])``, here's what Django will look for:"
msgstr ""

msgid "``/home/html/example.com/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/default/story_253_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/jinja2/story_253_detail.html`` (``'jinja2'`` engine)"
msgstr ""

msgid "When Django finds a template that exists, it stops looking."
msgstr ""

msgid "Tip"
msgstr ""

msgid ""
"You can use :func:`~django.template.loader.select_template()` for flexible "
"template loading. For example, if you've written a news story and want some "
"stories to have custom templates, use something like "
"``select_template(['story_%s_detail.html' % story.id, 'story_detail."
"html'])``. That'll allow you to use a custom template for an individual "
"story, with a fallback template for stories that don't have custom templates."
msgstr ""

msgid ""
"It's possible -- and preferable -- to organize templates in subdirectories "
"inside each directory containing templates. The convention is to make a "
"subdirectory for each Django app, with subdirectories within those "
"subdirectories as needed."
msgstr ""

msgid ""
"Do this for your own sanity. Storing all templates in the root level of a "
"single directory gets messy."
msgstr ""

msgid ""
"To load a template that's within a subdirectory, just use a slash, like so::"
msgstr ""

msgid ""
"Using the same :setting:`TEMPLATES` option as above, this will attempt to "
"load the following templates:"
msgstr ""

msgid "``/home/html/example.com/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/default/news/story_detail.html`` (``'django'`` engine)"
msgstr ""

msgid "``/home/html/jinja2/news/story_detail.html`` (``'jinja2'`` engine)"
msgstr ""

msgid ""
"In addition, to cut down on the repetitive nature of loading and rendering "
"templates, Django provides a shortcut function which automates the process."
msgstr ""
"此外，为了减少加载和渲染模板的重复性，Django 提供了一个自动处理的快捷函数。"

msgid ""
"``render_to_string()`` loads a template like :func:`get_template` and calls "
"its ``render()`` method immediately. It takes the following arguments."
msgstr ""
"``render_to_string()`` 加载一个模板 :func:`get_template` ，并立即调用它的 "
"``render()`` 方法。它需要下面的参数。"

msgid ""
"The name of the template to load and render. If it's a list of template "
"names, Django uses :func:`select_template` instead of :func:`get_template` "
"to find the template."
msgstr ""
"加载和呈现模板的名称。如果是模板名称列表，Django 使用 :func:"
"`select_template` ，而不是 :func:`get_template` 找到模板。"

msgid "A :class:`dict` to be used as the template's context for rendering."
msgstr " :class:`dict` 用作模板的渲染上下文。"

msgid ""
"An optional :class:`~django.http.HttpRequest` that will be available during "
"the template's rendering process."
msgstr " 可选项 :class:`~django.http.HttpRequest` 在模板的渲染过程中可用。"

msgid ""
"An optional template engine :setting:`NAME <TEMPLATES-NAME>`. The search for "
"the template will be restricted to that engine."
msgstr ""
"可选的模板引擎 :setting:`NAME <TEMPLATES-NAME>`。对模板的搜索将限于该引擎。"

msgid "Usage example::"
msgstr "使用实例："

msgid ""
"See also the :func:`~django.shortcuts.render()` shortcut which calls :func:"
"`render_to_string()` and feeds the result into an :class:`~django.http."
"HttpResponse` suitable for returning from a view."
msgstr ""
"还可以参看 :func:`~django.shortcuts.render()` 快捷函数，它调用 :func:"
"`render_to_string()` ，并将结果提供给 :class:`~django.http.HttpResponse` ，适"
"合从视图返回。"

msgid "Finally, you can use configured engines directly:"
msgstr "最后，您可以直接使用配置好的引擎："

msgid "Template engines are available in ``django.template.engines``::"
msgstr "模板引擎可在 ``django.template.engines`` 中使用："

msgid ""
"The lookup key — ``'django'`` in this example — is the engine's :setting:"
"`NAME <TEMPLATES-NAME>`."
msgstr ""
"在这个例子中，查找关键字“django”是引擎的 :setting:`NAME <TEMPLATES-NAME>`。"

msgid "Built-in backends"
msgstr "内置后端"

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"django.DjangoTemplates'`` to configure a Django template engine."
msgstr ""
"设置 :setting:`BACKEND <TEMPLATES-BACKEND>` 为 ``'django.template.backends."
"django.DjangoTemplates'``，以配置 Django 模板引擎。"

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, "
"``DjangoTemplates`` engines look for templates in the ``templates`` "
"subdirectory of installed applications. This generic name was kept for "
"backwards-compatibility."
msgstr ""

msgid ""
"``DjangoTemplates`` engines accept the following :setting:`OPTIONS "
"<TEMPLATES-OPTIONS>`:"
msgstr ""

msgid ""
"``'autoescape'``: a boolean that controls whether HTML autoescaping is "
"enabled."
msgstr ""

msgid "It defaults to ``True``."
msgstr ""

msgid "Only set it to ``False`` if you're rendering non-HTML templates!"
msgstr ""

msgid ""
"``'context_processors'``: a list of dotted Python paths to callables that "
"are used to populate the context when a template is rendered with a request. "
"These callables take a request object as their argument and return a :class:"
"`dict` of items to be merged into the context."
msgstr ""

msgid "It defaults to an empty list."
msgstr ""

msgid "See :class:`~django.template.RequestContext` for more information."
msgstr ""

msgid ""
"``'debug'``: a boolean that turns on/off template debug mode. If it is "
"``True``, the fancy error page will display a detailed report for any "
"exception raised during template rendering. This report contains the "
"relevant snippet of the template with the appropriate line highlighted."
msgstr ""

msgid "It defaults to the value of the :setting:`DEBUG` setting."
msgstr ""

msgid ""
"``'loaders'``: a list of dotted Python paths to template loader classes. "
"Each ``Loader`` class knows how to import templates from a particular "
"source. Optionally, a tuple can be used instead of a string. The first item "
"in the tuple should be the ``Loader`` class name, and subsequent items are "
"passed to the ``Loader`` during initialization."
msgstr ""

msgid ""
"The default depends on the values of :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`."
msgstr ""

msgid "See :ref:`template-loaders` for details."
msgstr ""

msgid ""
"``'string_if_invalid'``: the output, as a string, that the template system "
"should use for invalid (e.g. misspelled) variables."
msgstr ""

msgid "It defaults to an empty string."
msgstr ""

msgid "See :ref:`invalid-template-variables` for details."
msgstr ""

msgid "``'file_charset'``: the charset used to read template files on disk."
msgstr ""

msgid "It defaults to the value of :setting:`FILE_CHARSET`."
msgstr ""

msgid ""
"``'libraries'``: A dictionary of labels and dotted Python paths of template "
"tag modules to register with the template engine. This can be used to add "
"new libraries or provide alternate labels for existing ones. For example::"
msgstr ""

msgid ""
"Libraries can be loaded by passing the corresponding dictionary key to the :"
"ttag:`{% load %}<load>` tag."
msgstr ""

msgid ""
"``'builtins'``: A list of dotted Python paths of template tag modules to add "
"to :doc:`built-ins </ref/templates/builtins>`. For example::"
msgstr ""

msgid ""
"Tags and filters from built-in libraries can be used without first calling "
"the :ttag:`{% load %} <load>` tag."
msgstr ""

msgid "Requires Jinja2_ to be installed:"
msgstr ""

msgid ""
"Set :setting:`BACKEND <TEMPLATES-BACKEND>` to ``'django.template.backends."
"jinja2.Jinja2'`` to configure a Jinja2_ engine."
msgstr ""

msgid ""
"When :setting:`APP_DIRS <TEMPLATES-APP_DIRS>` is ``True``, ``Jinja2`` "
"engines look for templates in the ``jinja2`` subdirectory of installed "
"applications."
msgstr ""

msgid ""
"The most important entry in :setting:`OPTIONS <TEMPLATES-OPTIONS>` is "
"``'environment'``. It's a dotted Python path to a callable returning a "
"Jinja2 environment. It defaults to ``'jinja2.Environment'``. Django invokes "
"that callable and passes other options as keyword arguments. Furthermore, "
"Django adds defaults that differ from Jinja2's for a few options:"
msgstr ""

msgid "``'autoescape'``: ``True``"
msgstr ""

msgid ""
"``'loader'``: a loader configured for :setting:`DIRS <TEMPLATES-DIRS>` and :"
"setting:`APP_DIRS <TEMPLATES-APP_DIRS>`"
msgstr ""

msgid "``'auto_reload'``: ``settings.DEBUG``"
msgstr ""

msgid "``'undefined'``: ``DebugUndefined if settings.DEBUG else Undefined``"
msgstr ""

msgid ""
"``Jinja2`` engines also accept the following :setting:`OPTIONS <TEMPLATES-"
"OPTIONS>`:"
msgstr ""

msgid "Using context processors with Jinja2 templates is discouraged."
msgstr ""

msgid ""
"Context processors are useful with Django templates because Django templates "
"don't support calling functions with arguments. Since Jinja2 doesn't have "
"that limitation, it's recommended to put the function that you would use as "
"a context processor in the global variables available to the template using "
"``jinja2.Environment`` as described below. You can then call that function "
"in the template:"
msgstr ""

msgid ""
"Some Django templates context processors return a fixed value. For Jinja2 "
"templates, this layer of indirection isn't necessary since you can add "
"constants directly in ``jinja2.Environment``."
msgstr ""

msgid ""
"The original use case for adding context processors for Jinja2 involved:"
msgstr ""

msgid "Making an expensive computation that depends on the request."
msgstr ""

msgid "Needing the result in every template."
msgstr ""

msgid "Using the result multiple times in each template."
msgstr ""

msgid ""
"Unless all of these conditions are met, passing a function to the template "
"is simpler and more in line with the design of Jinja2."
msgstr ""

msgid ""
"The default configuration is purposefully kept to a minimum. If a template "
"is rendered with a request (e.g. when using :py:func:`~django.shortcuts."
"render`), the ``Jinja2`` backend adds the globals ``request``, "
"``csrf_input``, and ``csrf_token`` to the context. Apart from that, this "
"backend doesn't create a Django-flavored environment. It doesn't know about "
"Django filters and tags. In order to use Django-specific APIs, you must "
"configure them into the environment."
msgstr ""

msgid "For example, you can create ``myproject/jinja2.py`` with this content::"
msgstr ""

msgid ""
"and set the ``'environment'`` option to ``'myproject.jinja2.environment'``."
msgstr ""

msgid "Then you could use the following constructs in Jinja2 templates:"
msgstr ""

msgid ""
"The concepts of tags and filters exist both in the Django template language "
"and in Jinja2 but they're used differently. Since Jinja2 supports passing "
"arguments to callables in templates, many features that require a template "
"tag or filter in Django templates can be achieved simply by calling a "
"function in Jinja2 templates, as shown in the example above. Jinja2's global "
"namespace removes the need for template context processors. The Django "
"template language doesn't have an equivalent of Jinja2 tests."
msgstr ""

msgid "Custom backends"
msgstr ""

msgid ""
"Here's how to implement a custom template backend in order to use another "
"template system. A template backend is a class that inherits ``django."
"template.backends.base.BaseEngine``. It must implement ``get_template()`` "
"and optionally ``from_string()``. Here's an example for a fictional "
"``foobar`` template library::"
msgstr ""

msgid "See `DEP 182`_ for more information."
msgstr ""

msgid "Debug integration for custom engines"
msgstr ""

msgid ""
"The Django debug page has hooks to provide detailed information when a "
"template error arises. Custom template engines can use these hooks to "
"enhance the traceback information that appears to users. The following hooks "
"are available:"
msgstr ""

msgid "Template postmortem"
msgstr ""

msgid ""
"The postmortem appears when :exc:`~django.template.TemplateDoesNotExist` is "
"raised. It lists the template engines and loaders that were used when trying "
"to find a given template. For example, if two Django engines are configured, "
"the postmortem will appear like:"
msgstr ""

msgid ""
"Custom engines can populate the postmortem by passing the ``backend`` and "
"``tried`` arguments when raising :exc:`~django.template."
"TemplateDoesNotExist`. Backends that use the postmortem :ref:`should specify "
"an origin <template-origin-api>` on the template object."
msgstr ""

msgid "Contextual line information"
msgstr ""

msgid ""
"If an error happens during template parsing or rendering, Django can display "
"the line the error happened on. For example:"
msgstr ""

msgid ""
"Custom engines can populate this information by setting a ``template_debug`` "
"attribute on exceptions raised during parsing and rendering. This attribute "
"is a :class:`dict` with the following values:"
msgstr ""

msgid "``'name'``: The name of the template in which the exception occurred."
msgstr ""

msgid "``'message'``: The exception message."
msgstr ""

msgid ""
"``'source_lines'``: The lines before, after, and including the line the "
"exception occurred on. This is for context, so it shouldn't contain more "
"than 20 lines or so."
msgstr ""

msgid "``'line'``: The line number on which the exception occurred."
msgstr ""

msgid ""
"``'before'``: The content on the error line before the token that raised the "
"error."
msgstr ""

msgid "``'during'``: The token that raised the error."
msgstr ""

msgid ""
"``'after'``: The content on the error line after the token that raised the "
"error."
msgstr ""

msgid "``'total'``: The number of lines in ``source_lines``."
msgstr ""

msgid "``'top'``: The line number where ``source_lines`` starts."
msgstr ""

msgid "``'bottom'``: The line number where ``source_lines`` ends."
msgstr ""

msgid "Given the above template error, ``template_debug`` would look like::"
msgstr ""

msgid "Origin API and 3rd-party integration"
msgstr ""

msgid ""
"Django templates have an :class:`~django.template.base.Origin` object "
"available through the ``template.origin`` attribute. This enables debug "
"information to be displayed in the :ref:`template postmortem <template-"
"postmortem>`, as well as in 3rd-party libraries, like the `Django Debug "
"Toolbar`_."
msgstr ""

msgid ""
"Custom engines can provide their own ``template.origin`` information by "
"creating an object that specifies the following attributes:"
msgstr ""

msgid "``'name'``: The full path to the template."
msgstr ""

msgid ""
"``'template_name'``: The relative path to the template as passed into the "
"the template loading methods."
msgstr ""

msgid ""
"``'loader_name'``: An optional string identifying the function or class used "
"to load the template, e.g. ``django.template.loaders.filesystem.Loader``."
msgstr ""

msgid "The Django template language"
msgstr ""

msgid "Syntax"
msgstr ""

msgid "About this section"
msgstr ""

msgid ""
"This is an overview of the Django template language's syntax. For details "
"see the :doc:`language syntax reference </ref/templates/language>`."
msgstr ""

msgid ""
"A Django template is simply a text document or a Python string marked-up "
"using the Django template language. Some constructs are recognized and "
"interpreted by the template engine. The main ones are variables and tags."
msgstr ""

msgid ""
"A template is rendered with a context. Rendering replaces variables with "
"their values, which are looked up in the context, and executes tags. "
"Everything else is output as is."
msgstr ""

msgid "The syntax of the Django template language involves four constructs."
msgstr ""

msgid "Variables"
msgstr "变量"

msgid ""
"A variable outputs a value from the context, which is a dict-like object "
"mapping keys to values."
msgstr ""

msgid "Variables are surrounded by ``{{`` and ``}}`` like this::"
msgstr ""

msgid ""
"With a context of ``{'first_name': 'John', 'last_name': 'Doe'}``, this "
"template renders to::"
msgstr ""

msgid ""
"Dictionary lookup, attribute lookup and list-index lookups are implemented "
"with a dot notation::"
msgstr ""

msgid ""
"If a variable resolves to a callable, the template system will call it with "
"no arguments and use its result instead of the callable."
msgstr ""

msgid "Tags"
msgstr "标签(Tags)"

msgid "Tags provide arbitrary logic in the rendering process."
msgstr ""

msgid ""
"This definition is deliberately vague. For example, a tag can output "
"content, serve as a control structure e.g. an \"if\" statement or a \"for\" "
"loop, grab content from a database, or even enable access to other template "
"tags."
msgstr ""

msgid "Tags are surrounded by ``{%`` and ``%}`` like this::"
msgstr ""

msgid "Most tags accept arguments::"
msgstr ""

msgid "Some tags require beginning and ending tags::"
msgstr ""

msgid ""
"A :ref:`reference of built-in tags <ref-templates-builtins-tags>` is "
"available as well as :ref:`instructions for writing custom tags <howto-"
"writing-custom-template-tags>`."
msgstr ""

msgid "Filters transform the values of variables and tag arguments."
msgstr ""

msgid "They look like this::"
msgstr ""

msgid ""
"With a context of ``{'django': 'the web framework for perfectionists with "
"deadlines'}``, this template renders to::"
msgstr ""

msgid "Some filters take an argument::"
msgstr ""

msgid ""
"A :ref:`reference of built-in filters <ref-templates-builtins-filters>` is "
"available as well as :ref:`instructions for writing custom filters <howto-"
"writing-custom-template-filters>`."
msgstr ""

msgid "Comments look like this::"
msgstr ""

msgid "A :ttag:`{% comment %} <comment>` tag provides multi-line comments."
msgstr ""

msgid "Components"
msgstr ""

msgid ""
"This is an overview of the Django template language's APIs. For details see "
"the :doc:`API reference </ref/templates/api>`."
msgstr ""

msgid "Engine"
msgstr ""

msgid ""
":class:`django.template.Engine` encapsulates an instance of the Django "
"template system. The main reason for instantiating an :class:`~django."
"template.Engine` directly is to use the Django template language outside of "
"a Django project."
msgstr ""

msgid ""
":class:`django.template.backends.django.DjangoTemplates` is a thin wrapper "
"adapting :class:`django.template.Engine` to Django's template backend API."
msgstr ""

msgid "Template"
msgstr ""

msgid ""
":class:`django.template.Template` represents a compiled template. Templates "
"are obtained with :meth:`Engine.get_template() <django.template.Engine."
"get_template>` or :meth:`Engine.from_string() <django.template.Engine."
"from_string>`"
msgstr ""

msgid ""
"Likewise ``django.template.backends.django.Template`` is a thin wrapper "
"adapting :class:`django.template.Template` to the common template API."
msgstr ""

msgid "Context"
msgstr ""

msgid ""
":class:`django.template.Context` holds some metadata in addition to the "
"context data. It is passed to :meth:`Template.render() <django.template."
"Template.render>` for rendering a template."
msgstr ""

msgid ""
":class:`django.template.RequestContext` is a subclass of :class:`~django."
"template.Context` that stores the current :class:`~django.http.HttpRequest` "
"and runs template context processors."
msgstr ""

msgid ""
"The common API doesn't have an equivalent concept. Context data is passed in "
"a plain :class:`dict` and the current :class:`~django.http.HttpRequest` is "
"passed separately if needed."
msgstr ""

msgid "Loaders"
msgstr ""

msgid ""
"Template loaders are responsible for locating templates, loading them, and "
"returning :class:`~django.template.Template` objects."
msgstr ""

msgid ""
"Django provides several :ref:`built-in template loaders <template-loaders>` "
"and supports :ref:`custom template loaders <custom-template-loaders>`."
msgstr ""

msgid "Context processors"
msgstr ""

msgid ""
"Context processors are functions that receive the current :class:`~django."
"http.HttpRequest` as an argument and return a :class:`dict` of data to be "
"added to the rendering context."
msgstr ""

msgid ""
"Their main use is to add common data shared by all templates to the context "
"without repeating code in every view."
msgstr ""

msgid ""
"Django provides many :ref:`built-in context processors <context-"
"processors>`. Implementing a custom context processor is as simple as "
"defining a function."
msgstr ""

msgid "Advanced testing topics"
msgstr ""

msgid "The request factory"
msgstr ""

msgid ""
"The :class:`~django.test.RequestFactory` shares the same API as the test "
"client. However, instead of behaving like a browser, the RequestFactory "
"provides a way to generate a request instance that can be used as the first "
"argument to any view. This means you can test a view function the same way "
"as you would test any other function -- as a black box, with exactly known "
"inputs, testing for specific outputs."
msgstr ""

msgid ""
"The API for the :class:`~django.test.RequestFactory` is a slightly "
"restricted subset of the test client API:"
msgstr ""

msgid ""
"It only has access to the HTTP methods :meth:`~Client.get()`, :meth:`~Client."
"post()`, :meth:`~Client.put()`, :meth:`~Client.delete()`, :meth:`~Client."
"head()`, :meth:`~Client.options()`, and :meth:`~Client.trace()`."
msgstr ""

msgid ""
"These methods accept all the same arguments *except* for ``follow``. Since "
"this is just a factory for producing requests, it's up to you to handle the "
"response."
msgstr ""

msgid ""
"It does not support middleware. Session and authentication attributes must "
"be supplied by the test itself if required for the view to function properly."
msgstr ""

msgid "The following is a simple unit test using the request factory::"
msgstr ""

msgid "Tests and multiple host names"
msgstr ""

msgid ""
"The :setting:`ALLOWED_HOSTS` setting is validated when running tests. This "
"allows the test client to differentiate between internal and external URLs."
msgstr ""

msgid ""
"Projects that support multitenancy or otherwise alter business logic based "
"on the request's host and use custom host names in tests must include those "
"hosts in :setting:`ALLOWED_HOSTS`."
msgstr ""

msgid ""
"The first and simplest option to do so is to add the hosts to your settings "
"file. For example, the test suite for docs.djangoproject.com includes the "
"following::"
msgstr ""

msgid ""
"and the settings file includes a list of the domains supported by the "
"project::"
msgstr ""

msgid ""
"Another option is to add the required hosts to :setting:`ALLOWED_HOSTS` "
"using :meth:`~django.test.override_settings()` or :attr:`~django.test."
"SimpleTestCase.modify_settings()`. This option may be preferable in "
"standalone apps that can't package their own settings file or for projects "
"where the list of domains is not static (e.g., subdomains for multitenancy). "
"For example, you could write a test for the domain ``http://otherserver/`` "
"as follows::"
msgstr ""

msgid ""
"Disabling :setting:`ALLOWED_HOSTS` checking (``ALLOWED_HOSTS = ['*']``) when "
"running tests prevents the test client from raising a helpful error message "
"if you follow a redirect to an external URL."
msgstr ""

msgid "Tests and multiple databases"
msgstr ""

msgid "Testing primary/replica configurations"
msgstr ""

msgid ""
"If you're testing a multiple database configuration with primary/replica "
"(referred to as master/slave by some databases) replication, this strategy "
"of creating test databases poses a problem. When the test databases are "
"created, there won't be any replication, and as a result, data created on "
"the primary won't be seen on the replica."
msgstr ""

msgid ""
"To compensate for this, Django allows you to define that a database is a "
"*test mirror*. Consider the following (simplified) example database "
"configuration::"
msgstr ""

msgid ""
"In this setup, we have two database servers: ``dbprimary``, described by the "
"database alias ``default``, and ``dbreplica`` described by the alias "
"``replica``. As you might expect, ``dbreplica`` has been configured by the "
"database administrator as a read replica of ``dbprimary``, so in normal "
"activity, any write to ``default`` will appear on ``replica``."
msgstr ""

msgid ""
"If Django created two independent test databases, this would break any tests "
"that expected replication to occur. However, the ``replica`` database has "
"been configured as a test mirror (using the :setting:`MIRROR <TEST_MIRROR>` "
"test setting), indicating that under testing, ``replica`` should be treated "
"as a mirror of ``default``."
msgstr ""

msgid ""
"When the test environment is configured, a test version of ``replica`` will "
"*not* be created. Instead the connection to ``replica`` will be redirected "
"to point at ``default``. As a result, writes to ``default`` will appear on "
"``replica`` -- but because they are actually the same database, not because "
"there is data replication between the two databases."
msgstr ""

msgid "Controlling creation order for test databases"
msgstr ""

msgid ""
"By default, Django will assume all databases depend on the ``default`` "
"database and therefore always create the ``default`` database first. "
"However, no guarantees are made on the creation order of any other databases "
"in your test setup."
msgstr ""

msgid ""
"If your database configuration requires a specific creation order, you can "
"specify the dependencies that exist using the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` test setting. Consider the following (simplified) "
"example database configuration::"
msgstr ""

msgid ""
"Under this configuration, the ``diamonds`` database will be created first, "
"as it is the only database alias without dependencies. The ``default`` and "
"``clubs`` alias will be created next (although the order of creation of this "
"pair is not guaranteed), then ``hearts``, and finally ``spades``."
msgstr ""

msgid ""
"If there are any circular dependencies in the :setting:`DEPENDENCIES "
"<TEST_DEPENDENCIES>` definition, an :exc:`~django.core.exceptions."
"ImproperlyConfigured` exception will be raised."
msgstr ""

msgid "Advanced features of ``TransactionTestCase``"
msgstr ""

msgid ""
"This attribute is a private API. It may be changed or removed without a "
"deprecation period in the future, for instance to accommodate changes in "
"application loading."
msgstr ""

msgid ""
"It's used to optimize Django's own test suite, which contains hundreds of "
"models but no relations between models in different applications."
msgstr ""

msgid ""
"By default, ``available_apps`` is set to ``None``. After each test, Django "
"calls :djadmin:`flush` to reset the database state. This empties all tables "
"and emits the :data:`~django.db.models.signals.post_migrate` signal, which "
"recreates one content type and four permissions for each model. This "
"operation gets expensive proportionally to the number of models."
msgstr ""

msgid ""
"Setting ``available_apps`` to a list of applications instructs Django to "
"behave as if only the models from these applications were available. The "
"behavior of ``TransactionTestCase`` changes as follows:"
msgstr ""

msgid ""
":data:`~django.db.models.signals.post_migrate` is fired before each test to "
"create the content types and permissions for each model in available apps, "
"in case they're missing."
msgstr ""

msgid ""
"After each test, Django empties only tables corresponding to models in "
"available apps. However, at the database level, truncation may cascade to "
"related models in unavailable apps. Furthermore :data:`~django.db.models."
"signals.post_migrate` isn't fired; it will be fired by the next "
"``TransactionTestCase``, after the correct set of applications is selected."
msgstr ""

msgid ""
"Since the database isn't fully flushed, if a test creates instances of "
"models not included in ``available_apps``, they will leak and they may cause "
"unrelated tests to fail. Be careful with tests that use sessions; the "
"default session engine stores them in the database."
msgstr ""

msgid ""
"Since :data:`~django.db.models.signals.post_migrate` isn't emitted after "
"flushing the database, its state after a ``TransactionTestCase`` isn't the "
"same as after a ``TestCase``: it's missing the rows created by listeners to :"
"data:`~django.db.models.signals.post_migrate`. Considering the :ref:`order "
"in which tests are executed <order-of-tests>`, this isn't an issue, provided "
"either all ``TransactionTestCase`` in a given test suite declare "
"``available_apps``, or none of them."
msgstr ""

msgid "``available_apps`` is mandatory in Django's own test suite."
msgstr ""

msgid ""
"Setting ``reset_sequences = True`` on a ``TransactionTestCase`` will make "
"sure sequences are always reset before the test run::"
msgstr ""

msgid ""
"Unless you are explicitly testing primary keys sequence numbers, it is "
"recommended that you do not hard code primary key values in tests."
msgstr ""

msgid ""
"Using ``reset_sequences = True`` will slow down the test, since the primary "
"key reset is a relatively expensive database operation."
msgstr ""

msgid "Using the Django test runner to test reusable applications"
msgstr ""

msgid ""
"If you are writing a :doc:`reusable application </intro/reusable-apps>` you "
"may want to use the Django test runner to run your own test suite and thus "
"benefit from the Django testing infrastructure."
msgstr ""

msgid ""
"A common practice is a *tests* directory next to the application code, with "
"the following structure::"
msgstr ""

msgid "Let's take a look inside a couple of those files:"
msgstr ""

msgid "runtests.py"
msgstr ""

msgid ""
"This is the script that you invoke to run the test suite. It sets up the "
"Django environment, creates the test database and runs the tests."
msgstr ""

msgid ""
"For the sake of clarity, this example contains only the bare minimum "
"necessary to use the Django test runner. You may want to add command-line "
"options for controlling verbosity, passing in specific test labels to run, "
"etc."
msgstr ""

msgid "tests/test_settings.py"
msgstr ""

msgid ""
"This file contains the :doc:`Django settings </topics/settings>` required to "
"run your app's tests."
msgstr ""

msgid ""
"Again, this is a minimal example; your tests may require additional settings "
"to run."
msgstr ""

msgid ""
"Since the *tests* package is included in :setting:`INSTALLED_APPS` when "
"running your tests, you can define test-only models in its ``models.py`` "
"file."
msgstr ""

msgid "Using different testing frameworks"
msgstr ""

msgid ""
"Clearly, :mod:`unittest` is not the only Python testing framework. While "
"Django doesn't provide explicit support for alternative frameworks, it does "
"provide a way to invoke tests constructed for an alternative framework as if "
"they were normal Django tests."
msgstr ""

msgid ""
"When you run ``./manage.py test``, Django looks at the :setting:"
"`TEST_RUNNER` setting to determine what to do. By default, :setting:"
"`TEST_RUNNER` points to ``'django.test.runner.DiscoverRunner'``. This class "
"defines the default Django testing behavior. This behavior involves:"
msgstr ""

msgid "Performing global pre-test setup."
msgstr ""

msgid ""
"Looking for tests in any file below the current directory whose name matches "
"the pattern ``test*.py``."
msgstr ""

msgid "Creating the test databases."
msgstr ""

msgid ""
"Running ``migrate`` to install models and initial data into the test "
"databases."
msgstr ""

msgid "Running the :doc:`system checks </topics/checks>`."
msgstr ""

msgid "Running the tests that were found."
msgstr ""

msgid "Destroying the test databases."
msgstr ""

msgid "Performing global post-test teardown."
msgstr ""

msgid ""
"If you define your own test runner class and point :setting:`TEST_RUNNER` at "
"that class, Django will execute your test runner whenever you run ``./manage."
"py test``. In this way, it is possible to use any test framework that can be "
"executed from Python code, or to modify the Django test execution process to "
"satisfy whatever testing requirements you may have."
msgstr ""

msgid "Defining a test runner"
msgstr ""

msgid ""
"A test runner is a class defining a ``run_tests()`` method. Django ships "
"with a ``DiscoverRunner`` class that defines the default Django testing "
"behavior. This class defines the ``run_tests()`` entry point, plus a "
"selection of other methods that are used to by ``run_tests()`` to set up, "
"execute and tear down the test suite."
msgstr ""

msgid ""
"``DiscoverRunner`` will search for tests in any file matching ``pattern``."
msgstr ""

msgid ""
"``top_level`` can be used to specify the directory containing your top-level "
"Python modules. Usually Django can figure this out automatically, so it's "
"not necessary to specify this option. If specified, it should generally be "
"the directory containing your ``manage.py`` file."
msgstr ""

msgid ""
"``verbosity`` determines the amount of notification and debug information "
"that will be printed to the console; ``0`` is no output, ``1`` is normal "
"output, and ``2`` is verbose output."
msgstr ""

msgid ""
"If ``interactive`` is ``True``, the test suite has permission to ask the "
"user for instructions when the test suite is executed. An example of this "
"behavior would be asking for permission to delete an existing test database. "
"If ``interactive`` is ``False``, the test suite must be able to run without "
"any manual intervention."
msgstr ""

msgid ""
"If ``failfast`` is ``True``, the test suite will stop running after the "
"first test failure is detected."
msgstr ""

msgid ""
"If ``keepdb`` is ``True``, the test suite will use the existing database, or "
"create one if necessary. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

msgid ""
"If ``reverse`` is ``True``, test cases will be executed in the opposite "
"order. This could be useful to debug tests that aren't properly isolated and "
"have side effects. :ref:`Grouping by test class <order-of-tests>` is "
"preserved when using this option."
msgstr ""

msgid ""
"``debug_mode`` specifies what the :setting:`DEBUG` setting should be set to "
"prior to running tests."
msgstr ""

msgid ""
"If ``debug_sql`` is ``True``, failing test cases will output SQL queries "
"logged to the :ref:`django.db.backends logger <django-db-logger>` as well as "
"the traceback. If ``verbosity`` is ``2``, then queries in all tests are "
"output."
msgstr ""

msgid ""
"Django may, from time to time, extend the capabilities of the test runner by "
"adding new arguments. The ``**kwargs`` declaration allows for this "
"expansion. If you subclass ``DiscoverRunner`` or write your own test runner, "
"ensure it accepts ``**kwargs``."
msgstr ""

msgid ""
"Your test runner may also define additional command-line options. Create or "
"override an ``add_arguments(cls, parser)`` class method and add custom "
"arguments by calling ``parser.add_argument()`` inside the method, so that "
"the :djadmin:`test` command will be able to use those arguments."
msgstr ""

msgid ""
"The class used to build the test suite. By default it is set to ``unittest."
"TestSuite``. This can be overridden if you wish to implement different logic "
"for collecting tests."
msgstr ""

msgid ""
"This is the class of the low-level test runner which is used to execute the "
"individual tests and format the results. By default it is set to ``unittest."
"TextTestRunner``. Despite the unfortunate similarity in naming conventions, "
"this is not the same type of class as ``DiscoverRunner``, which covers a "
"broader set of responsibilities. You can override this attribute to modify "
"the way tests are run and reported."
msgstr ""

msgid ""
"This is the class that loads tests, whether from TestCases or modules or "
"otherwise and bundles them into test suites for the runner to execute. By "
"default it is set to ``unittest.defaultTestLoader``. You can override this "
"attribute if your tests are going to be loaded in unusual ways."
msgstr ""

msgid "Run the test suite."
msgstr ""

msgid ""
"``test_labels`` allows you to specify which tests to run and supports "
"several formats (see :meth:`DiscoverRunner.build_suite` for a list of "
"supported formats)."
msgstr ""

msgid ""
"``extra_tests`` is a list of extra ``TestCase`` instances to add to the "
"suite that is executed by the test runner. These extra tests are run in "
"addition to those discovered in the modules listed in ``test_labels``."
msgstr ""

msgid "This method should return the number of tests that failed."
msgstr ""

msgid ""
"Override this class method to add custom arguments accepted by the :djadmin:"
"`test` management command. See :py:meth:`argparse.ArgumentParser."
"add_argument()` for details about adding arguments to a parser."
msgstr ""

msgid ""
"Sets up the test environment by calling :func:`~django.test.utils."
"setup_test_environment` and setting :setting:`DEBUG` to ``self.debug_mode`` "
"(defaults to ``False``)."
msgstr ""

msgid "Constructs a test suite that matches the test labels provided."
msgstr ""

msgid ""
"``test_labels`` is a list of strings describing the tests to be run. A test "
"label can take one of four forms:"
msgstr ""

msgid ""
"``path.to.test_module.TestCase.test_method`` -- Run a single test method in "
"a test case."
msgstr ""

msgid ""
"``path.to.test_module.TestCase`` -- Run all the test methods in a test case."
msgstr ""

msgid ""
"``path.to.module`` -- Search for and run all tests in the named Python "
"package or module."
msgstr ""

msgid ""
"``path/to/directory`` -- Search for and run all tests below the named "
"directory."
msgstr ""

msgid ""
"If ``test_labels`` has a value of ``None``, the test runner will search for "
"tests in all files below the current directory whose names match its "
"``pattern`` (see above)."
msgstr ""

msgid "Returns a ``TestSuite`` instance ready to be run."
msgstr ""

msgid ""
"Creates the test databases by calling :func:`~django.test.utils."
"setup_databases`."
msgstr ""

msgid "Runs the :doc:`system checks </topics/checks>`."
msgstr ""

msgid "Runs the test suite."
msgstr ""

msgid "Returns the result produced by the running the test suite."
msgstr ""

msgid ""
"Returns the keyword arguments to instantiate the ``DiscoverRunner."
"test_runner`` with."
msgstr ""

msgid ""
"Destroys the test databases, restoring pre-test conditions by calling :func:"
"`~django.test.utils.teardown_databases`."
msgstr ""

msgid "Restores the pre-test environment."
msgstr ""

msgid ""
"Computes and returns a return code based on a test suite, and the result "
"from that test suite."
msgstr ""

msgid "Testing utilities"
msgstr ""

msgid "``django.test.utils``"
msgstr ""

msgid ""
"To assist in the creation of your own test runner, Django provides a number "
"of utility methods in the ``django.test.utils`` module."
msgstr ""

msgid ""
"Performs global pre-test setup, such as installing instrumentation for the "
"template rendering system and setting up the dummy email outbox."
msgstr ""

msgid ""
"If ``debug`` isn't ``None``, the :setting:`DEBUG` setting is updated to its "
"value."
msgstr ""

msgid ""
"Performs global post-test teardown, such as removing instrumentation from "
"the template system and restoring normal email services."
msgstr ""

msgid "Creates the test databases."
msgstr ""

msgid ""
"Returns a data structure that provides enough detail to undo the changes "
"that have been made. This data will be provided to the :func:"
"`teardown_databases` function at the conclusion of testing."
msgstr ""

msgid "Destroys the test databases, restoring pre-test conditions."
msgstr ""

msgid ""
"``old_config`` is a data structure defining the changes in the database "
"configuration that need to be reversed. It's the return value of the :meth:"
"`setup_databases` method."
msgstr ""

msgid "``django.db.connection.creation``"
msgstr ""

msgid ""
"The creation module of the database backend also provides some utilities "
"that can be useful during testing."
msgstr ""

msgid "Creates a new test database and runs ``migrate`` against it."
msgstr ""

msgid "``verbosity`` has the same behavior as in ``run_tests()``."
msgstr ""

msgid ""
"``autoclobber`` describes the behavior that will occur if a database with "
"the same name as the test database is discovered:"
msgstr ""

msgid ""
"If ``autoclobber`` is ``False``, the user will be asked to approve "
"destroying the existing database. ``sys.exit`` is called if the user does "
"not approve."
msgstr ""

msgid ""
"If autoclobber is ``True``, the database will be destroyed without "
"consulting the user."
msgstr ""

msgid ""
"``serialize`` determines if Django serializes the database into an in-memory "
"JSON string before running tests (used to restore the database state between "
"tests if you don't have transactions). You can set this to ``False`` to "
"speed up creation time if you don't have any test classes with :ref:"
"`serialized_rollback=True <test-case-serialized-rollback>`."
msgstr ""

msgid ""
"If you are using the default test runner, you can control this with the the :"
"setting:`SERIALIZE <TEST_SERIALIZE>` entry in the :setting:`TEST <DATABASE-"
"TEST>` dictionary."
msgstr ""

msgid ""
"``keepdb`` determines if the test run should use an existing database, or "
"create a new one. If ``True``, the existing database will be used, or "
"created if not present. If ``False``, a new database will be created, "
"prompting the user to remove the existing one, if present."
msgstr ""

msgid "Returns the name of the test database that it created."
msgstr ""

msgid ""
"``create_test_db()`` has the side effect of modifying the value of :setting:"
"`NAME` in :setting:`DATABASES` to match the name of the test database."
msgstr ""

msgid ""
"Destroys the database whose name is the value of :setting:`NAME` in :setting:"
"`DATABASES`, and sets :setting:`NAME` to the value of ``old_database_name``."
msgstr ""

msgid ""
"The ``verbosity`` argument has the same behavior as for :class:`~django.test."
"runner.DiscoverRunner`."
msgstr ""

msgid ""
"If the ``keepdb`` argument is ``True``, then the connection to the database "
"will be closed, but the database will not be destroyed."
msgstr ""

msgid "Integration with ``coverage.py``"
msgstr ""

msgid ""
"Code coverage describes how much source code has been tested. It shows which "
"parts of your code are being exercised by tests and which are not. It's an "
"important part of testing applications, so it's strongly recommended to "
"check the coverage of your tests."
msgstr ""

msgid ""
"Django can be easily integrated with `coverage.py`_, a tool for measuring "
"code coverage of Python programs. First, `install coverage.py`_. Next, run "
"the following from your project folder containing ``manage.py``::"
msgstr ""

msgid ""
"This runs your tests and collects coverage data of the executed files in "
"your project. You can see a report of this data by typing following command::"
msgstr ""

msgid ""
"Note that some Django code was executed while running tests, but it is not "
"listed here because of the ``source`` flag passed to the previous command."
msgstr ""

msgid ""
"For more options like annotated HTML listings detailing missed lines, see "
"the `coverage.py`_ docs."
msgstr ""

msgid "Testing in Django"
msgstr ""

msgid ""
"Automated testing is an extremely useful bug-killing tool for the modern Web "
"developer. You can use a collection of tests -- a **test suite** -- to "
"solve, or avoid, a number of problems:"
msgstr ""

msgid ""
"When you're writing new code, you can use tests to validate your code works "
"as expected."
msgstr ""

msgid ""
"When you're refactoring or modifying old code, you can use tests to ensure "
"your changes haven't affected your application's behavior unexpectedly."
msgstr ""

msgid ""
"Testing a Web application is a complex task, because a Web application is "
"made of several layers of logic -- from HTTP-level request handling, to form "
"validation and processing, to template rendering. With Django's test-"
"execution framework and assorted utilities, you can simulate requests, "
"insert test data, inspect your application's output and generally verify "
"your code is doing what it should be doing."
msgstr ""

msgid "The best part is, it's really easy."
msgstr ""

msgid ""
"The preferred way to write tests in Django is using the :mod:`unittest` "
"module built in to the Python standard library. This is covered in detail in "
"the :doc:`overview` document."
msgstr ""

msgid ""
"You can also use any *other* Python test framework; Django provides an API "
"and tools for that kind of integration. They are described in the :ref:"
"`other-testing-frameworks` section of :doc:`advanced`."
msgstr ""

msgid "Writing and running tests"
msgstr ""

msgid ""
"The :doc:`testing tutorial </intro/tutorial05>`, the :doc:`testing tools "
"reference </topics/testing/tools>`, and the :doc:`advanced testing topics </"
"topics/testing/advanced>`."
msgstr ""

msgid ""
"This document is split into two primary sections. First, we explain how to "
"write tests with Django. Then, we explain how to run them."
msgstr ""

msgid ""
"Django's unit tests use a Python standard library module: :mod:`unittest`. "
"This module defines tests using a class-based approach."
msgstr ""

msgid ""
"Here is an example which subclasses from :class:`django.test.TestCase`, "
"which is a subclass of :class:`unittest.TestCase` that runs each test inside "
"a transaction to provide isolation::"
msgstr ""

msgid ""
"When you :ref:`run your tests <running-tests>`, the default behavior of the "
"test utility is to find all the test cases (that is, subclasses of :class:"
"`unittest.TestCase`) in any file whose name begins with ``test``, "
"automatically build a test suite out of those test cases, and run that suite."
msgstr ""

msgid "For more details about :mod:`unittest`, see the Python documentation."
msgstr ""

msgid "Where should the tests live?"
msgstr ""

msgid ""
"The default :djadmin:`startapp` template creates a ``tests.py`` file in the "
"new application. This might be fine if you only have a few tests, but as "
"your test suite grows you'll likely want to restructure it into a tests "
"package so you can split your tests into different submodules such as "
"``test_models.py``, ``test_views.py``, ``test_forms.py``, etc. Feel free to "
"pick whatever organizational scheme you like."
msgstr ""

msgid "See also :ref:`testing-reusable-applications`."
msgstr ""

msgid ""
"If your tests rely on database access such as creating or querying models, "
"be sure to create your test classes as subclasses of :class:`django.test."
"TestCase` rather than :class:`unittest.TestCase`."
msgstr ""

msgid ""
"Using :class:`unittest.TestCase` avoids the cost of running each test in a "
"transaction and flushing the database, but if your tests interact with the "
"database their behavior will vary based on the order that the test runner "
"executes them. This can lead to unit tests that pass when run in isolation "
"but fail when run in a suite."
msgstr ""

msgid "Running tests"
msgstr "运行测试"

msgid ""
"Once you've written tests, run them using the :djadmin:`test` command of "
"your project's ``manage.py`` utility::"
msgstr ""

msgid ""
"Test discovery is based on the unittest module's :py:ref:`built-in test "
"discovery <unittest-test-discovery>`.  By default, this will discover tests "
"in any file named \"test*.py\" under the current working directory."
msgstr ""

msgid ""
"You can specify particular tests to run by supplying any number of \"test "
"labels\" to ``./manage.py test``. Each test label can be a full Python "
"dotted path to a package, module, ``TestCase`` subclass, or test method. For "
"instance::"
msgstr ""

msgid ""
"You can also provide a path to a directory to discover tests below that "
"directory::"
msgstr ""

msgid ""
"You can specify a custom filename pattern match using the ``-p`` (or ``--"
"pattern``) option, if your test files are named differently from the ``test*."
"py`` pattern::"
msgstr ""

msgid ""
"If you press ``Ctrl-C`` while the tests are running, the test runner will "
"wait for the currently running test to complete and then exit gracefully. "
"During a graceful exit the test runner will output details of any test "
"failures, report on how many tests were run and how many errors and failures "
"were encountered, and destroy any test databases as usual. Thus pressing "
"``Ctrl-C`` can be very useful if you forget to pass the :option:`--failfast "
"<test --failfast>` option, notice that some tests are unexpectedly failing "
"and want to get details on the failures without waiting for the full test "
"run to complete."
msgstr ""

msgid ""
"If you do not want to wait for the currently running test to finish, you can "
"press ``Ctrl-C`` a second time and the test run will halt immediately, but "
"not gracefully. No details of the tests run before the interruption will be "
"reported, and any test databases created by the run will not be destroyed."
msgstr ""

msgid "Test with warnings enabled"
msgstr ""

msgid ""
"It's a good idea to run your tests with Python warnings enabled: ``python -"
"Wa manage.py test``. The ``-Wa`` flag tells Python to display deprecation "
"warnings. Django, like many other Python libraries, uses these warnings to "
"flag when features are going away. It also might flag areas in your code "
"that aren't strictly wrong but could benefit from a better implementation."
msgstr ""

msgid "The test database"
msgstr ""

msgid ""
"Tests that require a database (namely, model tests) will not use your \"real"
"\" (production) database. Separate, blank databases are created for the "
"tests."
msgstr ""

msgid ""
"Regardless of whether the tests pass or fail, the test databases are "
"destroyed when all the tests have been executed."
msgstr ""

msgid ""
"You can prevent the test databases from being destroyed by using the :option:"
"`test --keepdb` option. This will preserve the test database between runs. "
"If the database does not exist, it will first be created. Any migrations "
"will also be applied in order to keep it up to date."
msgstr ""

msgid ""
"The default test database names are created by prepending ``test_`` to the "
"value of each :setting:`NAME` in :setting:`DATABASES`. When using SQLite, "
"the tests will use an in-memory database by default (i.e., the database will "
"be created in memory, bypassing the filesystem entirely!). The :setting:"
"`TEST <DATABASE-TEST>` dictionary in :setting:`DATABASES` offers a number of "
"settings to configure your test database. For example, if you want to use a "
"different database name, specify :setting:`NAME <TEST_NAME>` in the :setting:"
"`TEST <DATABASE-TEST>` dictionary for any given database in :setting:"
"`DATABASES`."
msgstr ""

msgid ""
"On PostgreSQL, :setting:`USER` will also need read access to the built-in "
"``postgres`` database."
msgstr ""

msgid ""
"Aside from using a separate database, the test runner will otherwise use all "
"of the same database settings you have in your settings file: :setting:"
"`ENGINE <DATABASE-ENGINE>`, :setting:`USER`, :setting:`HOST`, etc. The test "
"database is created by the user specified by :setting:`USER`, so you'll need "
"to make sure that the given user account has sufficient privileges to create "
"a new database on the system."
msgstr ""

msgid ""
"For fine-grained control over the character encoding of your test database, "
"use the :setting:`CHARSET <TEST_CHARSET>` TEST option. If you're using "
"MySQL, you can also use the :setting:`COLLATION <TEST_COLLATION>` option to "
"control the particular collation used by the test database. See the :doc:"
"`settings documentation </ref/settings>` for details of these and other "
"advanced settings."
msgstr ""

msgid ""
"If using an SQLite in-memory database with SQLite, `shared cache <https://"
"www.sqlite.org/sharedcache.html>`_ is enabled, so you can write tests with "
"ability to share the database between threads."
msgstr ""

msgid "Finding data from your production database when running tests?"
msgstr ""

msgid ""
"If your code attempts to access the database when its modules are compiled, "
"this will occur *before* the test database is set up, with potentially "
"unexpected results. For example, if you have a database query in module-"
"level code and a real database exists, production data could pollute your "
"tests. *It is a bad idea to have such import-time database queries in your "
"code* anyway - rewrite your code so that it doesn't do this."
msgstr ""

msgid ""
"This also applies to customized implementations of :meth:`~django.apps."
"AppConfig.ready()`."
msgstr ""

msgid ""
"The :ref:`advanced multi-db testing topics <topics-testing-advanced-"
"multidb>`."
msgstr ""

msgid "Order in which tests are executed"
msgstr ""

msgid ""
"In order to guarantee that all ``TestCase`` code starts with a clean "
"database, the Django test runner reorders tests in the following way:"
msgstr ""

msgid "All :class:`~django.test.TestCase` subclasses are run first."
msgstr ""

msgid ""
"Then, all other Django-based tests (test cases based on :class:`~django.test."
"SimpleTestCase`, including :class:`~django.test.TransactionTestCase`) are "
"run with no particular ordering guaranteed nor enforced among them."
msgstr ""

msgid ""
"Then any other :class:`unittest.TestCase` tests (including doctests) that "
"may alter the database without restoring it to its original state are run."
msgstr ""

msgid ""
"The new ordering of tests may reveal unexpected dependencies on test case "
"ordering. This is the case with doctests that relied on state left in the "
"database by a given :class:`~django.test.TransactionTestCase` test, they "
"must be updated to be able to run independently."
msgstr ""

msgid ""
"You may reverse the execution order inside groups using the :option:`test --"
"reverse` option. This can help with ensuring your tests are independent from "
"each other."
msgstr ""

msgid "Rollback emulation"
msgstr ""

msgid ""
"Any initial data loaded in migrations will only be available in ``TestCase`` "
"tests and not in ``TransactionTestCase`` tests, and additionally only on "
"backends where transactions are supported (the most important exception "
"being MyISAM). This is also true for tests which rely on "
"``TransactionTestCase`` such as :class:`LiveServerTestCase` and :class:"
"`~django.contrib.staticfiles.testing.StaticLiveServerTestCase`."
msgstr ""

msgid ""
"Django can reload that data for you on a per-testcase basis by setting the "
"``serialized_rollback`` option to ``True`` in the body of the ``TestCase`` "
"or ``TransactionTestCase``, but note that this will slow down that test "
"suite by approximately 3x."
msgstr ""

msgid ""
"Third-party apps or those developing against MyISAM will need to set this; "
"in general, however, you should be developing your own projects against a "
"transactional database and be using ``TestCase`` for most tests, and thus "
"not need this setting."
msgstr ""

msgid ""
"The initial serialization is usually very quick, but if you wish to exclude "
"some apps from this process (and speed up test runs slightly), you may add "
"those apps to :setting:`TEST_NON_SERIALIZED_APPS`."
msgstr ""

msgid ""
"To prevent serialized data from being loaded twice, setting "
"``serialized_rollback=True`` disables the :data:`~django.db.models.signals."
"post_migrate` signal when flushing the test database."
msgstr ""

msgid "Other test conditions"
msgstr ""

msgid ""
"Regardless of the value of the :setting:`DEBUG` setting in your "
"configuration file, all Django tests run with :setting:`DEBUG`\\=False. This "
"is to ensure that the observed output of your code matches what will be seen "
"in a production setting."
msgstr ""

msgid ""
"Caches are not cleared after each test, and running \"manage.py test fooapp"
"\" can insert data from the tests into the cache of a live system if you run "
"your tests in production because, unlike databases, a separate \"test cache"
"\" is not used. This behavior `may change`_ in the future."
msgstr ""

msgid "Understanding the test output"
msgstr ""

msgid ""
"When you run your tests, you'll see a number of messages as the test runner "
"prepares itself. You can control the level of detail of these messages with "
"the ``verbosity`` option on the command line::"
msgstr ""

msgid ""
"This tells you that the test runner is creating a test database, as "
"described in the previous section."
msgstr ""

msgid ""
"Once the test database has been created, Django will run your tests. If "
"everything goes well, you'll see something like this::"
msgstr ""

msgid ""
"If there are test failures, however, you'll see full details about which "
"tests failed::"
msgstr ""

msgid ""
"A full explanation of this error output is beyond the scope of this "
"document, but it's pretty intuitive. You can consult the documentation of "
"Python's :mod:`unittest` library for details."
msgstr ""

msgid ""
"Note that the return code for the test-runner script is 1 for any number of "
"failed and erroneous tests. If all the tests pass, the return code is 0. "
"This feature is useful if you're using the test-runner script in a shell "
"script and need to test for success or failure at that level."
msgstr ""

msgid "Speeding up the tests"
msgstr ""

msgid "Running tests in parallel"
msgstr ""

msgid ""
"As long as your tests are properly isolated, you can run them in parallel to "
"gain a speed up on multi-core hardware. See :option:`test --parallel`."
msgstr ""

msgid "Password hashing"
msgstr ""

msgid ""
"The default password hasher is rather slow by design. If you're "
"authenticating many users in your tests, you may want to use a custom "
"settings file and set the :setting:`PASSWORD_HASHERS` setting to a faster "
"hashing algorithm::"
msgstr ""

msgid ""
"Don't forget to also include in :setting:`PASSWORD_HASHERS` any hashing "
"algorithm used in fixtures, if any."
msgstr ""

msgid "Preserving the test database"
msgstr ""

msgid ""
"The :option:`test --keepdb` option preserves the test database between test "
"runs. It skips the create and destroy actions which can greatly decrease the "
"time to run tests."
msgstr ""

msgid "Testing tools"
msgstr ""

msgid ""
"Django provides a small set of tools that come in handy when writing tests."
msgstr ""

msgid "The test client"
msgstr ""

msgid ""
"The test client is a Python class that acts as a dummy Web browser, allowing "
"you to test your views and interact with your Django-powered application "
"programmatically."
msgstr ""

msgid "Some of the things you can do with the test client are:"
msgstr ""

msgid ""
"Simulate GET and POST requests on a URL and observe the response -- "
"everything from low-level HTTP (result headers and status codes) to page "
"content."
msgstr ""

msgid ""
"See the chain of redirects (if any) and check the URL and status code at "
"each step."
msgstr ""

msgid ""
"Test that a given request is rendered by a given Django template, with a "
"template context that contains certain values."
msgstr ""

msgid ""
"Note that the test client is not intended to be a replacement for Selenium_ "
"or other \"in-browser\" frameworks. Django's test client has a different "
"focus. In short:"
msgstr ""

msgid ""
"Use Django's test client to establish that the correct template is being "
"rendered and that the template is passed the correct context data."
msgstr ""

msgid ""
"Use in-browser frameworks like Selenium_ to test *rendered* HTML and the "
"*behavior* of Web pages, namely JavaScript functionality. Django also "
"provides special support for those frameworks; see the section on :class:"
"`~django.test.LiveServerTestCase` for more details."
msgstr ""

msgid "A comprehensive test suite should use a combination of both test types."
msgstr ""

msgid "Overview and a quick example"
msgstr ""

msgid ""
"To use the test client, instantiate ``django.test.Client`` and retrieve Web "
"pages::"
msgstr ""

msgid ""
"As this example suggests, you can instantiate ``Client`` from within a "
"session of the Python interactive interpreter."
msgstr ""

msgid "Note a few important things about how the test client works:"
msgstr ""

msgid ""
"The test client does *not* require the Web server to be running. In fact, it "
"will run just fine with no Web server running at all! That's because it "
"avoids the overhead of HTTP and deals directly with the Django framework. "
"This helps make the unit tests run quickly."
msgstr ""

msgid ""
"When retrieving pages, remember to specify the *path* of the URL, not the "
"whole domain. For example, this is correct::"
msgstr ""

msgid "This is incorrect::"
msgstr ""

msgid ""
"The test client is not capable of retrieving Web pages that are not powered "
"by your Django project. If you need to retrieve other Web pages, use a "
"Python standard library module such as :mod:`urllib`."
msgstr ""

msgid ""
"To resolve URLs, the test client uses whatever URLconf is pointed-to by "
"your :setting:`ROOT_URLCONF` setting."
msgstr ""

msgid ""
"Although the above example would work in the Python interactive interpreter, "
"some of the test client's functionality, notably the template-related "
"functionality, is only available *while tests are running*."
msgstr ""

msgid ""
"The reason for this is that Django's test runner performs a bit of black "
"magic in order to determine which template was loaded by a given view. This "
"black magic (essentially a patching of Django's template system in memory) "
"only happens during test running."
msgstr ""

msgid ""
"By default, the test client will disable any CSRF checks performed by your "
"site."
msgstr ""

msgid ""
"If, for some reason, you *want* the test client to perform CSRF checks, you "
"can create an instance of the test client that enforces CSRF checks. To do "
"this, pass in the ``enforce_csrf_checks`` argument when you construct your "
"client::"
msgstr ""

msgid "Making requests"
msgstr ""

msgid "Use the ``django.test.Client`` class to make requests."
msgstr ""

msgid ""
"It requires no arguments at time of construction. However, you can use "
"keywords arguments to specify some default headers. For example, this will "
"send a ``User-Agent`` HTTP header in each request::"
msgstr ""

msgid ""
"The values from the ``extra`` keywords arguments passed to :meth:`~django."
"test.Client.get()`, :meth:`~django.test.Client.post()`, etc. have precedence "
"over the defaults passed to the class constructor."
msgstr ""

msgid ""
"The ``enforce_csrf_checks`` argument can be used to test CSRF protection "
"(see above)."
msgstr ""

msgid ""
"The ``json_encoder`` argument allows setting a custom JSON encoder for the "
"JSON serialization that's described in :meth:`post`."
msgstr ""

msgid "The ``json_encoder`` argument was added."
msgstr ""

msgid ""
"Once you have a ``Client`` instance, you can call any of the following "
"methods:"
msgstr ""

msgid ""
"Makes a GET request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

msgid ""
"The key-value pairs in the ``data`` dictionary are used to create a GET data "
"payload. For example::"
msgstr ""

msgid "...will result in the evaluation of a GET request equivalent to::"
msgstr ""

msgid ""
"The ``extra`` keyword arguments parameter can be used to specify headers to "
"be sent in the request. For example::"
msgstr ""

msgid ""
"...will send the HTTP header ``HTTP_X_REQUESTED_WITH`` to the details view, "
"which is a good way to test code paths that use the :meth:`django.http."
"HttpRequest.is_ajax()` method."
msgstr ""

msgid "CGI specification"
msgstr ""

msgid ""
"The headers sent via ``**extra`` should follow CGI_ specification. For "
"example, emulating a different \"Host\" header as sent in the HTTP request "
"from the browser to the server should be passed as ``HTTP_HOST``."
msgstr ""

msgid ""
"If you already have the GET arguments in URL-encoded form, you can use that "
"encoding instead of using the data argument. For example, the previous GET "
"request could also be posed as::"
msgstr ""

msgid ""
"If you provide a URL with both an encoded GET data and a data argument, the "
"data argument will take precedence."
msgstr ""

msgid ""
"If you set ``follow`` to ``True`` the client will follow any redirects and a "
"``redirect_chain`` attribute will be set in the response object containing "
"tuples of the intermediate urls and status codes."
msgstr ""

msgid ""
"If you had a URL ``/redirect_me/`` that redirected to ``/next/``, that "
"redirected to ``/final/``, this is what you'd see::"
msgstr ""

msgid ""
"If you set ``secure`` to ``True`` the client will emulate an HTTPS request."
msgstr ""

msgid ""
"Makes a POST request on the provided ``path`` and returns a ``Response`` "
"object, which is documented below."
msgstr ""

msgid ""
"The key-value pairs in the ``data`` dictionary are used to submit POST data. "
"For example::"
msgstr ""

msgid "...will result in the evaluation of a POST request to this URL::"
msgstr ""

msgid "...with this POST data::"
msgstr ""

msgid ""
"If you provide ``content_type`` as :mimetype:`application/json`, a ``data`` "
"dictionary is serialized using :func:`json.dumps` with :class:`~django.core."
"serializers.json.DjangoJSONEncoder`. You can change the encoder by providing "
"a ``json_encoder`` argument to :class:`Client`. This serialization also "
"happens for :meth:`put`, :meth:`patch`, and :meth:`delete` requests."
msgstr ""

msgid ""
"The JSON serialization described above was added. In older versions, you can "
"call :func:`json.dumps` on ``data`` before passing it to ``post()`` to "
"achieve the same thing."
msgstr ""

msgid ""
"If you provide any other ``content_type`` (e.g. :mimetype:`text/xml` for an "
"XML payload), the contents of ``data`` are sent as-is in the POST request, "
"using ``content_type`` in the HTTP ``Content-Type`` header."
msgstr ""

msgid ""
"If you don't provide a value for ``content_type``, the values in ``data`` "
"will be transmitted with a content type of :mimetype:`multipart/form-data`. "
"In this case, the key-value pairs in ``data`` will be encoded as a multipart "
"message and used to create the POST data payload."
msgstr ""

msgid ""
"To submit multiple values for a given key -- for example, to specify the "
"selections for a ``<select multiple>`` -- provide the values as a list or "
"tuple for the required key. For example, this value of ``data`` would submit "
"three selected values for the field named ``choices``::"
msgstr ""

msgid ""
"Submitting files is a special case. To POST a file, you need only provide "
"the file field name as a key, and a file handle to the file you wish to "
"upload as a value. For example::"
msgstr ""

msgid ""
"(The name ``attachment`` here is not relevant; use whatever name your file-"
"processing code expects.)"
msgstr ""

msgid ""
"You may also provide any file-like object (e.g., :class:`~io.StringIO` or :"
"class:`~io.BytesIO`) as a file handle. If you're uploading to an :class:"
"`~django.db.models.ImageField`, the object needs a ``name`` attribute that "
"passes the :data:`~django.core.validators.validate_image_file_extension` "
"validator. For example::"
msgstr ""

msgid ""
"Note that if you wish to use the same file handle for multiple ``post()`` "
"calls then you will need to manually reset the file pointer between posts. "
"The easiest way to do this is to manually close the file after it has been "
"provided to ``post()``, as demonstrated above."
msgstr ""

msgid ""
"You should also ensure that the file is opened in a way that allows the data "
"to be read. If your file contains binary data such as an image, this means "
"you will need to open the file in ``rb`` (read binary) mode."
msgstr ""

msgid "The ``extra`` argument acts the same as for :meth:`Client.get`."
msgstr ""

msgid ""
"If the URL you request with a POST contains encoded parameters, these "
"parameters will be made available in the request.GET data. For example, if "
"you were to make the request::"
msgstr ""

msgid ""
"... the view handling this request could interrogate request.POST to "
"retrieve the username and password, and could interrogate request.GET to "
"determine if the user was a visitor."
msgstr ""

msgid ""
"Makes a HEAD request on the provided ``path`` and returns a ``Response`` "
"object. This method works just like :meth:`Client.get`, including the "
"``follow``, ``secure`` and ``extra`` arguments, except it does not return a "
"message body."
msgstr ""

msgid ""
"Makes an OPTIONS request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"When ``data`` is provided, it is used as the request body, and a ``Content-"
"Type`` header is set to ``content_type``."
msgstr ""

msgid ""
"The ``follow``, ``secure`` and ``extra`` arguments act the same as for :meth:"
"`Client.get`."
msgstr ""

msgid ""
"Makes a PUT request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a PATCH request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a DELETE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for testing RESTful interfaces."
msgstr ""

msgid ""
"Makes a TRACE request on the provided ``path`` and returns a ``Response`` "
"object. Useful for simulating diagnostic probes."
msgstr ""

msgid ""
"Unlike the other request methods, ``data`` is not provided as a keyword "
"parameter in order to comply with :rfc:`7231#section-4.3.8`, which mandates "
"that TRACE requests must not have a body."
msgstr ""

msgid ""
"The ``follow``, ``secure``, and ``extra`` arguments act the same as for :"
"meth:`Client.get`."
msgstr ""

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>` "
"and you deal with logging in users, you can use the test client's "
"``login()`` method to simulate the effect of a user logging into the site."
msgstr ""

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data required to pass any login-based tests that may form part of a "
"view."
msgstr ""

msgid ""
"The format of the ``credentials`` argument depends on which :ref:"
"`authentication backend <authentication-backends>` you're using (which is "
"configured by your :setting:`AUTHENTICATION_BACKENDS` setting). If you're "
"using the standard authentication backend provided by Django "
"(``ModelBackend``), ``credentials`` should be the user's username and "
"password, provided as keyword arguments::"
msgstr ""

msgid ""
"If you're using a different authentication backend, this method may require "
"different credentials. It requires whichever credentials are required by "
"your backend's ``authenticate()`` method."
msgstr ""

msgid ""
"``login()`` returns ``True`` if it the credentials were accepted and login "
"was successful."
msgstr ""

msgid ""
"Finally, you'll need to remember to create user accounts before you can use "
"this method. As we explained above, the test runner is executed using a test "
"database, which contains no users by default. As a result, user accounts "
"that are valid on your production site will not work under test conditions. "
"You'll need to create users as part of the test suite -- either manually "
"(using the Django model API) or with a test fixture. Remember that if you "
"want your test user to have a password, you can't set the user's password by "
"setting the password attribute directly -- you must use the :meth:`~django."
"contrib.auth.models.User.set_password()` function to store a correctly "
"hashed password. Alternatively, you can use the :meth:`~django.contrib.auth."
"models.UserManager.create_user` helper method to create a new user with a "
"correctly hashed password."
msgstr ""

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"you can use the ``force_login()`` method to simulate the effect of a user "
"logging into the site. Use this method instead of :meth:`login` when a test "
"requires a user be logged in and the details of how a user logged in aren't "
"important."
msgstr ""

msgid ""
"Unlike ``login()``, this method skips the authentication and verification "
"steps: inactive users (:attr:`is_active=False <django.contrib.auth.models."
"User.is_active>`) are permitted to login and the user's credentials don't "
"need to be provided."
msgstr ""

msgid ""
"The user will have its ``backend`` attribute set to the value of the "
"``backend`` argument (which should be a dotted Python path string), or to "
"``settings.AUTHENTICATION_BACKENDS[0]`` if a value isn't provided. The :func:"
"`~django.contrib.auth.authenticate` function called by :meth:`login` "
"normally annotates the user like this."
msgstr ""

msgid ""
"This method is faster than ``login()`` since the expensive password hashing "
"algorithms are bypassed. Also, you can speed up ``login()`` by :ref:`using a "
"weaker hasher while testing <speeding-up-tests-auth-hashers>`."
msgstr ""

msgid ""
"If your site uses Django's :doc:`authentication system</topics/auth/index>`, "
"the ``logout()`` method can be used to simulate the effect of a user logging "
"out of your site."
msgstr ""

msgid ""
"After you call this method, the test client will have all the cookies and "
"session data cleared to defaults. Subsequent requests will appear to come "
"from an :class:`~django.contrib.auth.models.AnonymousUser`."
msgstr ""

msgid "Testing responses"
msgstr ""

msgid ""
"The ``get()`` and ``post()`` methods both return a ``Response`` object. This "
"``Response`` object is *not* the same as the ``HttpResponse`` object "
"returned by Django views; the test response object has some additional data "
"useful for test code to verify."
msgstr ""

msgid "Specifically, a ``Response`` object has the following attributes:"
msgstr ""

msgid ""
"The test client that was used to make the request that resulted in the "
"response."
msgstr ""

msgid ""
"The body of the response, as a bytestring. This is the final page content as "
"rendered by the view, or any error message."
msgstr ""

msgid ""
"The template ``Context`` instance that was used to render the template that "
"produced the response content."
msgstr ""

msgid ""
"If the rendered page used multiple templates, then ``context`` will be a "
"list of ``Context`` objects, in the order in which they were rendered."
msgstr ""

msgid ""
"Regardless of the number of templates used during rendering, you can "
"retrieve context values using the ``[]`` operator. For example, the context "
"variable ``name`` could be retrieved using::"
msgstr ""

msgid "Not using Django templates?"
msgstr ""

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"context_data` may be a suitable alternative on responses with that attribute."
msgstr ""

msgid ""
"The body of the response, parsed as JSON. Extra keyword arguments are passed "
"to :func:`json.loads`. For example::"
msgstr ""

msgid ""
"If the ``Content-Type`` header is not ``\"application/json\"``, then a :exc:"
"`ValueError` will be raised when trying to parse the response."
msgstr ""

msgid "The request data that stimulated the response."
msgstr ""

msgid ""
"The ``WSGIRequest`` instance generated by the test handler that generated "
"the response."
msgstr ""

msgid ""
"The HTTP status of the response, as an integer. For a full list of defined "
"codes, see the `IANA status code registry`_."
msgstr ""

msgid ""
"A list of ``Template`` instances used to render the final content, in the "
"order they were rendered. For each template in the list, use ``template."
"name`` to get the template's file name, if the template was loaded from a "
"file. (The name is a string such as ``'admin/index.html'``.)"
msgstr ""

msgid ""
"This attribute is only populated when using the :class:`~django.template."
"backends.django.DjangoTemplates` backend. If you're using another template "
"engine, :attr:`~django.template.response.SimpleTemplateResponse."
"template_name` may be a suitable alternative if you only need the name of "
"the template used for rendering."
msgstr ""

msgid ""
"An instance of :class:`~django.urls.ResolverMatch` for the response. You can "
"use the :attr:`~django.urls.ResolverMatch.func` attribute, for example, to "
"verify the view that served the response::"
msgstr ""

msgid ""
"If the given URL is not found, accessing this attribute will raise a :exc:"
"`~django.urls.Resolver404` exception."
msgstr ""

msgid ""
"You can also use dictionary syntax on the response object to query the value "
"of any settings in the HTTP headers. For example, you could determine the "
"content type of a response using ``response['Content-Type']``."
msgstr ""

msgid "Exceptions"
msgstr "例外"

msgid ""
"If you point the test client at a view that raises an exception, that "
"exception will be visible in the test case. You can then use a standard "
"``try ... except`` block or :meth:`~unittest.TestCase.assertRaises` to test "
"for exceptions."
msgstr ""

msgid ""
"The only exceptions that are not visible to the test client are :class:"
"`~django.http.Http404`, :class:`~django.core.exceptions.PermissionDenied`, :"
"exc:`SystemExit`, and :class:`~django.core.exceptions.SuspiciousOperation`. "
"Django catches these exceptions internally and converts them into the "
"appropriate HTTP response codes. In these cases, you can check ``response."
"status_code`` in your test."
msgstr ""

msgid "Persistent state"
msgstr ""

msgid ""
"The test client is stateful. If a response returns a cookie, then that "
"cookie will be stored in the test client and sent with all subsequent "
"``get()`` and ``post()`` requests."
msgstr ""

msgid ""
"Expiration policies for these cookies are not followed. If you want a cookie "
"to expire, either delete it manually or create a new ``Client`` instance "
"(which will effectively delete all cookies)."
msgstr ""

msgid ""
"A test client has two attributes that store persistent state information. "
"You can access these properties as part of a test condition."
msgstr ""

msgid ""
"A Python :class:`~http.cookies.SimpleCookie` object, containing the current "
"values of all the client cookies. See the documentation of the :mod:`http."
"cookies` module for more."
msgstr ""

msgid ""
"A dictionary-like object containing session information. See the :doc:"
"`session documentation</topics/http/sessions>` for full details."
msgstr ""

msgid ""
"To modify the session and then save it, it must be stored in a variable "
"first (because a new ``SessionStore`` is created every time this property is "
"accessed)::"
msgstr ""

msgid "Setting the language"
msgstr ""

msgid ""
"When testing applications that support internationalization and "
"localization, you might want to set the language for a test client request. "
"The method for doing so depends on whether or not the :class:`~django."
"middleware.locale.LocaleMiddleware` is enabled."
msgstr ""

msgid ""
"If the middleware is enabled, the language can be set by creating a cookie "
"with a name of :setting:`LANGUAGE_COOKIE_NAME` and a value of the language "
"code::"
msgstr ""

msgid "or by including the ``Accept-Language`` HTTP header in the request::"
msgstr ""

msgid "More details are in :ref:`how-django-discovers-language-preference`."
msgstr ""

msgid ""
"If the middleware isn't enabled, the active language may be set using :func:"
"`.translation.override`::"
msgstr ""

msgid "More details are in :ref:`explicitly-setting-the-active-language`."
msgstr ""

msgid "The following is a simple unit test using the test client::"
msgstr ""

msgid ":class:`django.test.RequestFactory`"
msgstr ""

msgid "Provided test case classes"
msgstr ""

msgid ""
"Normal Python unit test classes extend a base class of :class:`unittest."
"TestCase`. Django provides a few extensions of this base class:"
msgstr ""

msgid "Hierarchy of Django unit testing classes"
msgstr ""

msgid ""
"Converting a normal :class:`unittest.TestCase` to any of the subclasses is "
"easy: change the base class of your test from ``unittest.TestCase`` to the "
"subclass. All of the standard Python unit test functionality will be "
"available, and it will be augmented with some useful additions as described "
"in each section below."
msgstr ""

msgid "``SimpleTestCase``"
msgstr ""

msgid "A subclass of :class:`unittest.TestCase` that adds this functionality:"
msgstr ""

msgid "Some useful assertions like:"
msgstr ""

msgid ""
"Checking that a callable :meth:`raises a certain exception <SimpleTestCase."
"assertRaisesMessage>`."
msgstr ""

msgid ""
"Checking that a callable :meth:`triggers a certain warning <SimpleTestCase."
"assertWarnsMessage>`."
msgstr ""

msgid ""
"Testing form field :meth:`rendering and error treatment <SimpleTestCase."
"assertFieldOutput>`."
msgstr ""

msgid ""
"Testing :meth:`HTML responses for the presence/lack of a given fragment "
"<SimpleTestCase.assertContains>`."
msgstr ""

msgid ""
"Verifying that a template :meth:`has/hasn't been used to generate a given "
"response content <SimpleTestCase.assertTemplateUsed>`."
msgstr ""

msgid ""
"Verifying a HTTP :meth:`redirect <SimpleTestCase.assertRedirects>` is "
"performed by the app."
msgstr ""

msgid ""
"Robustly testing two :meth:`HTML fragments <SimpleTestCase.assertHTMLEqual>` "
"for equality/inequality or :meth:`containment <SimpleTestCase.assertInHTML>`."
msgstr ""

msgid ""
"Robustly testing two :meth:`XML fragments <SimpleTestCase.assertXMLEqual>` "
"for equality/inequality."
msgstr ""

msgid ""
"Robustly testing two :meth:`JSON fragments <SimpleTestCase.assertJSONEqual>` "
"for equality."
msgstr ""

msgid ""
"The ability to run tests with :ref:`modified settings <overriding-settings>`."
msgstr ""

msgid "Using the :attr:`~SimpleTestCase.client` :class:`~django.test.Client`."
msgstr ""

msgid ""
"If your tests make any database queries, use subclasses :class:`~django.test."
"TransactionTestCase` or :class:`~django.test.TestCase`."
msgstr ""

msgid ""
":class:`~SimpleTestCase` disallows database queries by default. This helps "
"to avoid executing write queries which will affect other tests since each "
"``SimpleTestCase`` test isn't run in a transaction. If you aren't concerned "
"about this problem, you can disable this behavior by setting the "
"``allow_database_queries`` class attribute to ``True`` on your test class."
msgstr ""

msgid ""
"``SimpleTestCase`` and its subclasses (e.g. ``TestCase``, ...) rely on "
"``setUpClass()`` and ``tearDownClass()`` to perform some class-wide "
"initialization (e.g. overriding settings). If you need to override those "
"methods, don't forget to call the ``super`` implementation::"
msgstr ""

msgid ""
"Be sure to account for Python's behavior if an exception is raised during "
"``setUpClass()``. If that happens, neither the tests in the class nor "
"``tearDownClass()`` are run. In the case of :class:`django.test.TestCase`, "
"this will leak the transaction created in ``super()``  which results in "
"various symptoms including a segmentation fault on some platforms (reported "
"on macOS). If you want to intentionally raise an exception such as :exc:"
"`unittest.SkipTest` in ``setUpClass()``, be sure to do it before calling "
"``super()`` to avoid this."
msgstr ""

msgid "``TransactionTestCase``"
msgstr ""

msgid ""
"``TransactionTestCase`` inherits from :class:`~django.test.SimpleTestCase` "
"to add some database-specific features:"
msgstr ""

msgid ""
"Resetting the database to a known state at the beginning of each test to "
"ease testing and using the ORM."
msgstr ""

msgid "Database :attr:`~TransactionTestCase.fixtures`."
msgstr ""

msgid ""
"Test :ref:`skipping based on database backend features <skipping-tests>`."
msgstr ""

msgid ""
"The remaining specialized :meth:`assert* <TransactionTestCase."
"assertQuerysetEqual>` methods."
msgstr ""

msgid ""
"Django's :class:`TestCase` class is a more commonly used subclass of "
"``TransactionTestCase`` that makes use of database transaction facilities to "
"speed up the process of resetting the database to a known state at the "
"beginning of each test. A consequence of this, however, is that some "
"database behaviors cannot be tested within a Django ``TestCase`` class. For "
"instance, you cannot test that a block of code is executing within a "
"transaction, as is required when using :meth:`~django.db.models.query."
"QuerySet.select_for_update()`. In those cases, you should use "
"``TransactionTestCase``."
msgstr ""

msgid ""
"``TransactionTestCase`` and ``TestCase`` are identical except for the manner "
"in which the database is reset to a known state and the ability for test "
"code to test the effects of commit and rollback:"
msgstr ""

msgid ""
"A ``TransactionTestCase`` resets the database after the test runs by "
"truncating all tables. A ``TransactionTestCase`` may call commit and "
"rollback and observe the effects of these calls on the database."
msgstr ""

msgid ""
"A ``TestCase``, on the other hand, does not truncate tables after a test. "
"Instead, it encloses the test code in a database transaction that is rolled "
"back at the end of the test. This guarantees that the rollback at the end of "
"the test restores the database to its initial state."
msgstr ""

msgid ""
"``TestCase`` running on a database that does not support rollback (e.g. "
"MySQL with the MyISAM storage engine), and all instances of "
"``TransactionTestCase``, will roll back at the end of the test by deleting "
"all data from the test database."
msgstr ""

msgid ""
"Apps :ref:`will not see their data reloaded <test-case-serialized-"
"rollback>`; if you need this functionality (for example, third-party apps "
"should enable this) you can set ``serialized_rollback = True`` inside the "
"``TestCase`` body."
msgstr ""

msgid "``TestCase``"
msgstr ""

msgid ""
"This is the most common class to use for writing tests in Django. It "
"inherits from :class:`TransactionTestCase` (and by extension :class:"
"`SimpleTestCase`). If your Django application doesn't use a database, use :"
"class:`SimpleTestCase`."
msgstr ""

msgid "The class:"
msgstr ""

msgid ""
"Wraps the tests within two nested :func:`~django.db.transaction.atomic` "
"blocks: one for the whole class and one for each test. Therefore, if you "
"want to test some specific database transaction behavior, use :class:"
"`TransactionTestCase`."
msgstr ""

msgid "Checks deferrable database constraints at the end of each test."
msgstr ""

msgid "It also provides an additional method:"
msgstr ""

msgid ""
"The class-level ``atomic`` block described above allows the creation of "
"initial data at the class level, once for the whole ``TestCase``. This "
"technique allows for faster tests as compared to using ``setUp()``."
msgstr ""

msgid ""
"Note that if the tests are run on a database with no transaction support "
"(for instance, MySQL with the MyISAM engine), ``setUpTestData()`` will be "
"called before each test, negating the speed benefits."
msgstr ""

msgid ""
"Be careful not to modify any objects created in ``setUpTestData()`` in your "
"test methods. Modifications to in-memory objects from setup work done at the "
"class level will persist between test methods. If you do need to modify "
"them, you could reload them in the ``setUp()`` method with :meth:`~django.db."
"models.Model.refresh_from_db`, for example."
msgstr ""

msgid "``LiveServerTestCase``"
msgstr ""

msgid ""
"``LiveServerTestCase`` does basically the same as :class:`~django.test."
"TransactionTestCase` with one extra feature: it launches a live Django "
"server in the background on setup, and shuts it down on teardown. This "
"allows the use of automated test clients other than the :ref:`Django dummy "
"client <test-client>` such as, for example, the Selenium_ client, to execute "
"a series of functional tests inside a browser and simulate a real user's "
"actions."
msgstr ""

msgid ""
"The live server listens on ``localhost`` and binds to port 0 which uses a "
"free port assigned by the operating system. The server's URL can be accessed "
"with ``self.live_server_url`` during the tests."
msgstr ""

msgid ""
"To demonstrate how to use ``LiveServerTestCase``, let's write a simple "
"Selenium test. First of all, you need to install the `selenium package`_ "
"into your Python path:"
msgstr ""

msgid ""
"Then, add a ``LiveServerTestCase``-based test to your app's tests module "
"(for example: ``myapp/tests.py``). For this example, we'll assume you're "
"using the :mod:`~django.contrib.staticfiles` app and want to have static "
"files served during the execution of your tests similar to what we get at "
"development time with ``DEBUG=True``, i.e. without having to collect them "
"using :djadmin:`collectstatic`. We'll use the  :class:`~django.contrib."
"staticfiles.testing.StaticLiveServerTestCase` subclass which provides that "
"functionality. Replace it with ``django.test.LiveServerTestCase`` if you "
"don't need that."
msgstr ""

msgid "The code for this test may look as follows::"
msgstr ""

msgid "Finally, you may run the test as follows:"
msgstr ""

msgid ""
"This example will automatically open Firefox then go to the login page, "
"enter the credentials and press the \"Log in\" button. Selenium offers other "
"drivers in case you do not have Firefox installed or wish to use another "
"browser. The example above is just a tiny fraction of what the Selenium "
"client can do; check out the `full reference`_ for more details."
msgstr ""

msgid ""
"When using an in-memory SQLite database to run the tests, the same database "
"connection will be shared by two threads in parallel: the thread in which "
"the live server is run and the thread in which the test case is run. It's "
"important to prevent simultaneous database queries via this shared "
"connection by the two threads, as that may sometimes randomly cause the "
"tests to fail. So you need to ensure that the two threads don't access the "
"database at the same time. In particular, this means that in some cases (for "
"example, just after clicking a link or submitting a form), you might need to "
"check that a response is received by Selenium and that the next page is "
"loaded before proceeding with further test execution. Do this, for example, "
"by making Selenium wait until the ``<body>`` HTML tag is found in the "
"response (requires Selenium > 2.13)::"
msgstr ""

msgid ""
"The tricky thing here is that there's really no such thing as a \"page load,"
"\" especially in modern Web apps that generate HTML dynamically after the "
"server generates the initial document. So, simply checking for the presence "
"of ``<body>`` in the response might not necessarily be appropriate for all "
"use cases. Please refer to the `Selenium FAQ`_ and `Selenium documentation`_ "
"for more information."
msgstr ""

msgid "Test cases features"
msgstr ""

msgid "Default test client"
msgstr ""

msgid ""
"Every test case in a ``django.test.*TestCase`` instance has access to an "
"instance of a Django test client. This client can be accessed as ``self."
"client``. This client is recreated for each test, so you don't have to worry "
"about state (such as cookies) carrying over from one test to another."
msgstr ""

msgid "This means, instead of instantiating a ``Client`` in each test::"
msgstr ""

msgid "...you can just refer to ``self.client``, like so::"
msgstr ""

msgid "Customizing the test client"
msgstr ""

msgid ""
"If you want to use a different ``Client`` class (for example, a subclass "
"with customized behavior), use the :attr:`~SimpleTestCase.client_class` "
"class attribute::"
msgstr ""

msgid "Fixture loading"
msgstr ""

msgid ""
"A test case for a database-backed website isn't much use if there isn't any "
"data in the database. Tests are more readable and it's more maintainable to "
"create objects using the ORM, for example in :meth:`TestCase.setUpTestData`, "
"however, you can also use fixtures."
msgstr ""

msgid ""
"A fixture is a collection of data that Django knows how to import into a "
"database. For example, if your site has user accounts, you might set up a "
"fixture of fake user accounts in order to populate your database during "
"tests."
msgstr ""

msgid ""
"The most straightforward way of creating a fixture is to use the :djadmin:"
"`manage.py dumpdata <dumpdata>` command. This assumes you already have some "
"data in your database. See the :djadmin:`dumpdata documentation<dumpdata>` "
"for more details."
msgstr ""

msgid ""
"Once you've created a fixture and placed it in a ``fixtures`` directory in "
"one of your :setting:`INSTALLED_APPS`, you can use it in your unit tests by "
"specifying a ``fixtures`` class attribute on your :class:`django.test."
"TestCase` subclass::"
msgstr ""

msgid "Here's specifically what will happen:"
msgstr ""

msgid ""
"At the start of each test, before ``setUp()`` is run, Django will flush the "
"database, returning the database to the state it was in directly after :"
"djadmin:`migrate` was called."
msgstr ""

msgid ""
"Then, all the named fixtures are installed. In this example, Django will "
"install any JSON fixture named ``mammals``, followed by any fixture named "
"``birds``. See the :djadmin:`loaddata` documentation for more details on "
"defining and installing fixtures."
msgstr ""

msgid ""
"For performance reasons, :class:`TestCase` loads fixtures once for the "
"entire test class, before :meth:`~TestCase.setUpTestData`, instead of before "
"each test, and it uses transactions to clean the database before each test. "
"In any case, you can be certain that the outcome of a test will not be "
"affected by another test or by the order of test execution."
msgstr ""

msgid ""
"By default, fixtures are only loaded into the ``default`` database. If you "
"are using multiple databases and set :attr:`multi_db=True "
"<TransactionTestCase.multi_db>`, fixtures will be loaded into all databases."
msgstr ""

msgid "URLconf configuration"
msgstr ""

msgid ""
"If your application provides views, you may want to include tests that use "
"the test client to exercise those views. However, an end user is free to "
"deploy the views in your application at any URL of their choosing. This "
"means that your tests can't rely upon the fact that your views will be "
"available at a particular URL. Decorate your test class or test method with "
"``@override_settings(ROOT_URLCONF=...)`` for URLconf configuration."
msgstr ""

msgid "Multi-database support"
msgstr ""

msgid ""
"Django sets up a test database corresponding to every database that is "
"defined in the :setting:`DATABASES` definition in your settings file. "
"However, a big part of the time taken to run a Django TestCase is consumed "
"by the call to ``flush`` that ensures that you have a clean database at the "
"start of each test run. If you have multiple databases, multiple flushes are "
"required (one for each database), which can be a time consuming activity -- "
"especially if your tests don't need to test multi-database activity."
msgstr ""

msgid ""
"As an optimization, Django only flushes the ``default`` database at the "
"start of each test run. If your setup contains multiple databases, and you "
"have a test that requires every database to be clean, you can use the "
"``multi_db`` attribute on the test suite to request a full flush."
msgstr ""

msgid ""
"This test case will flush *all* the test databases before running "
"``test_index_page_view``."
msgstr ""

msgid ""
"The ``multi_db`` flag also affects into which databases the :attr:"
"`TransactionTestCase.fixtures` are loaded. By default (when "
"``multi_db=False``), fixtures are only loaded into the ``default`` database. "
"If ``multi_db=True``, fixtures are loaded into all databases."
msgstr ""

msgid "Overriding settings"
msgstr ""

msgid ""
"Use the functions below to temporarily alter the value of settings in tests. "
"Don't manipulate ``django.conf.settings`` directly as Django won't restore "
"the original values after such manipulations."
msgstr ""

msgid ""
"For testing purposes it's often useful to change a setting temporarily and "
"revert to the original value after running the testing code. For this use "
"case Django provides a standard Python context manager (see :pep:`343`) "
"called :meth:`~django.test.SimpleTestCase.settings`, which can be used like "
"this::"
msgstr ""

msgid ""
"This example will override the :setting:`LOGIN_URL` setting for the code in "
"the ``with`` block and reset its value to the previous state afterwards."
msgstr ""

msgid ""
"It can prove unwieldy to redefine settings that contain a list of values. In "
"practice, adding or removing values is often sufficient. The :meth:`~django."
"test.SimpleTestCase.modify_settings` context manager makes it easy::"
msgstr ""

msgid ""
"For each action, you can supply either a list of values or a string. When "
"the value already exists in the list, ``append`` and ``prepend`` have no "
"effect; neither does ``remove`` when the value doesn't exist."
msgstr ""

msgid ""
"In case you want to override a setting for a test method, Django provides "
"the :func:`~django.test.override_settings` decorator (see :pep:`318`). It's "
"used like this::"
msgstr ""

msgid ""
"The decorator can also be applied to :class:`~django.test.TestCase` classes::"
msgstr ""

msgid ""
"Likewise, Django provides the :func:`~django.test.modify_settings` "
"decorator::"
msgstr ""

msgid "The decorator can also be applied to test case classes::"
msgstr ""

msgid ""
"When given a class, these decorators modify the class directly and return "
"it; they don't create and return a modified copy of it. So if you try to "
"tweak the above examples to assign the return value to a different name than "
"``LoginTestCase`` or ``MiddlewareTestCase``, you may be surprised to find "
"that the original test case classes are still equally affected by the "
"decorator. For a given class, :func:`~django.test.modify_settings` is always "
"applied after :func:`~django.test.override_settings`."
msgstr ""

msgid "Considerations with Python 3.5"
msgstr ""

msgid ""
"If using Python 3.5 (or older, if using an older version of Django), avoid "
"mixing  ``remove`` with ``append`` and ``prepend`` in :func:`~django.test."
"modify_settings`. In some cases it matters whether a value is first added "
"and then removed or vice versa, and dictionary key order isn't preserved "
"until Python 3.6. Instead, apply the decorator twice to guarantee the order "
"of operations. For example, to ensure that ``SessionMiddleware`` appears "
"first in ``MIDDLEWARE``::"
msgstr ""

msgid ""
"The settings file contains some settings that are only consulted during "
"initialization of Django internals. If you change them with "
"``override_settings``, the setting is changed if you access it via the "
"``django.conf.settings`` module, however, Django's internals access it "
"differently. Effectively, using :func:`~django.test.override_settings` or :"
"func:`~django.test.modify_settings` with these settings is probably not "
"going to do what you expect it to do."
msgstr ""

msgid ""
"We do not recommend altering the :setting:`DATABASES` setting. Altering the :"
"setting:`CACHES` setting is possible, but a bit tricky if you are using "
"internals that make using of caching, like :mod:`django.contrib.sessions`. "
"For example, you will have to reinitialize the session backend in a test "
"that uses cached sessions and overrides :setting:`CACHES`."
msgstr ""

msgid ""
"Finally, avoid aliasing your settings as module-level constants as "
"``override_settings()`` won't work on such values since they are only "
"evaluated the first time the module is imported."
msgstr ""

msgid ""
"You can also simulate the absence of a setting by deleting it after settings "
"have been overridden, like this::"
msgstr ""

msgid ""
"When overriding settings, make sure to handle the cases in which your app's "
"code uses a cache or similar feature that retains state even if the setting "
"is changed. Django provides the :data:`django.test.signals.setting_changed` "
"signal that lets you register callbacks to clean up and otherwise reset "
"state when settings are changed."
msgstr ""

msgid "Django itself uses this signal to reset various data:"
msgstr ""

msgid "Overridden settings"
msgstr ""

msgid "Data reset"
msgstr ""

msgid "USE_TZ, TIME_ZONE"
msgstr ""

msgid "Databases timezone"
msgstr ""

msgid "TEMPLATES"
msgstr ""

msgid "Template engines"
msgstr ""

msgid "SERIALIZATION_MODULES"
msgstr ""

msgid "Serializers cache"
msgstr ""

msgid "LOCALE_PATHS, LANGUAGE_CODE"
msgstr ""

msgid "Default translation and loaded translations"
msgstr ""

msgid "MEDIA_ROOT, DEFAULT_FILE_STORAGE"
msgstr ""

msgid "Default file storage"
msgstr "默认文件存储"

msgid "Emptying the test outbox"
msgstr ""

msgid ""
"If you use any of Django's custom ``TestCase`` classes, the test runner will "
"clear the contents of the test email outbox at the start of each test case."
msgstr ""

msgid ""
"For more detail on email services during tests, see `Email services`_ below."
msgstr ""

msgid "Assertions"
msgstr ""

msgid ""
"As Python's normal :class:`unittest.TestCase` class implements assertion "
"methods such as :meth:`~unittest.TestCase.assertTrue` and :meth:`~unittest."
"TestCase.assertEqual`, Django's custom :class:`TestCase` class provides a "
"number of custom assertion methods that are useful for testing Web "
"applications:"
msgstr ""

msgid ""
"The failure messages given by most of these assertion methods can be "
"customized with the ``msg_prefix`` argument. This string will be prefixed to "
"any failure message generated by the assertion. This allows you to provide "
"additional details that may help you to identify the location and cause of a "
"failure in your test suite."
msgstr ""

msgid ""
"Asserts that execution of ``callable`` raises ``expected_exception`` and "
"that ``expected_message`` is found in the exception's message. Any other "
"outcome is reported as a failure. It's a simpler version of :meth:`unittest."
"TestCase.assertRaisesRegex` with the difference that ``expected_message`` "
"isn't treated as a regular expression."
msgstr ""

msgid ""
"If only the ``expected_exception`` and ``expected_message`` parameters are "
"given, returns a context manager so that the code being tested can be "
"written inline rather than as a function::"
msgstr ""

msgid ""
"Analogous to :meth:`SimpleTestCase.assertRaisesMessage` but for :meth:"
"`~unittest.TestCase.assertWarnsRegex` instead of :meth:`~unittest.TestCase."
"assertRaisesRegex`."
msgstr ""

msgid "Asserts that a form field behaves correctly with various inputs."
msgstr ""

msgid "the class of the field to be tested."
msgstr ""

msgid "a dictionary mapping valid inputs to their expected cleaned values."
msgstr ""

msgid ""
"a dictionary mapping invalid inputs to one or more raised error messages."
msgstr ""

msgid "the args passed to instantiate the field."
msgstr ""

msgid "the kwargs passed to instantiate the field."
msgstr ""

msgid "the expected clean output for inputs in ``empty_values``."
msgstr ""

msgid ""
"For example, the following code tests that an ``EmailField`` accepts ``a@a."
"com`` as a valid email address, but rejects ``aaa`` with a reasonable error "
"message::"
msgstr ""

msgid ""
"Asserts that a field on a form raises the provided list of errors when "
"rendered on the form."
msgstr ""

msgid ""
"``form`` is the name the ``Form`` instance was given in the template context."
msgstr ""

msgid ""
"``field`` is the name of the field on the form to check. If ``field`` has a "
"value of ``None``, non-field errors (errors you can access via :meth:`form."
"non_field_errors() <django.forms.Form.non_field_errors>`) will be checked."
msgstr ""

msgid ""
"``errors`` is an error string, or a list of error strings, that are expected "
"as a result of form validation."
msgstr ""

msgid ""
"Asserts that the ``formset`` raises the provided list of errors when "
"rendered."
msgstr ""

msgid ""
"``formset`` is the name the ``Formset`` instance was given in the template "
"context."
msgstr ""

msgid ""
"``form_index`` is the number of the form within the ``Formset``.  If "
"``form_index`` has a value of ``None``, non-form errors (errors you can "
"access via ``formset.non_form_errors()``) will be checked."
msgstr ""

msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` appears in the content of the response. If ``count`` is "
"provided, ``text`` must occur exactly ``count`` times in the response."
msgstr ""

msgid ""
"Set ``html`` to ``True`` to handle ``text`` as HTML. The comparison with the "
"response content will be based on HTML semantics instead of character-by-"
"character equality. Whitespace is ignored in most cases, attribute ordering "
"is not significant. See :meth:`~SimpleTestCase.assertHTMLEqual` for more "
"details."
msgstr ""

msgid ""
"Asserts that a ``Response`` instance produced the given ``status_code`` and "
"that ``text`` does *not* appear in the content of the response."
msgstr ""

msgid ""
"Asserts that the template with the given name was used in rendering the "
"response."
msgstr ""

msgid "The name is a string such as ``'admin/index.html'``."
msgstr ""

msgid ""
"The count argument is an integer indicating the number of times the template "
"should be rendered. Default is ``None``, meaning that the template should be "
"rendered one or more times."
msgstr ""

msgid "You can use this as a context manager, like this::"
msgstr ""

msgid ""
"Asserts that the template with the given name was *not* used in rendering "
"the response."
msgstr ""

msgid ""
"You can use this as a context manager in the same way as :meth:"
"`~SimpleTestCase.assertTemplateUsed`."
msgstr ""

msgid ""
"Asserts that the response returned a ``status_code`` redirect status, "
"redirected to ``expected_url`` (including any ``GET`` data), and that the "
"final page was received with ``target_status_code``."
msgstr ""

msgid ""
"If your request used the ``follow`` argument, the ``expected_url`` and "
"``target_status_code`` will be the url and status code for the final point "
"of the redirect chain."
msgstr ""

msgid ""
"If ``fetch_redirect_response`` is ``False``, the final page won't be loaded. "
"Since the test client can't fetch external URLs, this is particularly useful "
"if ``expected_url`` isn't part of your Django app."
msgstr ""

msgid ""
"Scheme is handled correctly when making comparisons between two URLs. If "
"there isn't any scheme specified in the location where we are redirected to, "
"the original request's scheme is used. If present, the scheme in "
"``expected_url`` is the one used to make the comparisons to."
msgstr ""

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are equal. The comparison "
"is based on HTML semantics. The comparison takes following things into "
"account:"
msgstr ""

msgid "Whitespace before and after HTML tags is ignored."
msgstr ""

msgid "All types of whitespace are considered equivalent."
msgstr ""

msgid ""
"All open tags are closed implicitly, e.g. when a surrounding tag is closed "
"or the HTML document ends."
msgstr ""

msgid "Empty tags are equivalent to their self-closing version."
msgstr ""

msgid "The ordering of attributes of an HTML element is not significant."
msgstr ""

msgid ""
"Attributes without an argument are equal to attributes that equal in name "
"and value (see the examples)."
msgstr ""

msgid ""
"The following examples are valid tests and don't raise any "
"``AssertionError``::"
msgstr ""

msgid ""
"``html1`` and ``html2`` must be valid HTML. An ``AssertionError`` will be "
"raised if one of them cannot be parsed."
msgstr ""

msgid "Output in case of error can be customized with the ``msg`` argument."
msgstr ""

msgid ""
"Asserts that the strings ``html1`` and ``html2`` are *not* equal. The "
"comparison is based on HTML semantics. See :meth:`~SimpleTestCase."
"assertHTMLEqual` for details."
msgstr ""

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are equal. The comparison is "
"based on XML semantics. Similarly to :meth:`~SimpleTestCase."
"assertHTMLEqual`, the comparison is made on parsed content, hence only "
"semantic differences are considered, not syntax differences. When invalid "
"XML is passed in any parameter, an ``AssertionError`` is always raised, even "
"if both string are identical."
msgstr ""

msgid ""
"Asserts that the strings ``xml1`` and ``xml2`` are *not* equal. The "
"comparison is based on XML semantics. See :meth:`~SimpleTestCase."
"assertXMLEqual` for details."
msgstr ""

msgid ""
"Asserts that the HTML fragment ``needle`` is contained in the ``haystack`` "
"one."
msgstr ""

msgid ""
"If the ``count`` integer argument is specified, then additionally the number "
"of ``needle`` occurrences will be strictly verified."
msgstr ""

msgid ""
"Whitespace in most cases is ignored, and attribute ordering is not "
"significant. The passed-in arguments must be valid HTML."
msgstr ""

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are equal. "
"Usual JSON non-significant whitespace rules apply as the heavyweight is "
"delegated to the :mod:`json` library."
msgstr ""

msgid ""
"Asserts that the JSON fragments ``raw`` and ``expected_data`` are *not* "
"equal. See :meth:`~SimpleTestCase.assertJSONEqual` for further details."
msgstr ""

msgid ""
"Asserts that a queryset ``qs`` returns a particular list of values "
"``values``."
msgstr ""

msgid ""
"The comparison of the contents of ``qs`` and ``values`` is performed using "
"the function ``transform``; by default, this means that the ``repr()`` of "
"each value is compared. Any other callable can be used if ``repr()`` doesn't "
"provide a unique or helpful comparison."
msgstr ""

msgid ""
"By default, the comparison is also ordering dependent. If ``qs`` doesn't "
"provide an implicit ordering, you can set the ``ordered`` parameter to "
"``False``, which turns the comparison into a ``collections.Counter`` "
"comparison. If the order is undefined (if the given ``qs`` isn't ordered and "
"the comparison is against more than one ordered values), a ``ValueError`` is "
"raised."
msgstr ""

msgid ""
"Asserts that when ``func`` is called with ``*args`` and ``**kwargs`` that "
"``num`` database queries are executed."
msgstr ""

msgid ""
"If a ``\"using\"`` key is present in ``kwargs`` it is used as the database "
"alias for which to check the number of queries.  If you wish to call a "
"function with a ``using`` parameter you can do it by wrapping the call with "
"a ``lambda`` to add an extra parameter::"
msgstr ""

msgid "You can also use this as a context manager::"
msgstr "你也可以用它作为上下文管理器::"

msgid "Tagging tests"
msgstr "标记测试"

msgid ""
"You can tag your tests so you can easily run a particular subset. For "
"example, you might label fast or slow tests::"
msgstr ""

msgid "You can also tag a test case::"
msgstr ""

msgid ""
"Subclasses inherit tags from superclasses, and methods inherit tags from "
"their class. Given::"
msgstr ""

msgid ""
"``SampleTestCaseChild.test`` will be labeled with ``'slow'``, ``'core'``, "
"``'bar'``, and ``'foo'``."
msgstr ""

msgid ""
"In older versions, tagged tests don't inherit tags from classes, and tagged "
"subclasses don't inherit tags from superclasses. For example, "
"``SampleTestCaseChild.test`` is labeled only with ``'bar'``."
msgstr ""

msgid ""
"Then you can choose which tests to run. For example, to run only fast tests:"
msgstr ""

msgid "Or to run fast tests and the core one (even though it's slow):"
msgstr ""

msgid ""
"You can also exclude tests by tag. To run core tests if they are not slow:"
msgstr ""

msgid ""
":option:`test --exclude-tag` has precedence over :option:`test --tag`, so if "
"a test has two tags and you select one of them and exclude the other, the "
"test won't be run."
msgstr ""

msgid "Email services"
msgstr ""

msgid ""
"If any of your Django views send email using :doc:`Django's email "
"functionality </topics/email>`, you probably don't want to send email each "
"time you run a test using that view. For this reason, Django's test runner "
"automatically redirects all Django-sent email to a dummy outbox. This lets "
"you test every aspect of sending email -- from the number of messages sent "
"to the contents of each message -- without actually sending the messages."
msgstr ""

msgid ""
"The test runner accomplishes this by transparently replacing the normal "
"email backend with a testing backend. (Don't worry -- this has no effect on "
"any other email senders outside of Django, such as your machine's mail "
"server, if you're running one.)"
msgstr ""

msgid ""
"During test running, each outgoing email is saved in ``django.core.mail."
"outbox``. This is a simple list of all :class:`~django.core.mail."
"EmailMessage` instances that have been sent. The ``outbox`` attribute is a "
"special attribute that is created *only* when the ``locmem`` email backend "
"is used. It doesn't normally exist as part of the :mod:`django.core.mail` "
"module and you can't import it directly. The code below shows how to access "
"this attribute correctly."
msgstr ""

msgid ""
"Here's an example test that examines ``django.core.mail.outbox`` for length "
"and contents::"
msgstr ""

msgid ""
"As noted :ref:`previously <emptying-test-outbox>`, the test outbox is "
"emptied at the start of every test in a Django ``*TestCase``. To empty the "
"outbox manually, assign the empty list to ``mail.outbox``::"
msgstr ""

msgid "Management Commands"
msgstr "管理命令"

msgid ""
"Management commands can be tested with the :func:`~django.core.management."
"call_command` function. The output can be redirected into a ``StringIO`` "
"instance::"
msgstr ""

msgid "Skipping tests"
msgstr "忽略测试"

msgid ""
"The unittest library provides the :func:`@skipIf <unittest.skipIf>` and :"
"func:`@skipUnless <unittest.skipUnless>` decorators to allow you to skip "
"tests if you know ahead of time that those tests are going to fail under "
"certain conditions."
msgstr ""

msgid ""
"For example, if your test requires a particular optional library in order to "
"succeed, you could decorate the test case with :func:`@skipIf <unittest."
"skipIf>`. Then, the test runner will report that the test wasn't executed "
"and why, instead of failing the test or omitting the test altogether."
msgstr ""

msgid ""
"To supplement these test skipping behaviors, Django provides two additional "
"skip decorators. Instead of testing a generic boolean, these decorators "
"check the capabilities of the database, and skip the test if the database "
"doesn't support a specific named feature."
msgstr ""

msgid ""
"The decorators use a string identifier to describe database features. This "
"string corresponds to attributes of the database connection features class. "
"See ``django.db.backends.BaseDatabaseFeatures`` class for a full list of "
"database features that can be used as a basis for skipping tests."
msgstr ""

msgid ""
"Skip the decorated test or ``TestCase`` if all of the named database "
"features are supported."
msgstr ""

msgid ""
"For example, the following test will not be executed if the database "
"supports transactions (e.g., it would *not* run under PostgreSQL, but it "
"would under MySQL with MyISAM tables)::"
msgstr ""

msgid ""
"Skip the decorated test or ``TestCase`` if any of the named database "
"features are *not* supported."
msgstr ""

msgid ""
"For example, the following test will only be executed if the database "
"supports transactions (e.g., it would run under PostgreSQL, but *not* under "
"MySQL with MyISAM tables)::"
msgstr ""
"例如，接下来的测试仅在支持事务的数据库下执行(如：可以是PostgreSQL，但不可以是"
"使用MyISAM数据库引擎的MySQL)::"
